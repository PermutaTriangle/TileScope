0132_0213_0231_0312_0321_1302_1320_2031_2301_3021_3120

--------------------------------------------------------------------------
Auto search started Sat, 09 Sep 2017 21:27:26

Looking for proof tree for Basis((Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 20.999939918518066 seconds
Number of tilings expanded by Set 1 is 117
Number of tilings expanded by Set 2 is 31
Total number of tilings is 703
Total number of expandable tilings is 292
Total number of verified tilings is 489
Total number of strategy verified tilings is 397
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.11384963989257812 seconds, ~0%
Time spent strategy verifying: 3.560894727706909 seconds, ~16%
Time spent inferring: 3.4022254943847656 seconds, ~16%
Time spent expanding Set 1: 8.798518896102905 seconds, ~41%
Time spent expanding Set 2: 0.06617164611816406 seconds, ~0%
Time spent prepping for tree search: 0.5163917541503906 seconds, ~2%
Time spent searching for tree: 3.6180315017700195 seconds, ~17%

Proof tree found Sat, 09 Sep 2017 21:27:47

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point

Label: 5

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
2: Av+(Perm((0, 1)))
3: point

Label: 6

+-+-+-+
| |2| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 7

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: point
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |4| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((1, 0)))

Label: 8

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 11, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 13, "children": [{"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[2, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[2, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "point"}, "relation": "", "identifier": 110, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[0, 1]": "point", "[3, 2]": "point", "[2, 3]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 77, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av+(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[1, 3]": "Av(Perm((1, 0)))", "[2, 4]": "point"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=0). | Reverse of: Inserting the top most point in to the cell Cell(i=0, j=2). | Inserting the left most point in to the cell Cell(i=0, j=2). | Reverse of: Inserting the bottom most point in to the cell Cell(i=3, j=0). | ", "identifier": 80, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 132, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 20.999939918518066 seconds

