Finding proof for:

perm set of all perms avoiding Basis((Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2))))

Gen-1: 100%|█████████████████████████████████████|[00:00<00:00 @ 10.83starter/s]
Gen-2: 100%|█████████████████████████████████████|[00:03<00:00 @  1.27starter/s]
Gen-3:  75%|███████████████████████████▊         |[02:51<00:24 @  3.54s/starter]

Finding the proof tree took 174 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|X|
+-+


Label: 1

+-+
| |
+-+


Label: 2

+-+-+-+
|X| |X|
+-+-+-+
| |o| |
+-+-+-+


Label: 3

+-+-+
|X| |
+-+-+
| |o|
+-+-+


Label: 4

+-+-+-+-+-+-+
| |X| |X| |X|
+-+-+-+-+-+-+
| | | | |o| |
+-+-+-+-+-+-+
|X| | | | | |
+-+-+-+-+-+-+
| | |o| | | |
+-+-+-+-+-+-+


Label: 5

+-+-+-+-+-+
| | | |X| |
+-+-+-+-+-+
| |X| | | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
|X| | | | |
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+


Label: 6

+-+-+-+-+-+-+-+-+-+
| | | | |X| |X| |X|
+-+-+-+-+-+-+-+-+-+
| | | | | | | |o| |
+-+-+-+-+-+-+-+-+-+
| | | |X| | | | | |
+-+-+-+-+-+-+-+-+-+
| |X| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |o| | | |
+-+-+-+-+-+-+-+-+-+
|X| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | |o| | | | | | |
+-+-+-+-+-+-+-+-+-+


Here are the recursions

-----------------

TILING:
+-+-+-+-+-+-+-+-+-+
| | | | |X| |X| |X|
+-+-+-+-+-+-+-+-+-+
| | | | | | | |o| |
+-+-+-+-+-+-+-+-+-+
| | | |X| | | | | |
+-+-+-+-+-+-+-+-+-+
| |X| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |o| | | |
+-+-+-+-+-+-+-+-+-+
|X| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | |o| | | | | | |
+-+-+-+-+-+-+-+-+-+

Tiling recursively verified with cells [(0, 4), (0, 6), (0, 8), (1, 7), (3, 1), (4, 5)]

Recursively verified by:
+-+-+-+-+-+-+
| |X| |X| |X|
+-+-+-+-+-+-+
| | | | |o| |
+-+-+-+-+-+-+
|X| | | | | |
+-+-+-+-+-+-+
| | |o| | | |
+-+-+-+-+-+-+


--------------------- END RECURSIONS

Computer readable (JSON):

{
    "root": {
        "children": [
            {
                "children": [],
                "formal_step": "Tiling now self verified",
                "tiling": {},
                "verified_by": []
            },
            {
                "children": [
                    {
                        "children": [],
                        "formal_step": "Tiling now self verified",
                        "tiling": {
                            "(0, 0)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                            "(1, 1)": "Block.point"
                        },
                        "verified_by": []
                    },
                    {
                        "children": [
                            {
                                "children": [],
                                "formal_step": "Tiling now self verified",
                                "tiling": {
                                    "(0, 3)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                    "(1, 1)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                    "(2, 4)": "Block.point",
                                    "(3, 0)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                    "(4, 2)": "Block.point"
                                },
                                "verified_by": []
                            },
                            {
                                "children": [],
                                "formal_step": "Tiling recursively verified with cells [(0, 4), (0, 6), (0, 8), (1, 7), (3, 1), (4, 5)]",
                                "tiling": {
                                    "(0, 4)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                    "(0, 6)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                    "(0, 8)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                    "(1, 7)": "Block.point",
                                    "(2, 3)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                    "(3, 1)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                    "(4, 5)": "Block.point",
                                    "(5, 0)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                    "(6, 2)": "Block.point"
                                },
                                "verified_by": [
                                    {
                                        "(0, 1)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                        "(0, 3)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                        "(0, 5)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                        "(1, 4)": "Block.point",
                                        "(2, 0)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                                        "(3, 2)": "Block.point"
                                    }
                                ]
                            }
                        ],
                        "formal_step": "Inserting the bottom most point in to the cell (0, 5)",
                        "tiling": {
                            "(0, 1)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                            "(0, 3)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                            "(0, 5)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                            "(1, 4)": "Block.point",
                            "(2, 0)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                            "(3, 2)": "Block.point"
                        },
                        "verified_by": []
                    }
                ],
                "formal_step": "Inserting the bottom most point in to the cell (0, 2)",
                "tiling": {
                    "(0, 0)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                    "(0, 2)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))",
                    "(1, 1)": "Block.point"
                },
                "verified_by": []
            }
        ],
        "formal_step": "Inserting the bottom most point in to the cell (0, 0)",
        "tiling": {
            "(0, 0)": "Av(Perm((3, 0, 1, 2)), Perm((3, 0, 2, 1)), Perm((3, 1, 0, 2)))"
        },
        "verified_by": []
    }
}
