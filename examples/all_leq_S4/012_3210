012_3210

===========================================
Log created Mon, 22 May 2017 12:01:24

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 390 inferral cache hits and 3364 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 4338 tilings in it right now.
There were 1570 tilings of which 75 are verified.
There were 864 SiblingNodes of which 39 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3592* times, (1796 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:01:54

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 493 inferral cache hits and 55292 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 5068 tilings in it right now.
There were 1882 tilings of which 105 are verified.
There were 1052 SiblingNodes of which 63 are verified.

The function splittings called the partitioning cache *55573* times, (1337 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:02:25

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 298 inferral cache hits and 2432 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 3353 tilings in it right now.
There were 1220 tilings of which 37 are verified.
There were 384 SiblingNodes of which 17 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2606* times, (1303 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:02:55

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 419 inferral cache hits and 25993 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 4654 tilings in it right now.
There were 1633 tilings of which 35 are verified.
There were 507 SiblingNodes of which 15 are verified.

The function splittings called the partitioning cache *26215* times, (867 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:03:25

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5052 inferral cache hits and 2109 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2665 tilings in it right now.
There were 1014 tilings of which 53 are verified.
There were 299 SiblingNodes of which 21 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2260* times, (1130 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:03:55

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 5862 inferral cache hits and 13925 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 3176 tilings in it right now.
There were 1184 tilings of which 48 are verified.
There were 377 SiblingNodes of which 28 are verified.

The function splittings called the partitioning cache *14081* times, (577 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:04:01

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 5 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 138 inferral cache hits and 2482 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1101 tilings in it right now.
There were 836 tilings of which 270 are verified.
There were 672 SiblingNodes of which 184 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2626* times, (1313 originating)
There were 0 cache misses

A proof tree was found in 5 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           │           ├─────13
                        │           │           └─────14
                        │           └─────15
                        │                 ├─────16
                        │                 └─────17
                        │                       ├─────18
                        │                       │     ├─────19
                        │                       │     └─────20
                        │                       └─────21
                        └─────22
                              ├─────23
                              │     ├─────24
                              │     └─────25
                              │           ├─────26
                              │           └─────27
                              └─────28
                                    ├─────29
                                    │     ├─────30
                                    │     └─────31
                                    └─────32
                                          ├─────33
                                          ├─────34
                                          │     ├─────35
                                          │     └─────36
                                          │           ├─────37
                                          │           ├─────38
                                          │           └─────39
                                          └─────40
                                                ├─────41
                                                └─────42
                                                      ├─────43
                                                      ├─────44
                                                      └─────45

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+
| | |2|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 7

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 8

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
2: point

Label: 9

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: point

Label: 10

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 11

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 12

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 13

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point

Label: 14

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | |2|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 15

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |1| | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 16

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 17

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |1| | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 18

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 19

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point

Label: 20

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 21

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | |1|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point

Label: 22

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
4: point

Label: 23

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point

Label: 24

+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point

Label: 25

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 26

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 27

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point

Label: 28

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))
4: point

Label: 29

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|1| | |2|
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 30

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 31

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 32

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|1| |1| |2|
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 33

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point

Label: 34

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|2| |3| | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 35

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 36

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| |1| | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point

Label: 37

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |1| | |1|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point

Label: 38

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point

Label: 39

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point

Label: 40

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| |1| | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 41

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point

Label: 42

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| |1| | |1|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point

Label: 43

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | |1| | |1|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point

Label: 44

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point

Label: 45

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 423, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 424, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 425, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 426, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 427, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 428, "in_tiling": {"[0, 3]": "point", "[1, 2]": "point", "[2, 0]": "point", "[3, 4]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "point", "[2, 0]": "point", "[3, 4]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 429, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "point", "[3, 4]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "point", "[3, 4]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 1", "identifier": 430, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "point", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "point", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 431, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 432, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 433, "in_tiling": {"[0, 3]": "point", "[1, 2]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 434, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 1", "identifier": 435, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 436, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 0]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 0]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 437, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "point", "[5, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "point", "[5, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (5, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "identifier": 438, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 0", "identifier": 439, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "identifier": 440, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 441, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 442, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point", "[3, 0]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 3]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=1). | Inserting the bottom most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 443, "in_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 3]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 444, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point", "[3, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 3]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 5]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 4]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=1). | Inserting the top most point in to the cell Cell(i=2, j=0). | Inserting the top most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "identifier": 445, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 446, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 447, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 0", "identifier": 448, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 449, "in_tiling": {"[0, 0]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 450, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 451, "in_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 452, "in_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 3]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 3]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 453, "in_tiling": {"[0, 3]": "point", "[1, 5]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 4]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 5]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 4]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 454, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 2]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 2]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 455, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 456, "in_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 3]": "point", "[4, 0]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 3]": "point", "[4, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 457, "in_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 2]": "point", "[3, 3]": "point", "[4, 0]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 2]": "point", "[3, 3]": "point", "[4, 0]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 458, "in_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 3]": "point", "[4, 0]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 3]": "point", "[4, 0]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 459, "in_tiling": {"[0, 3]": "point", "[1, 5]": "point", "[2, 2]": "point", "[3, 4]": "point", "[4, 0]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 5]": "point", "[2, 2]": "point", "[3, 4]": "point", "[4, 0]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 460, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 2]": "point", "[4, 0]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 2]": "point", "[4, 0]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (5, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 461, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 2]": "point", "[4, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 2]": "point", "[4, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 0", "identifier": 462, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "identifier": 463, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "identifier": 464, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 465, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 1, 0))).", "identifier": 466, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "identifier": 467, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((3, 2, 1, 0))).", "identifier": 468, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": ""}}
