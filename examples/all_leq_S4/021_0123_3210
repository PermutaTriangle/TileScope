021_0123_3210

===========================================
Log created Mon, 22 May 2017 14:36:58

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 635 inferral cache hits and 3726 partitioning cache hits.
The partitioning cache had 9 tilings in it right now.
The inferral cache has 5653 tilings in it right now.
There were 1899 tilings of which 194 are verified.
There were 740 SiblingNodes of which 59 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3982* times, (1991 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 14:37:28

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 626 inferral cache hits and 58512 partitioning cache hits.
The partitioning cache had 9 tilings in it right now.
The inferral cache has 5791 tilings in it right now.
There were 1977 tilings of which 218 are verified.
There were 790 SiblingNodes of which 81 are verified.

The function splittings called the partitioning cache *58770* times, (1218 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 14:37:59

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 280 inferral cache hits and 2397 partitioning cache hits.
The partitioning cache had 57 tilings in it right now.
The inferral cache has 3178 tilings in it right now.
There were 1247 tilings of which 128 are verified.
There were 239 SiblingNodes of which 36 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2568* times, (1284 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Mon, 22 May 2017 14:38:30

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 595 inferral cache hits and 21949 partitioning cache hits.
The partitioning cache had 44 tilings in it right now.
The inferral cache has 5545 tilings in it right now.
There were 1861 tilings of which 183 are verified.
There were 263 SiblingNodes of which 35 are verified.

The function splittings called the partitioning cache *22181* times, (1010 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 14:39:00

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6355 inferral cache hits and 1827 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 3333 tilings in it right now.
There were 1278 tilings of which 90 are verified.
There were 320 SiblingNodes of which 47 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1962* times, (981 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 14:39:30

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 10426 inferral cache hits and 25047 partitioning cache hits.
The partitioning cache had 16 tilings in it right now.
The inferral cache has 5108 tilings in it right now.
There were 1889 tilings of which 149 are verified.
There were 353 SiblingNodes of which 43 are verified.

The function splittings called the partitioning cache *25297* times, (1068 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 14:39:49

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 19 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 519 inferral cache hits and 3636 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2968 tilings in it right now.
There were 1454 tilings of which 491 are verified.
There were 826 SiblingNodes of which 143 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3860* times, (1930 originating)
There were 0 cache misses

A proof tree was found in 19 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        └─────8
                              ├─────9
                              └─────10
                                    ├─────11
                                    └─────12
                                          ├─────13
                                          └─────14

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((3, 2, 1, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2, 3)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))

Label: 5

+-+-+-+-+
| |1| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2, 3)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))

Label: 6

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2, 3)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))

Label: 7

+-+-+-+-+
| |1| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))

Label: 8

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))
4: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 9

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 10

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |2| |3| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 11

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 12

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |2| |1| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 13

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 14

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 497, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 498, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 499, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[3, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 500, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 4]": "point", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 501, "in_tiling": {"[0, 4]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 5]": "point", "[2, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 3]": "point", "[4, 0]": "point", "[5, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[0, 5]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 6]": "point", "[2, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 4]": "point", "[4, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[6, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=5, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 502, "in_tiling": {"[0, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 0]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 5]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[4, 0]": "point", "[5, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 503, "in_tiling": {"[0, 4]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 5]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 2]": "point", "[5, 3]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 5]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 2]": "point", "[5, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 504, "in_tiling": {"[0, 4]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 5]": "point", "[2, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 0]": "point", "[4, 1]": "point", "[5, 3]": "point"}, "out_tiling": {"[0, 5]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 6]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 3]": "point", "[4, 0]": "point", "[5, 1]": "point", "[6, 4]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=2). | "}], "formal_step": "Placing the minimum point into row 1", "identifier": 505, "in_tiling": {"[0, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 0]": "point", "[4, 1]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 0]": "point", "[4, 1]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 506, "in_tiling": {"[0, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 1", "identifier": 507, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2, 3))).", "identifier": 508, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "identifier": 509, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=0). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3))).", "identifier": 510, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((3, 2, 1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0))).", "identifier": 511, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": ""}}
