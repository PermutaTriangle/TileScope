021_102

===========================================
Log created Mon, 22 May 2017 16:17:00

Maximum depth fully searched was 0

Maximum time set at 30 seconds

Total time taken was 0 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 0 inferral cache hits and 7 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 14 tilings in it right now.
There were 7 tilings of which 7 are verified.
There were 3 SiblingNodes of which 3 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *8* times, (4 originating)
There were 0 cache misses

A proof tree was found in 0 seconds

Human readable:

root: 0
      ├─────1
      └─────2

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
2: Av(Perm((1, 0)))
3: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2))).", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}}
