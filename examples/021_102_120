
Finding the proof tree for Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0))) took 0 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av(Perm((0, 1)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))

Computer readable (JSON):

{
    "root": {
        "children": [
            {
                "children": [],
                "formal_step": "Verified because it is a one by one tiling with a subclass",
                "in_tiling": {},
                "out_tiling": {},
                "tilings": [
                    {}
                ]
            },
            {
                "children": [
                    {
                        "children": [],
                        "formal_step": "The tiling is a subset of the subclass",
                        "in_tiling": {
                            "[0, 1]": "Av(Perm((0, 1)))",
                            "[1, 0]": "point"
                        },
                        "out_tiling": {
                            "[0, 1]": "Av(Perm((0, 1)))",
                            "[1, 0]": "point"
                        },
                        "tilings": [
                            {
                                "[0, 1]": "Av(Perm((0, 1)))",
                                "[1, 0]": "point"
                            }
                        ]
                    },
                    {
                        "children": [],
                        "formal_step": "The tiling is a subset of the subclass",
                        "in_tiling": {
                            "[0, 0]": "Av+(Perm((1, 0)))",
                            "[0, 2]": "Av(Perm((0, 1)))",
                            "[1, 1]": "point"
                        },
                        "out_tiling": {
                            "[0, 3]": "Av(Perm((0, 1)))",
                            "[1, 0]": "point",
                            "[2, 1]": "Av(Perm((1, 0)))",
                            "[3, 2]": "point"
                        },
                        "tilings": [
                            {
                                "[0, 3]": "Av(Perm((0, 1)))",
                                "[1, 0]": "point",
                                "[2, 1]": "Av(Perm((1, 0)))",
                                "[3, 2]": "point"
                            },
                            {
                                "[0, 0]": "Av(Perm((1, 0)))",
                                "[0, 3]": "Av(Perm((0, 1)))",
                                "[1, 1]": "point",
                                "[2, 2]": "point"
                            },
                            {
                                "[0, 0]": "Av+(Perm((1, 0)))",
                                "[0, 2]": "Av(Perm((0, 1)))",
                                "[1, 1]": "point"
                            }
                        ]
                    }
                ],
                "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((1, 0))).",
                "in_tiling": {
                    "[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"
                },
                "out_tiling": {
                    "[0, 0]": "Av(Perm((1, 0)))",
                    "[0, 2]": "Av(Perm((0, 1)))",
                    "[1, 1]": "point"
                },
                "tilings": [
                    {
                        "[0, 0]": "Av(Perm((1, 0)))",
                        "[0, 2]": "Av(Perm((0, 1)))",
                        "[1, 1]": "point"
                    },
                    {
                        "[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"
                    },
                    {
                        "[0, 0]": "Av(Perm((1, 0)))",
                        "[1, 1]": "point",
                        "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"
                    },
                    {
                        "[0, 1]": "Av(Perm((0, 1)))",
                        "[1, 0]": "point",
                        "[2, 1]": "Av(Perm((1, 0)))"
                    },
                    {
                        "[0, 1]": "point",
                        "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))",
                        "[1, 2]": "Av(Perm((1, 0)))"
                    }
                ]
            }
        ],
        "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0))).",
        "in_tiling": {
            "[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"
        },
        "out_tiling": {
            "[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"
        },
        "tilings": [
            {
                "[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"
            }
        ]
    }
}
