0213_0231_0312_0321_1302_1320_2031_2301_3120
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Tue, 19 Sep 2017 12:22:53

Looking for proof tree for Basis((Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 7.387314081192017 seconds
Number of tilings expanded by Set 1 is 72
Number of tilings expanded by Set 2 is 21
Total number of tilings is 256
Total number of expandable tilings is 220
Total number of verified tilings is 92
Total number of strategy verified tilings is 30
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.08134603500366211 seconds, ~1%
Time spent strategy verifying: 0.1674652099609375 seconds, ~2%
Time spent inferring: 1.5081677436828613 seconds, ~20%
Time spent expanding Set 1: 4.924642086029053 seconds, ~66%
Time spent expanding Set 2: 0.039452314376831055 seconds, ~0%
Time spent queueing: 0.018378734588623047 seconds, ~0%
Time spent prepping for tree search: 0.041420698165893555 seconds, ~0%
Time spent searching for tree: 0.10626959800720215 seconds, ~1%
Total of ~90% accounted for.

Proof tree found Tue, 19 Sep 2017 12:23:01

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |4| |5|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point
4: Av(Perm((0, 1)), Perm((1, 0)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))

Label: 5

+-+-+-+-+-+
| | |3| |4|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))

Label: 6

+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))

Label: 7

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))

Label: 8

+-+-+-+-+
| | | |4|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | | |4|
+-+-+-+-+
| |3| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)))", "[0, 1]": "point"}, "relation": "", "identifier": 7, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[2, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[0, 2]": "point", "[3, 3]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | Reverse of: Inserting the top most point in to the cell Cell(i=1, j=2). | Inserting the bottom most point in to the cell Cell(i=1, j=2). | ", "identifier": 9, "children": [{"formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=0)]", "in_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "relation": "", "identifier": 238, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "point", "[2, 1]": "point", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "relation": "| Reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=1). | ", "identifier": 121, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "relation": "", "identifier": 255, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=1, j=2): Cell(i=2, j=3), Cell(i=2, j=1): Cell(i=3, j=2), Cell(i=3, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[2, 3]": "point", "[3, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[1, 3]": "Av+(Perm((1, 0)))", "[3, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=0). | Reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=3). | ", "identifier": 43, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 7.387314081192017 seconds

