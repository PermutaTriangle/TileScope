021_0123_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 17:59:39

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.05794906616211 seconds
Number of tilings expanded by Set 1 is 245
Number of tilings expanded by Set 2 is 223
Total number of tilings is 1778
Total number of expandable tilings is 1599
Total number of verified tilings is 179
Total number of strategy verified tilings is 71
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 1.7752728462219238 seconds, ~5%
Time spent strategy verifying: 0.2726774215698242 seconds, ~0%
Time spent inferring: 11.175586223602295 seconds, ~37%
Time spent expanding Set 1: 6.044210195541382 seconds, ~20%
Time spent expanding Set 2: 0.6174867153167725 seconds, ~2%
Time spent queueing: 0.679973840713501 seconds, ~2%
Time spent prepping for tree search: 1.411755084991455 seconds, ~4%
Time spent searching for tree: 1.7674400806427002 seconds, ~5%
Total of ~75% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:00:09

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.000439882278442 seconds
Number of tilings expanded by Set 1 is 245
Number of tilings expanded by Set 2 is 227
Total number of tilings is 1796
Total number of expandable tilings is 1617
Total number of verified tilings is 182
Total number of strategy verified tilings is 72
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 1.7825825214385986 seconds, ~5%
Time spent strategy verifying: 0.2770206928253174 seconds, ~0%
Time spent inferring: 10.93515133857727 seconds, ~36%
Time spent expanding Set 1: 6.023083925247192 seconds, ~20%
Time spent expanding Set 2: 0.6198673248291016 seconds, ~2%
Time spent queueing: 0.7054133415222168 seconds, ~2%
Time spent prepping for tree search: 1.5031154155731201 seconds, ~5%
Time spent searching for tree: 1.8583853244781494 seconds, ~6%
Total of ~76% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:00:39

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.721456289291382 seconds
Number of tilings expanded by Set 1 is 238
Number of tilings expanded by Set 2 is 190
Total number of tilings is 1582
Total number of expandable tilings is 1502
Total number of verified tilings is 142
Total number of strategy verified tilings is 43
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 7.417905330657959 seconds, ~24%
Time spent strategy verifying: 0.1329345703125 seconds, ~0%
Time spent inferring: 16.565117597579956 seconds, ~53%
Time spent expanding Set 1: 7.2967002391815186 seconds, ~23%
Time spent expanding Set 2: 0.34137892723083496 seconds, ~1%
Time spent queueing: 0.23729372024536133 seconds, ~0%
Time spent prepping for tree search: 0.9510982036590576 seconds, ~3%
Time spent searching for tree: 0.904266357421875 seconds, ~2%
Total of ~106% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:01:10

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.003293752670288 seconds
Number of tilings expanded by Set 1 is 311
Number of tilings expanded by Set 2 is 190
Total number of tilings is 1606
Total number of expandable tilings is 1502
Total number of verified tilings is 142
Total number of strategy verified tilings is 43
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 7.240874528884888 seconds, ~24%
Time spent strategy verifying: 0.13287830352783203 seconds, ~0%
Time spent inferring: 16.557469129562378 seconds, ~55%
Time spent expanding Set 1: 5.855144023895264 seconds, ~19%
Time spent expanding Set 2: 0.34734630584716797 seconds, ~1%
Time spent queueing: 0.254148006439209 seconds, ~0%
Time spent prepping for tree search: 1.3368396759033203 seconds, ~4%
Time spent searching for tree: 1.2367844581604004 seconds, ~4%
Total of ~107% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:01:40

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.011312246322632 seconds
Number of tilings expanded by Set 1 is 194
Number of tilings expanded by Set 2 is 133
Total number of tilings is 1384
Total number of expandable tilings is 1318
Total number of verified tilings is 175
Total number of strategy verified tilings is 61
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 4.823188304901123 seconds, ~16%
Time spent strategy verifying: 0.11259627342224121 seconds, ~0%
Time spent inferring: 13.454984426498413 seconds, ~44%
Time spent expanding Set 1: 10.812663555145264 seconds, ~36%
Time spent expanding Set 2: 0.2352759838104248 seconds, ~0%
Time spent queueing: 0.24131035804748535 seconds, ~0%
Time spent prepping for tree search: 0.6506586074829102 seconds, ~2%
Time spent searching for tree: 1.044677972793579 seconds, ~3%
Total of ~101% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:02:10

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.029934883117676 seconds
Number of tilings expanded by Set 1 is 199
Number of tilings expanded by Set 2 is 181
Total number of tilings is 1775
Total number of expandable tilings is 1709
Total number of verified tilings is 208
Total number of strategy verified tilings is 71
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 11.75439167022705 seconds, ~39%
Time spent strategy verifying: 0.19701671600341797 seconds, ~0%
Time spent inferring: 18.846047163009644 seconds, ~62%
Time spent expanding Set 1: 2.826417922973633 seconds, ~9%
Time spent expanding Set 2: 0.33225321769714355 seconds, ~1%
Time spent queueing: 0.2302083969116211 seconds, ~0%
Time spent prepping for tree search: 0.8690841197967529 seconds, ~2%
Time spent searching for tree: 1.327840805053711 seconds, ~4%
Total of ~117% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:02:40

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 13.23093056678772 seconds
Number of tilings expanded by Set 1 is 164
Number of tilings expanded by Set 2 is 117
Total number of tilings is 901
Total number of expandable tilings is 590
Total number of verified tilings is 341
Total number of strategy verified tilings is 100
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.4105973243713379 seconds, ~3%
Time spent strategy verifying: 0.25217223167419434 seconds, ~1%
Time spent inferring: 4.232929229736328 seconds, ~31%
Time spent expanding Set 1: 2.8830924034118652 seconds, ~21%
Time spent expanding Set 2: 0.25226664543151855 seconds, ~1%
Time spent queueing: 0.7719886302947998 seconds, ~5%
Time spent prepping for tree search: 0.5926973819732666 seconds, ~4%
Time spent searching for tree: 1.6522181034088135 seconds, ~12%
Total of ~78% accounted for.

Proof tree found Mon, 18 Sep 2017 18:02:53

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     │           ├─────9
                  │     │           └─────10
                  │     └─────11
                  └─────12

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((3, 2, 1, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))
3: point

Label: 5

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
4: point

Label: 6

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2, 3)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))
3: point
4: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 7

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2, 3)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))
2: point

Label: 8

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2, 3)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))
3: point
4: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 9

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))
2: point

Label: 10

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))
2: point

Label: 11

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: point

Label: 12

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((3, 2, 1, 0)))", "[1, 2]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 12, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0))).", "in_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 14, "children": [{"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[4, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[3, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | ", "identifier": 30, "children": [{"formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[3, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[5, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[4, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 4]": "point", "[2, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=3, j=0). | ", "identifier": 81, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[2, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[3, 2]": "point", "[0, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=2, j=0). | ", "identifier": 257, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[5, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[4, 2]": "point", "[0, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[4, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[2, 3]": "point", "[3, 4]": "point"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=3, j=0). | Inserting the top most point in to the cell Cell(i=0, j=1). | ", "identifier": 243, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point", "[3, 4]": "point"}, "relation": "", "identifier": 311, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[0, 1]": "point", "[1, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[0, 1]": "point", "[1, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 460, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point", "[3, 4]": "point"}, "relation": "", "identifier": 83, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)))", "[0, 1]": "point"}, "relation": "", "identifier": 145, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 13.23093056678772 seconds

