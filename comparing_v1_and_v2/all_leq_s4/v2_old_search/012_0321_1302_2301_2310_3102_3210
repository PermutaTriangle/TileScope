012_0321_1302_2301_2310_3102_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 16:43:15

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 2.0754058361053467 seconds
Number of tilings expanded by Set 1 is 100
Number of tilings expanded by Set 2 is 30
Total number of tilings is 227
Total number of expandable tilings is 194
Total number of verified tilings is 75
Total number of strategy verified tilings is 37
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.041823625564575195 seconds, ~2%
Time spent strategy verifying: 0.035600900650024414 seconds, ~1%
Time spent inferring: 0.5596275329589844 seconds, ~26%
Time spent expanding Set 1: 0.9119293689727783 seconds, ~43%
Time spent expanding Set 2: 0.03650164604187012 seconds, ~1%
Time spent queueing: 0.024979352951049805 seconds, ~1%
Time spent prepping for tree search: 0.0523374080657959 seconds, ~2%
Time spent searching for tree: 0.17159700393676758 seconds, ~8%
Total of ~84% accounted for.

Proof tree found Mon, 18 Sep 2017 16:43:17

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
|1| | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 5

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 6

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 7

+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point

Label: 8

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "relation": "", "identifier": 19, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point", "[4, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "| Inserting the right most point in to the cell Cell(i=2, j=1). | Reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 21, "children": [{"formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[3, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=2). | ", "identifier": 104, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[3, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[3, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 223, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[2, 2]": "point", "[0, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[2, 2]": "point", "[0, 3]": "point"}, "relation": "", "identifier": 224, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 193, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 2.0754058361053467 seconds

