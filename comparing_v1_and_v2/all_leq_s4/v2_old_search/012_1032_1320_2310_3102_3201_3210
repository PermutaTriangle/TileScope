012_1032_1320_2310_3102_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 16:55:26

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 3.415755033493042 seconds
Number of tilings expanded by Set 1 is 164
Number of tilings expanded by Set 2 is 62
Total number of tilings is 353
Total number of expandable tilings is 264
Total number of verified tilings is 79
Total number of strategy verified tilings is 41
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.053244829177856445 seconds, ~1%
Time spent strategy verifying: 0.022022724151611328 seconds, ~0%
Time spent inferring: 0.8548758029937744 seconds, ~25%
Time spent expanding Set 1: 1.3127305507659912 seconds, ~38%
Time spent expanding Set 2: 0.06782031059265137 seconds, ~1%
Time spent queueing: 0.05318474769592285 seconds, ~1%
Time spent prepping for tree search: 0.15657711029052734 seconds, ~4%
Time spent searching for tree: 0.42757558822631836 seconds, ~12%
Total of ~82% accounted for.

Proof tree found Mon, 18 Sep 2017 16:55:29

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| |1|
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 5

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 6

+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 7

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 8

+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 9

+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 10

+-+-+-+
| |1| |
+-+-+-+
|1| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 15, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=1). | Reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | Inserting the top most point in to the cell Cell(i=1, j=0). | ", "identifier": 17, "children": [{"formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 273, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 346, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[0, 1]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[0, 1]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "relation": "", "identifier": 347, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (1, 3); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "point", "[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "point", "[1, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "point", "[1, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 274, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "point"}, "relation": "", "identifier": 349, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[2, 1]": "point", "[0, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[2, 1]": "point", "[0, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 350, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 3.415755033493042 seconds

