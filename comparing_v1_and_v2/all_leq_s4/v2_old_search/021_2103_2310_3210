021_2103_2310_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:05:46

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.6055643558502197 seconds
Number of tilings expanded by Set 1 is 23
Number of tilings expanded by Set 2 is 6
Total number of tilings is 63
Total number of expandable tilings is 51
Total number of verified tilings is 41
Total number of strategy verified tilings is 10
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.05120491981506348 seconds, ~8%
Time spent strategy verifying: 0.010899543762207031 seconds, ~1%
Time spent inferring: 0.2149341106414795 seconds, ~35%
Time spent expanding Set 1: 0.25940942764282227 seconds, ~42%
Time spent expanding Set 2: 0.004230976104736328 seconds, ~0%
Time spent queueing: 0.001138448715209961 seconds, ~0%
Time spent prepping for tree search: 0.0026297569274902344 seconds, ~0%
Time spent searching for tree: 0.010949850082397461 seconds, ~1%
Total of ~87% accounted for.

Proof tree found Mon, 18 Sep 2017 18:05:47

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0)))
2: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((1, 0)))
2: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 9, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((1, 0)))", "[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((1, 0)))", "[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 11, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 45, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((1, 0)))", "[0, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((1, 0)))", "[0, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 49, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.6055643558502197 seconds

