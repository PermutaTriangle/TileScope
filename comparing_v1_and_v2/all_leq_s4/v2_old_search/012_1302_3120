012_1302_3120
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:57:02

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 4.8219382762908936 seconds
Number of tilings expanded by Set 1 is 72
Number of tilings expanded by Set 2 is 20
Total number of tilings is 283
Total number of expandable tilings is 171
Total number of verified tilings is 82
Total number of strategy verified tilings is 39
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.04982614517211914 seconds, ~1%
Time spent strategy verifying: 0.08981823921203613 seconds, ~1%
Time spent inferring: 1.194814682006836 seconds, ~24%
Time spent expanding Set 1: 2.5612170696258545 seconds, ~53%
Time spent expanding Set 2: 0.031789302825927734 seconds, ~0%
Time spent queueing: 0.015390872955322266 seconds, ~0%
Time spent prepping for tree search: 0.048796892166137695 seconds, ~1%
Time spent searching for tree: 0.13038325309753418 seconds, ~2%
Total of ~82% accounted for.

Proof tree found Mon, 18 Sep 2017 14:57:07

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|1| | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 5

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|1| | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 6

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 7

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))

Label: 8

+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|1| |1| | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 9

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))

Label: 10

+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "relation": "", "identifier": 11, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[0, 2]": "Av(Perm((0, 1)))", "[3, 2]": "Av(Perm((0, 1)))", "[2, 3]": "point"}, "relation": "| Inserting the right most point in to the cell Cell(i=2, j=0). | ", "identifier": 13, "children": [{"formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=0)]", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[0, 2]": "Av(Perm((0, 1)))", "[3, 2]": "Av(Perm((0, 1)))", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[0, 2]": "Av(Perm((0, 1)))", "[3, 2]": "Av(Perm((0, 1)))", "[2, 3]": "point"}, "relation": "", "identifier": 154, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "relation": "", "identifier": 18, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[1, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=0, j=1). | ", "identifier": 37, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=2): Cell(i=2, j=3), Cell(i=2, j=1): Cell(i=3, j=2), Cell(i=3, j=0): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "strategy_verified": false}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=3, j=1), Cell(i=4, j=0), Cell(i=5, j=3)]", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[0, 2]": "Av(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[6, 2]": "point", "[5, 3]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1)))", "[2, 4]": "Av(Perm((0, 1)))", "[1, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | ", "identifier": 156, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[1, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=0, j=1). | ", "identifier": 37, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[0, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[0, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))"}, "relation": "", "identifier": 244, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=4), Cell(i=1, j=2): Cell(i=1, j=5), Cell(i=2, j=1): Cell(i=2, j=4), Cell(i=3, j=0): Cell(i=6, j=2)}, {Cell(i=0, j=1): Cell(i=3, j=1), Cell(i=1, j=0): Cell(i=4, j=0), Cell(i=2, j=2): Cell(i=5, j=3)}]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 4.8219382762908936 seconds

