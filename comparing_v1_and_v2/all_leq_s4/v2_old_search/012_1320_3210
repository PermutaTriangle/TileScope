012_1320_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:00:44

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.045731782913208 seconds
Number of tilings expanded by Set 1 is 396
Number of tilings expanded by Set 2 is 220
Total number of tilings is 1806
Total number of expandable tilings is 1306
Total number of verified tilings is 250
Total number of strategy verified tilings is 79
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.5998144149780273 seconds, ~1%
Time spent strategy verifying: 0.11807131767272949 seconds, ~0%
Time spent inferring: 7.140847444534302 seconds, ~23%
Time spent expanding Set 1: 8.25620174407959 seconds, ~27%
Time spent expanding Set 2: 0.469097375869751 seconds, ~1%
Time spent queueing: 1.1589927673339844 seconds, ~3%
Time spent prepping for tree search: 2.859926223754883 seconds, ~9%
Time spent searching for tree: 4.121415376663208 seconds, ~13%
Total of ~77% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:01:14

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.00447988510132 seconds
Number of tilings expanded by Set 1 is 385
Number of tilings expanded by Set 2 is 219
Total number of tilings is 1789
Total number of expandable tilings is 1302
Total number of verified tilings is 250
Total number of strategy verified tilings is 79
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.6076502799987793 seconds, ~2%
Time spent strategy verifying: 0.11977958679199219 seconds, ~0%
Time spent inferring: 6.964836359024048 seconds, ~23%
Time spent expanding Set 1: 7.581493139266968 seconds, ~25%
Time spent expanding Set 2: 0.4630122184753418 seconds, ~1%
Time spent queueing: 1.278296709060669 seconds, ~4%
Time spent prepping for tree search: 3.077820062637329 seconds, ~10%
Time spent searching for tree: 4.154036521911621 seconds, ~13%
Total of ~78% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:01:45

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.038880109786987 seconds
Number of tilings expanded by Set 1 is 316
Number of tilings expanded by Set 2 is 159
Total number of tilings is 1033
Total number of expandable tilings is 960
Total number of verified tilings is 94
Total number of strategy verified tilings is 34
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.7658901214599609 seconds, ~2%
Time spent strategy verifying: 0.044649362564086914 seconds, ~0%
Time spent inferring: 12.656399250030518 seconds, ~42%
Time spent expanding Set 1: 12.991776466369629 seconds, ~43%
Time spent expanding Set 2: 0.23635601997375488 seconds, ~0%
Time spent queueing: 0.22338104248046875 seconds, ~0%
Time spent prepping for tree search: 0.8255565166473389 seconds, ~2%
Time spent searching for tree: 0.9796388149261475 seconds, ~3%
Total of ~92% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:02:15

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.00049591064453 seconds
Number of tilings expanded by Set 1 is 332
Number of tilings expanded by Set 2 is 268
Total number of tilings is 1716
Total number of expandable tilings is 1637
Total number of verified tilings is 124
Total number of strategy verified tilings is 43
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 1.1001183986663818 seconds, ~3%
Time spent strategy verifying: 0.07229185104370117 seconds, ~0%
Time spent inferring: 16.65550661087036 seconds, ~55%
Time spent expanding Set 1: 5.362547874450684 seconds, ~17%
Time spent expanding Set 2: 0.44700145721435547 seconds, ~1%
Time spent queueing: 0.48871922492980957 seconds, ~1%
Time spent prepping for tree search: 1.3526241779327393 seconds, ~4%
Time spent searching for tree: 1.5721259117126465 seconds, ~5%
Total of ~86% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:02:45

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.12015652656555 seconds
Number of tilings expanded by Set 1 is 244
Number of tilings expanded by Set 2 is 135
Total number of tilings is 1110
Total number of expandable tilings is 1057
Total number of verified tilings is 166
Total number of strategy verified tilings is 58
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.043653964996338 seconds, ~3%
Time spent strategy verifying: 0.07066845893859863 seconds, ~0%
Time spent inferring: 14.627922534942627 seconds, ~48%
Time spent expanding Set 1: 10.811880111694336 seconds, ~35%
Time spent expanding Set 2: 0.20479345321655273 seconds, ~0%
Time spent queueing: 0.26134395599365234 seconds, ~0%
Time spent prepping for tree search: 0.7213490009307861 seconds, ~2%
Time spent searching for tree: 1.320146083831787 seconds, ~4%
Total of ~92% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:03:15

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.51527762413025 seconds
Number of tilings expanded by Set 1 is 341
Number of tilings expanded by Set 2 is 173
Total number of tilings is 1432
Total number of expandable tilings is 1341
Total number of verified tilings is 174
Total number of strategy verified tilings is 60
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.4888637065887451 seconds, ~4%
Time spent strategy verifying: 0.07570815086364746 seconds, ~0%
Time spent inferring: 18.501290798187256 seconds, ~60%
Time spent expanding Set 1: 4.747885465621948 seconds, ~15%
Time spent expanding Set 2: 0.29598546028137207 seconds, ~0%
Time spent queueing: 0.3719971179962158 seconds, ~1%
Time spent prepping for tree search: 1.2545812129974365 seconds, ~4%
Time spent searching for tree: 2.1701316833496094 seconds, ~7%
Total of ~91% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:03:46

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 3.786656618118286 seconds
Number of tilings expanded by Set 1 is 88
Number of tilings expanded by Set 2 is 52
Total number of tilings is 380
Total number of expandable tilings is 217
Total number of verified tilings is 176
Total number of strategy verified tilings is 59
Total number of empty tilings is 2
There were 0 cache misses

Time spent equivalent expanding: 0.05091571807861328 seconds, ~1%
Time spent strategy verifying: 0.04993891716003418 seconds, ~1%
Time spent inferring: 0.7504093647003174 seconds, ~19%
Time spent expanding Set 1: 0.9199910163879395 seconds, ~24%
Time spent expanding Set 2: 0.056722164154052734 seconds, ~1%
Time spent queueing: 0.7464795112609863 seconds, ~19%
Time spent prepping for tree search: 0.15067291259765625 seconds, ~3%
Time spent searching for tree: 0.4904801845550537 seconds, ~12%
Total of ~80% accounted for.

Proof tree found Mon, 18 Sep 2017 15:03:49

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        │                 ├─────14
                        │                 └─────15
                        └─────16
                              ├─────17
                              └─────18
                                    ├─────19
                                    └─────20
                                          ├─────21
                                          └─────22

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 7

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 8

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
2: point

Label: 9

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point

Label: 10

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 11

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point

Label: 12

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 13

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 14

+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 15

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 16

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: point

Label: 17

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 18

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 19

+-+
|1|
+-+
1: Av(Perm((0, 1)), Perm((1, 0)))

Label: 20

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 21

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 22

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 9, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 10, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 19, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 18, "children": [{"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 26, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 80, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 79, "children": [{"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point", "[0, 4]": "point", "[3, 5]": "point"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=1). | ", "identifier": 263, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[1, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[1, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "relation": "", "identifier": 369, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 372, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[6, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 4]": "point", "[0, 5]": "point", "[3, 6]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=1, j=1). | ", "identifier": 265, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "relation": "", "identifier": 375, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[3, 5]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[3, 5]": "point"}, "relation": "", "identifier": 376, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[4, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[4, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 28, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 84, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=4, j=2)]", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 86, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 44, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[4, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[5, 4]": "point", "[2, 5]": "point"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=0). | Inserting the top most point in to the cell Cell(i=0, j=2). | ", "identifier": 133, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 356, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[0, 2]": "point", "[4, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[0, 2]": "point", "[4, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 357, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=3): Cell(i=1, j=4), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=2): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=4, j=2)}]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 3.786656618118286 seconds

