012_0321_1032_2103_3120
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:37:42

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 22.561591863632202 seconds
Number of tilings expanded by Set 1 is 262
Number of tilings expanded by Set 2 is 186
Total number of tilings is 1338
Total number of expandable tilings is 1165
Total number of verified tilings is 260
Total number of strategy verified tilings is 89
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.5281887054443359 seconds, ~2%
Time spent strategy verifying: 0.13133597373962402 seconds, ~0%
Time spent inferring: 6.5532004833221436 seconds, ~29%
Time spent expanding Set 1: 7.277501344680786 seconds, ~32%
Time spent expanding Set 2: 0.3947913646697998 seconds, ~1%
Time spent queueing: 0.4486398696899414 seconds, ~1%
Time spent prepping for tree search: 1.0381238460540771 seconds, ~4%
Time spent searching for tree: 2.5796384811401367 seconds, ~11%
Total of ~80% accounted for.

Proof tree found Mon, 18 Sep 2017 15:38:04

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     └─────9
                  │           ├─────10
                  │           └─────11
                  └─────12
                        ├─────13
                        └─────14
                              ├─────15
                              │     ├─────16
                              │     └─────17
                              └─────18

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|4| | | | |4|
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
4: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 5

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
4: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 6

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 7

+-+-+-+
| |1| |
+-+-+-+
| | |1|
+-+-+-+
|1| | |
+-+-+-+
1: point

Label: 8

+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 9

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 10

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 11

+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point

Label: 12

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|4| | | | |5|
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
4: Av+(Perm((0, 1)), Perm((2, 1, 0)))
5: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 13

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point

Label: 14

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|3| | | |4|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
2: point
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
4: Av(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
2: point
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 15

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 16

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 17

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point

Label: 18

+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
2: point
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 11, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[5, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 4]": "point"}, "relation": "| Inserting the left most point in to the cell Cell(i=2, j=0). | ", "identifier": 13, "children": [{"formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 4]": "point"}, "relation": "", "identifier": 87, "children": [{"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point"}, "relation": "", "identifier": 628, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "point", "[2, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[2, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 554, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point"}, "relation": "", "identifier": 1294, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (4, 3); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point"}, "relation": "", "identifier": 682, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 1091, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[3, 2]": "point", "[0, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[3, 2]": "point", "[0, 3]": "point"}, "relation": "", "identifier": 1090, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[4, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[5, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 4]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[5, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 4]": "point"}, "relation": "", "identifier": 89, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 422, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (5, 4); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[2, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[3, 1]": "point", "[6, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[5, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 6]": "point"}, "relation": "| Inserting the right most point in to the cell Cell(i=0, j=2). | ", "identifier": 723, "children": [{"formal_step": "We perform cell insertion into cell (5, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[4, 3]": "point", "[0, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 5]": "point"}, "out_tiling": {"[3, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[4, 3]": "point", "[0, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 5]": "point"}, "relation": "", "identifier": 336, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[4, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[4, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "relation": "", "identifier": 435, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 1337, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[3, 1]": "point", "[5, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[0, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 5]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "relation": "| Reverse of: Inserting the left most point in to the cell Cell(i=3, j=0). | ", "identifier": 563, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 22.561591863632202 seconds

