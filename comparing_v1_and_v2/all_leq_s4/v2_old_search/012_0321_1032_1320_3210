012_0321_1032_1320_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:37:02

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 20.830264568328857 seconds
Number of tilings expanded by Set 1 is 327
Number of tilings expanded by Set 2 is 216
Total number of tilings is 1328
Total number of expandable tilings is 925
Total number of verified tilings is 287
Total number of strategy verified tilings is 131
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.25516510009765625 seconds, ~1%
Time spent strategy verifying: 0.19361305236816406 seconds, ~0%
Time spent inferring: 4.2946319580078125 seconds, ~20%
Time spent expanding Set 1: 5.9489569664001465 seconds, ~28%
Time spent expanding Set 2: 0.36448168754577637 seconds, ~1%
Time spent queueing: 0.6429047584533691 seconds, ~3%
Time spent prepping for tree search: 1.6200990676879883 seconds, ~7%
Time spent searching for tree: 4.679818630218506 seconds, ~22%
Total of ~82% accounted for.

Proof tree found Mon, 18 Sep 2017 15:37:23

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     └─────9
                  └─────10
                        ├─────11
                        │     ├─────12
                        │     └─────13
                        └─────14
                              ├─────15
                              └─────16

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
4: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 5

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |4| |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
4: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 6

+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 7

+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 8

+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 9

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 10

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|5| | | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
4: Av(Perm((1, 0)), Perm((0, 1, 2)))
5: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 11

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 12

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 13

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point

Label: 14

+-+-+-+-+
| |2| | |
+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
4: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 15

+-+-+-+-+
| |2| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
2: point

Label: 16

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 11, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 4); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 1]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[3, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 4]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 5]": "point"}, "relation": "| Inserting the right most point in to the cell Cell(i=2, j=0). | ", "identifier": 13, "children": [{"formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[2, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[2, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 4]": "point"}, "relation": "", "identifier": 103, "children": [{"formal_step": "We perform cell insertion into cell (3, 4); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "point", "[1, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[2, 3]": "point", "[3, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 5]": "point"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=2). | ", "identifier": 144, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[2, 3]": "point", "[0, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[2, 3]": "point", "[0, 4]": "point"}, "relation": "", "identifier": 1278, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "point", "[1, 2]": "point", "[2, 3]": "point", "[0, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "point", "[1, 2]": "point", "[2, 3]": "point", "[0, 4]": "point"}, "relation": "", "identifier": 1287, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 671, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[3, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 4]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 5]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[3, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 4]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 5]": "point"}, "relation": "", "identifier": 105, "children": [{"formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[4, 2]": "point", "[0, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 4]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[5, 2]": "point", "[1, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 4]": "point", "[3, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=3). | ", "identifier": 287, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[3, 4]": "point"}, "relation": "", "identifier": 243, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[4, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[4, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 1043, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (1, 3); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[2, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point", "[3, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 4]": "point", "[2, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=3). | ", "identifier": 408, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[2, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "| Reverse of: Inserting the right most point in to the cell Cell(i=2, j=0). | ", "identifier": 438, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "point", "[1, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "point", "[1, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 1326, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 20.830264568328857 seconds

