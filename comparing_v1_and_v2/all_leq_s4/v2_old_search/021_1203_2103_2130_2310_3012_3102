021_1203_2103_2130_2310_3012_3102
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:44:13

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.7856099605560303 seconds
Number of tilings expanded by Set 1 is 27
Number of tilings expanded by Set 2 is 9
Total number of tilings is 79
Total number of expandable tilings is 74
Total number of verified tilings is 36
Total number of strategy verified tilings is 13
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.028061628341674805 seconds, ~3%
Time spent strategy verifying: 0.02413630485534668 seconds, ~3%
Time spent inferring: 0.25762343406677246 seconds, ~32%
Time spent expanding Set 1: 0.39293456077575684 seconds, ~50%
Time spent expanding Set 2: 0.010306358337402344 seconds, ~1%
Time spent queueing: 0.0013048648834228516 seconds, ~0%
Time spent prepping for tree search: 0.003676891326904297 seconds, ~0%
Time spent searching for tree: 0.014575481414794922 seconds, ~1%
Total of ~90% accounted for.

Proof tree found Mon, 18 Sep 2017 18:44:14

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((3, 0, 1, 2)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((3, 0, 1, 2)))
2: point

Label: 4

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)))"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((3, 0, 1, 2)))", "[2, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "relation": "", "identifier": 13, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "relation": "", "identifier": 70, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.7856099605560303 seconds

