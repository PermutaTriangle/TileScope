012_3120
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:38:56

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.091780424118042 seconds
Number of tilings expanded by Set 1 is 172
Number of tilings expanded by Set 2 is 149
Total number of tilings is 1626
Total number of expandable tilings is 1399
Total number of verified tilings is 260
Total number of strategy verified tilings is 107
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.7311594486236572 seconds, ~2%
Time spent strategy verifying: 0.8467044830322266 seconds, ~2%
Time spent inferring: 9.67722773551941 seconds, ~32%
Time spent expanding Set 1: 7.148613214492798 seconds, ~23%
Time spent expanding Set 2: 0.4744453430175781 seconds, ~1%
Time spent queueing: 0.30479955673217773 seconds, ~1%
Time spent prepping for tree search: 0.720557451248169 seconds, ~2%
Time spent searching for tree: 1.5467844009399414 seconds, ~5%
Total of ~68% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:39:26

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.013017892837524 seconds
Number of tilings expanded by Set 1 is 172
Number of tilings expanded by Set 2 is 139
Total number of tilings is 1558
Total number of expandable tilings is 1330
Total number of verified tilings is 242
Total number of strategy verified tilings is 102
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.7359309196472168 seconds, ~2%
Time spent strategy verifying: 0.8093228340148926 seconds, ~2%
Time spent inferring: 9.581428050994873 seconds, ~31%
Time spent expanding Set 1: 7.152763843536377 seconds, ~23%
Time spent expanding Set 2: 0.46003079414367676 seconds, ~1%
Time spent queueing: 0.2927989959716797 seconds, ~0%
Time spent prepping for tree search: 0.8253679275512695 seconds, ~2%
Time spent searching for tree: 1.7007105350494385 seconds, ~5%
Total of ~66% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:39:57

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.36238431930542 seconds
Number of tilings expanded by Set 1 is 222
Number of tilings expanded by Set 2 is 110
Total number of tilings is 959
Total number of expandable tilings is 802
Total number of verified tilings is 112
Total number of strategy verified tilings is 51
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.6818335056304932 seconds, ~2%
Time spent strategy verifying: 0.138275146484375 seconds, ~0%
Time spent inferring: 8.876453399658203 seconds, ~29%
Time spent expanding Set 1: 17.14548349380493 seconds, ~56%
Time spent expanding Set 2: 0.17203903198242188 seconds, ~0%
Time spent queueing: 0.14899015426635742 seconds, ~0%
Time spent prepping for tree search: 0.5102231502532959 seconds, ~1%
Time spent searching for tree: 0.8796515464782715 seconds, ~2%
Total of ~90% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:40:27

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.15807557106018 seconds
Number of tilings expanded by Set 1 is 292
Number of tilings expanded by Set 2 is 162
Total number of tilings is 1408
Total number of expandable tilings is 1211
Total number of verified tilings is 154
Total number of strategy verified tilings is 64
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 1.1127533912658691 seconds, ~3%
Time spent strategy verifying: 0.2301325798034668 seconds, ~0%
Time spent inferring: 13.080707550048828 seconds, ~43%
Time spent expanding Set 1: 9.217872142791748 seconds, ~30%
Time spent expanding Set 2: 0.28005027770996094 seconds, ~0%
Time spent queueing: 0.24939250946044922 seconds, ~0%
Time spent prepping for tree search: 1.0549583435058594 seconds, ~3%
Time spent searching for tree: 1.7026989459991455 seconds, ~5%
Total of ~84% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:40:57

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.25160837173462 seconds
Number of tilings expanded by Set 1 is 194
Number of tilings expanded by Set 2 is 115
Total number of tilings is 1100
Total number of expandable tilings is 987
Total number of verified tilings is 166
Total number of strategy verified tilings is 67
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.0415778160095215 seconds, ~3%
Time spent strategy verifying: 0.10069584846496582 seconds, ~0%
Time spent inferring: 8.674070358276367 seconds, ~28%
Time spent expanding Set 1: 16.346295833587646 seconds, ~54%
Time spent expanding Set 2: 0.17894816398620605 seconds, ~0%
Time spent queueing: 0.2349560260772705 seconds, ~0%
Time spent prepping for tree search: 0.5834169387817383 seconds, ~1%
Time spent searching for tree: 1.1059436798095703 seconds, ~3%
Total of ~89% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:41:28

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.03507137298584 seconds
Number of tilings expanded by Set 1 is 288
Number of tilings expanded by Set 2 is 150
Total number of tilings is 1434
Total number of expandable tilings is 1253
Total number of verified tilings is 200
Total number of strategy verified tilings is 78
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.8300495147705078 seconds, ~6%
Time spent strategy verifying: 0.14578747749328613 seconds, ~0%
Time spent inferring: 12.616908311843872 seconds, ~42%
Time spent expanding Set 1: 8.712971448898315 seconds, ~29%
Time spent expanding Set 2: 0.27054715156555176 seconds, ~0%
Time spent queueing: 0.3447611331939697 seconds, ~1%
Time spent prepping for tree search: 1.2193825244903564 seconds, ~4%
Time spent searching for tree: 2.1983678340911865 seconds, ~7%
Total of ~89% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:41:58

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 11.767952680587769 seconds
Number of tilings expanded by Set 1 is 85
Number of tilings expanded by Set 2 is 76
Total number of tilings is 550
Total number of expandable tilings is 333
Total number of verified tilings is 261
Total number of strategy verified tilings is 94
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.10239911079406738 seconds, ~0%
Time spent strategy verifying: 0.15025687217712402 seconds, ~1%
Time spent inferring: 1.7222139835357666 seconds, ~14%
Time spent expanding Set 1: 4.086585283279419 seconds, ~34%
Time spent expanding Set 2: 0.16596698760986328 seconds, ~1%
Time spent queueing: 0.7135379314422607 seconds, ~6%
Time spent prepping for tree search: 0.27645397186279297 seconds, ~2%
Time spent searching for tree: 1.2774639129638672 seconds, ~10%
Total of ~68% accounted for.

Proof tree found Mon, 18 Sep 2017 14:42:10

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     │           ├─────9
                  │     │           │     ├─────10
                  │     │           │     └─────11
                  │     │           └─────12
                  │     └─────13
                  │           ├─────14
                  │           │     ├─────15
                  │           │     └─────16
                  │           └─────17
                  │                 ├─────18
                  │                 └─────19
                  │                       ├─────20
                  │                       │     ├─────21
                  │                       │     │     ├─────22
                  │                       │     │     └─────23
                  │                       │     │           ├─────24
                  │                       │     │           └─────25
                  │                       │     └─────26
                  │                       │           ├─────27
                  │                       │           └─────28
                  │                       │                 ├─────29
                  │                       │                 └─────30
                  │                       │                       ├─────31
                  │                       │                       └─────32
                  │                       │                             ├─────33
                  │                       │                             └─────34
                  │                       │                                   ├─────35
                  │                       │                                   └─────36
                  │                       └─────37
                  └─────38

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: point

Label: 5

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: point

Label: 6

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: point

Label: 7

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point

Label: 8

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: point

Label: 9

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: point

Label: 10

+-+
|1|
+-+
1: point

Label: 11

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: point

Label: 12

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1)))
3: point

Label: 13

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
4: point

Label: 14

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|1| | |2|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: point

Label: 15

+-+
|1|
+-+
1: point

Label: 16

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: point

Label: 17

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|1| | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: point

Label: 18

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point

Label: 19

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|3| | | | |3|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))

Label: 20

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 21

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))

Label: 22

+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 23

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 24

+-+
|1|
+-+
1: point

Label: 25

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 26

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))

Label: 27

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 28

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 29

+-+
|1|
+-+
1: point

Label: 30

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 31

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))

Label: 32

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))

Label: 33

+-+
|1|
+-+
1: point

Label: 34

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))

Label: 35

+-+-+-+
| |1| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 36

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 37

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 38

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((3, 1, 2, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 1, 2, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 8, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 9, "children": [{"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 21, "children": [{"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 30, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 63, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 62, "children": [{"formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=2)]", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[4, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point", "[0, 2]": "point", "[3, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[4, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point", "[0, 2]": "point", "[3, 3]": "point"}, "relation": "", "identifier": 144, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "relation": "", "identifier": 6, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "recurse", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 30, "children": [], "recurse": "[]", "strategy_verified": false}], "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=0): Cell(i=4, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=2)}]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)))", "[1, 1]": "Av+(Perm((0, 1)))", "[5, 2]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)))", "[1, 1]": "Av+(Perm((0, 1)))", "[5, 2]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "relation": "", "identifier": 146, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[0, 1]": "Av+(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[0, 1]": "Av+(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 31, "children": [{"formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=2)]", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 65, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "relation": "", "identifier": 6, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "recurse", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 9, "children": [], "recurse": "[]", "strategy_verified": false}], "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=1): Cell(i=2, j=1), Cell(i=2, j=0): Cell(i=3, j=0)}, {Cell(i=0, j=0): Cell(i=1, j=2)}]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1)))", "[0, 1]": "Av+(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1)))", "[0, 1]": "Av+(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 67, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1)))", "[0, 1]": "Av+(Perm((0, 1)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1)))", "[0, 1]": "Av+(Perm((0, 1)))", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 154, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=4), Cell(i=3, j=0)]", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1)))", "[0, 1]": "Av+(Perm((0, 1)))", "[4, 1]": "Av+(Perm((0, 1)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)))", "[5, 2]": "Av+(Perm((0, 1)))", "[4, 3]": "point", "[1, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | ", "identifier": 162, "children": [{"formal_step": "Placing the minimum point into row 1", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[3, 1]": "Av+(Perm((0, 1)))", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[3, 1]": "Av+(Perm((0, 1)))", "[2, 2]": "point"}, "relation": "", "identifier": 54, "children": [{"formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[0, 2]": "Av(Perm((0, 1)))", "[4, 2]": "Av+(Perm((0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[0, 2]": "Av(Perm((0, 1)))", "[4, 2]": "Av+(Perm((0, 1)))", "[3, 3]": "point"}, "relation": "", "identifier": 133, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "point", "[3, 2]": "Av+(Perm((0, 1)))", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "point", "[3, 2]": "Av+(Perm((0, 1)))", "[2, 3]": "point"}, "relation": "", "identifier": 373, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=1)]", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)))", "[4, 2]": "Av+(Perm((0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)))", "[4, 2]": "Av+(Perm((0, 1)))", "[3, 3]": "point"}, "relation": "", "identifier": 372, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "relation": "", "identifier": 6, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "recurse", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[3, 1]": "Av+(Perm((0, 1)))", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[3, 1]": "Av+(Perm((0, 1)))", "[2, 2]": "point"}, "relation": "", "identifier": 54, "children": [], "recurse": "[]", "strategy_verified": false}], "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)))", "[3, 2]": "Av(Perm((0, 1)))", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)))", "[3, 2]": "Av(Perm((0, 1)))", "[2, 3]": "point"}, "relation": "", "identifier": 134, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)))", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)))", "[2, 3]": "point"}, "relation": "", "identifier": 377, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=0)]", "in_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)))", "[3, 2]": "Av+(Perm((0, 1)))", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)))", "[3, 2]": "Av+(Perm((0, 1)))", "[2, 3]": "point"}, "relation": "", "identifier": 376, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "relation": "", "identifier": 6, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 1", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[2, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[2, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point"}, "relation": "", "identifier": 141, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "point", "[3, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1)))", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[4, 0]": "point", "[3, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1)))", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 245, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=3)]", "in_tiling": {"[4, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[3, 1]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[4, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[3, 1]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 244, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "relation": "", "identifier": 6, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[1, 2]": "point"}, "relation": "", "identifier": 59, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point"}, "relation": "", "identifier": 139, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "recurse", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[2, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)))", "[2, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point"}, "relation": "", "identifier": 141, "children": [], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=2): Cell(i=2, j=2), Cell(i=2, j=1): Cell(i=3, j=1), Cell(i=3, j=0): Cell(i=4, j=0)}, {Cell(i=0, j=0): Cell(i=1, j=3)}]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=2): Cell(i=2, j=3), Cell(i=2, j=1): Cell(i=3, j=2), Cell(i=3, j=0): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[0, 1]": "point"}, "relation": "", "identifier": 113, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=2): Cell(i=4, j=3), Cell(i=3, j=1): Cell(i=5, j=2)}, {Cell(i=0, j=1): Cell(i=1, j=4), Cell(i=1, j=0): Cell(i=3, j=0)}]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "point"}, "relation": "", "identifier": 26, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 11.767952680587769 seconds

