012_0321_1302_2310_3021_3120_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 17:18:26

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 2.467649459838867 seconds
Number of tilings expanded by Set 1 is 93
Number of tilings expanded by Set 2 is 34
Total number of tilings is 241
Total number of expandable tilings is 198
Total number of verified tilings is 73
Total number of strategy verified tilings is 25
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.05621147155761719 seconds, ~2%
Time spent strategy verifying: 0.018186092376708984 seconds, ~0%
Time spent inferring: 0.6953275203704834 seconds, ~28%
Time spent expanding Set 1: 1.072831153869629 seconds, ~43%
Time spent expanding Set 2: 0.04690814018249512 seconds, ~1%
Time spent queueing: 0.0227200984954834 seconds, ~0%
Time spent prepping for tree search: 0.06194448471069336 seconds, ~2%
Time spent searching for tree: 0.17271876335144043 seconds, ~6%
Total of ~82% accounted for.

Proof tree found Mon, 18 Sep 2017 17:18:28

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        └─────10
                              ├─────11
                              └─────12

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point
3: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))

Label: 6

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))

Label: 7

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 8

+-+-+-+
|2| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: point

Label: 9

+-+-+-+-+
| |1| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point

Label: 10

+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 11

+-+-+-+
| |2| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 12

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 11, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point", "[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "relation": "| Inserting the right most point in to the cell Cell(i=2, j=0). | Reverse of: Inserting the top most point in to the cell Cell(i=0, j=2). | ", "identifier": 13, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "relation": "", "identifier": 54, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the rightmost point into column 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point", "[0, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point", "[0, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "relation": "", "identifier": 167, "children": [{"formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=3). | Reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=0). | ", "identifier": 91, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "point", "[0, 2]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "point", "[0, 2]": "point"}, "relation": "", "identifier": 156, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[3, 1]": "point", "[0, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[3, 1]": "point", "[0, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 155, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "relation": "", "identifier": 131, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 170, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 185, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 2.467649459838867 seconds

