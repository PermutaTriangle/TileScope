012_1320_2130_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:58:37

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 9.397110223770142 seconds
Number of tilings expanded by Set 1 is 176
Number of tilings expanded by Set 2 is 92
Total number of tilings is 809
Total number of expandable tilings is 528
Total number of verified tilings is 152
Total number of strategy verified tilings is 71
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.18355345726013184 seconds, ~1%
Time spent strategy verifying: 0.1028287410736084 seconds, ~1%
Time spent inferring: 2.6386756896972656 seconds, ~28%
Time spent expanding Set 1: 2.8511250019073486 seconds, ~30%
Time spent expanding Set 2: 0.15900754928588867 seconds, ~1%
Time spent queueing: 0.1284499168395996 seconds, ~1%
Time spent prepping for tree search: 0.5315237045288086 seconds, ~5%
Time spent searching for tree: 1.0108375549316406 seconds, ~10%
Total of ~77% accounted for.

Proof tree found Mon, 18 Sep 2017 15:58:46

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        │     ├─────10
                        │     └─────11
                        └─────12

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |5| | | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
4: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
5: Av(Perm((0, 1)), Perm((1, 0)))

Label: 5

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 6

+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))
2: point

Label: 7

+-+
|1|
+-+
1: Av(Perm((0, 1)), Perm((1, 0)))

Label: 8

+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
4: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 9

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 10

+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 11

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 12

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 21, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (4, 4); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[5, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 3]": "point", "[4, 4]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 5]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=1). | ", "identifier": 23, "children": [{"formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=4)]", "in_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 3]": "point", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 3]": "point", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 46, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 3]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "relation": "| Reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | ", "identifier": 123, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 165, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=2, j=1), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=4)}]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (6, 2); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 3]": "point", "[4, 4]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 5]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[6, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 3]": "point", "[5, 4]": "point", "[4, 5]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 6]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=4). | Reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | Inserting the top most point in to the cell Cell(i=1, j=0). | ", "identifier": 48, "children": [{"formal_step": "We perform cell insertion into cell (1, 5); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "point", "[5, 3]": "point", "[4, 4]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 5]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "point", "[5, 3]": "point", "[4, 4]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 5]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 458, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "point", "[5, 3]": "point", "[4, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 5]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[4, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 3]": "point", "[1, 4]": "point"}, "relation": "| Reverse of: Inserting the bottom most point in to the cell Cell(i=4, j=3). | Inserting the top most point in to the cell Cell(i=4, j=3). | Reverse of: Inserting the top most point in to the cell Cell(i=2, j=0). | ", "identifier": 425, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[0, 2]": "point", "[4, 3]": "point", "[3, 4]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[0, 2]": "point", "[3, 3]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "| Reverse of: Inserting the bottom most point in to the cell Cell(i=3, j=3). | ", "identifier": 794, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[3, 5]": "point"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=1, j=0). | Inserting the bottom most point in to the cell Cell(i=1, j=0). | Inserting the top most point in to the cell Cell(i=4, j=2). | ", "identifier": 418, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 9.397110223770142 seconds

