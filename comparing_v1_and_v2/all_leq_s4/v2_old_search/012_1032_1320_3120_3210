012_1032_1320_3120_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:53:12

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 11.18405032157898 seconds
Number of tilings expanded by Set 1 is 204
Number of tilings expanded by Set 2 is 162
Total number of tilings is 869
Total number of expandable tilings is 718
Total number of verified tilings is 144
Total number of strategy verified tilings is 63
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.19454216957092285 seconds, ~1%
Time spent strategy verifying: 0.06073617935180664 seconds, ~0%
Time spent inferring: 2.9009828567504883 seconds, ~25%
Time spent expanding Set 1: 3.5227229595184326 seconds, ~31%
Time spent expanding Set 2: 0.2634153366088867 seconds, ~2%
Time spent queueing: 0.20877337455749512 seconds, ~1%
Time spent prepping for tree search: 0.6203758716583252 seconds, ~5%
Time spent searching for tree: 1.503730297088623 seconds, ~13%
Total of ~78% accounted for.

Proof tree found Mon, 18 Sep 2017 15:53:23

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10
                              ├─────11
                              └─────12

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 5

+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 6

+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
2: point

Label: 7

+-+
|1|
+-+
1: Av(Perm((0, 1)), Perm((1, 0)))

Label: 8

+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 9

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 10

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 11

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 12

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 17, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (3, 3); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=1). | ", "identifier": 19, "children": [{"formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=3)]", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[1, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[1, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 67, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[0, 1]": "point"}, "relation": "| Reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | ", "identifier": 93, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 148, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=1, j=3)}]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (5, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[3, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[4, 4]": "point", "[1, 5]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[3, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[4, 4]": "point", "[1, 5]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 68, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "point", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "| Reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=0). | ", "identifier": 294, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "point", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[1, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 4]": "point"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=0, j=2). | Inserting the top most point in to the cell Cell(i=3, j=1). | ", "identifier": 343, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point"}, "relation": "", "identifier": 362, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 868, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 11.18405032157898 seconds

