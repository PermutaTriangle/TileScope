021_120_0123_1023_2013_2103_3012_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:55:02

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.08366060256958008 seconds
Number of tilings expanded by Set 1 is 6
Number of tilings expanded by Set 2 is 3
Total number of tilings is 19
Total number of expandable tilings is 19
Total number of verified tilings is 19
Total number of strategy verified tilings is 5
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.008794784545898438 seconds, ~10%
Time spent strategy verifying: 0.0021207332611083984 seconds, ~2%
Time spent inferring: 0.05107474327087402 seconds, ~61%
Time spent expanding Set 1: 0.021352291107177734 seconds, ~25%
Time spent expanding Set 2: 0.0013432502746582031 seconds, ~1%
Time spent queueing: 0.00024175643920898438 seconds, ~0%
Time spent prepping for tree search: 0.000308990478515625 seconds, ~0%
Time spent searching for tree: 0.000946044921875 seconds, ~1%
Total of ~100% accounted for.

Proof tree found Mon, 18 Sep 2017 19:55:02

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
2: point

Label: 4

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 7, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 9, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.08366060256958008 seconds

