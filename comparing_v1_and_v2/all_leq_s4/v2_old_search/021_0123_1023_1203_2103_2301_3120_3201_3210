021_0123_1023_1203_2103_2301_3120_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:13:50

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.9652421474456787 seconds
Number of tilings expanded by Set 1 is 30
Number of tilings expanded by Set 2 is 16
Total number of tilings is 126
Total number of expandable tilings is 118
Total number of verified tilings is 46
Total number of strategy verified tilings is 19
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.07773971557617188 seconds, ~8%
Time spent strategy verifying: 0.01527261734008789 seconds, ~1%
Time spent inferring: 0.4208559989929199 seconds, ~43%
Time spent expanding Set 1: 0.3036074638366699 seconds, ~31%
Time spent expanding Set 2: 0.019466161727905273 seconds, ~2%
Time spent queueing: 0.0019867420196533203 seconds, ~0%
Time spent prepping for tree search: 0.0070879459381103516 seconds, ~0%
Time spent searching for tree: 0.023149967193603516 seconds, ~2%
Total of ~87% accounted for.

Proof tree found Mon, 18 Sep 2017 19:13:51

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|2| | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 5

+-+-+-+-+
|2| | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 6

+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)))", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)))"}, "relation": "", "identifier": 27, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "| Inserting the left most point in to the cell Cell(i=2, j=1). | ", "identifier": 29, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[2, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[2, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 122, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 123, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.9652421474456787 seconds

