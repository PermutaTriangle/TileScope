012_0321_2103_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:17:34

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.03126573562622 seconds
Number of tilings expanded by Set 1 is 369
Number of tilings expanded by Set 2 is 248
Total number of tilings is 1727
Total number of expandable tilings is 1364
Total number of verified tilings is 284
Total number of strategy verified tilings is 150
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.4399254322052002 seconds, ~1%
Time spent strategy verifying: 0.19379878044128418 seconds, ~0%
Time spent inferring: 6.736253976821899 seconds, ~22%
Time spent expanding Set 1: 9.596156358718872 seconds, ~31%
Time spent expanding Set 2: 0.5267949104309082 seconds, ~1%
Time spent queueing: 0.749314546585083 seconds, ~2%
Time spent prepping for tree search: 2.176422119140625 seconds, ~7%
Time spent searching for tree: 5.341991901397705 seconds, ~17%
Total of ~81% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:18:04

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.025395393371582 seconds
Number of tilings expanded by Set 1 is 375
Number of tilings expanded by Set 2 is 265
Total number of tilings is 1803
Total number of expandable tilings is 1429
Total number of verified tilings is 302
Total number of strategy verified tilings is 158
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.425260066986084 seconds, ~1%
Time spent strategy verifying: 0.20595598220825195 seconds, ~0%
Time spent inferring: 6.859022855758667 seconds, ~22%
Time spent expanding Set 1: 7.761931419372559 seconds, ~25%
Time spent expanding Set 2: 0.5388586521148682 seconds, ~1%
Time spent queueing: 0.9261400699615479 seconds, ~3%
Time spent prepping for tree search: 2.608687400817871 seconds, ~8%
Time spent searching for tree: 6.058029890060425 seconds, ~20%
Total of ~80% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:18:34

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.09997034072876 seconds
Number of tilings expanded by Set 1 is 286
Number of tilings expanded by Set 2 is 213
Total number of tilings is 1202
Total number of expandable tilings is 1157
Total number of verified tilings is 108
Total number of strategy verified tilings is 63
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.6831436157226562 seconds, ~2%
Time spent strategy verifying: 0.06009483337402344 seconds, ~0%
Time spent inferring: 12.702442169189453 seconds, ~42%
Time spent expanding Set 1: 11.801018714904785 seconds, ~39%
Time spent expanding Set 2: 0.32155537605285645 seconds, ~1%
Time spent queueing: 0.3316168785095215 seconds, ~1%
Time spent prepping for tree search: 0.7730317115783691 seconds, ~2%
Time spent searching for tree: 1.3504698276519775 seconds, ~4%
Total of ~91% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:19:05

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.116764783859253 seconds
Number of tilings expanded by Set 1 is 293
Number of tilings expanded by Set 2 is 276
Total number of tilings is 1522
Total number of expandable tilings is 1483
Total number of verified tilings is 134
Total number of strategy verified tilings is 74
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.97434401512146 seconds, ~3%
Time spent strategy verifying: 0.08114361763000488 seconds, ~0%
Time spent inferring: 17.835948705673218 seconds, ~59%
Time spent expanding Set 1: 4.381932735443115 seconds, ~14%
Time spent expanding Set 2: 0.4629538059234619 seconds, ~1%
Time spent queueing: 0.5184824466705322 seconds, ~1%
Time spent prepping for tree search: 1.1548213958740234 seconds, ~3%
Time spent searching for tree: 2.0104544162750244 seconds, ~6%
Total of ~87% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:19:35

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.067851781845093 seconds
Number of tilings expanded by Set 1 is 226
Number of tilings expanded by Set 2 is 139
Total number of tilings is 982
Total number of expandable tilings is 959
Total number of verified tilings is 152
Total number of strategy verified tilings is 73
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.0957815647125244 seconds, ~3%
Time spent strategy verifying: 0.0733797550201416 seconds, ~0%
Time spent inferring: 14.507020235061646 seconds, ~48%
Time spent expanding Set 1: 10.801085710525513 seconds, ~35%
Time spent expanding Set 2: 0.21074533462524414 seconds, ~0%
Time spent queueing: 0.23701190948486328 seconds, ~0%
Time spent prepping for tree search: 0.6965334415435791 seconds, ~2%
Time spent searching for tree: 1.4736838340759277 seconds, ~4%
Total of ~92% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:20:05

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.033385515213013 seconds
Number of tilings expanded by Set 1 is 336
Number of tilings expanded by Set 2 is 179
Total number of tilings is 1234
Total number of expandable tilings is 1190
Total number of verified tilings is 160
Total number of strategy verified tilings is 77
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.4034819602966309 seconds, ~4%
Time spent strategy verifying: 0.07977700233459473 seconds, ~0%
Time spent inferring: 17.961273908615112 seconds, ~59%
Time spent expanding Set 1: 4.810986518859863 seconds, ~16%
Time spent expanding Set 2: 0.27136921882629395 seconds, ~0%
Time spent queueing: 0.3925595283508301 seconds, ~1%
Time spent prepping for tree search: 1.2538611888885498 seconds, ~4%
Time spent searching for tree: 2.502758026123047 seconds, ~8%
Total of ~92% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:20:35

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 2.212087392807007 seconds
Number of tilings expanded by Set 1 is 52
Number of tilings expanded by Set 2 is 48
Total number of tilings is 254
Total number of expandable tilings is 178
Total number of verified tilings is 133
Total number of strategy verified tilings is 59
Total number of empty tilings is 2
There were 0 cache misses

Time spent equivalent expanding: 0.0334620475769043 seconds, ~1%
Time spent strategy verifying: 0.053316354751586914 seconds, ~2%
Time spent inferring: 0.5423216819763184 seconds, ~24%
Time spent expanding Set 1: 0.8588442802429199 seconds, ~38%
Time spent expanding Set 2: 0.05606269836425781 seconds, ~2%
Time spent queueing: 0.1344916820526123 seconds, ~6%
Time spent prepping for tree search: 0.047373294830322266 seconds, ~2%
Time spent searching for tree: 0.2615640163421631 seconds, ~11%
Total of ~86% accounted for.

Proof tree found Mon, 18 Sep 2017 15:20:37

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           └─────11
                        │                 ├─────12
                        │                 └─────13
                        └─────14
                              ├─────15
                              │     ├─────16
                              │     │     ├─────17
                              │     │     └─────18
                              │     │           ├─────19
                              │     │           └─────20
                              │     └─────21
                              └─────22

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 7

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 8

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
2: point

Label: 9

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 10

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((1, 0)), Perm((0, 1, 2)))
2: point

Label: 11

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 12

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2)))
2: point

Label: 13

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 14

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 15

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 16

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 17

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point

Label: 18

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))

Label: 19

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((1, 0)), Perm((0, 1, 2)))
2: point

Label: 20

+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 21

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2)))
2: point

Label: 22

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 5, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 6, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 15, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 14, "children": [{"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 22, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 49, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[1, 0]": "point", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 48, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 136, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "relation": "", "identifier": 135, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 248, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[3, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "relation": "", "identifier": 249, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "point", "[2, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | ", "identifier": 24, "children": [{"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 51, "children": [{"formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[2, 0]": "point", "[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 54, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 110, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[2, 0]": "point", "[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 116, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[2, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[2, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 239, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[5, 2]": "point", "[0, 3]": "point", "[3, 4]": "point", "[1, 5]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[5, 2]": "point", "[0, 3]": "point", "[3, 4]": "point", "[1, 5]": "point"}, "relation": "", "identifier": 238, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[2, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[2, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 125, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 52, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 2.212087392807007 seconds

