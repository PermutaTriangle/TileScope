012_0321_1032_1320_2103_2301_3120_3201
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 17:05:45

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.8942837715148926 seconds
Number of tilings expanded by Set 1 is 25
Number of tilings expanded by Set 2 is 18
Total number of tilings is 133
Total number of expandable tilings is 128
Total number of verified tilings is 43
Total number of strategy verified tilings is 20
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.02960944175720215 seconds, ~3%
Time spent strategy verifying: 0.017682552337646484 seconds, ~1%
Time spent inferring: 0.37473344802856445 seconds, ~41%
Time spent expanding Set 1: 0.29001522064208984 seconds, ~32%
Time spent expanding Set 2: 0.022913455963134766 seconds, ~2%
Time spent queueing: 0.0019943714141845703 seconds, ~0%
Time spent prepping for tree search: 0.0063838958740234375 seconds, ~0%
Time spent searching for tree: 0.021854162216186523 seconds, ~2%
Total of ~81% accounted for.

Proof tree found Mon, 18 Sep 2017 17:05:45

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0, 3)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0, 3)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
|2| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 5

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 6

+-+-+-+-+
|2| |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0, 3)))", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0, 3)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0, 3)))"}, "relation": "", "identifier": 19, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "| Inserting the right most point in to the cell Cell(i=2, j=1). | ", "identifier": 21, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 127, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point"}, "relation": "", "identifier": 132, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.8942837715148926 seconds

