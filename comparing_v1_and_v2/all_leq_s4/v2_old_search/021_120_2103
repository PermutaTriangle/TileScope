021_120_2103
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:54:50

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.018364429473876953 seconds
Number of tilings expanded by Set 1 is 1
Number of tilings expanded by Set 2 is 1
Total number of tilings is 7
Total number of expandable tilings is 7
Total number of verified tilings is 7
Total number of strategy verified tilings is 2
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.0020453929901123047 seconds, ~11%
Time spent strategy verifying: 0.002288818359375 seconds, ~12%
Time spent inferring: 0.011263370513916016 seconds, ~61%
Time spent expanding Set 1: 0.0007069110870361328 seconds, ~3%
Time spent expanding Set 2: 0.0002918243408203125 seconds, ~1%
Time spent queueing: 2.6226043701171875e-05 seconds, ~0%
Time spent prepping for tree search: 3.4332275390625e-05 seconds, ~0%
Time spent searching for tree: 0.00014328956604003906 seconds, ~0%
Total of ~88% accounted for.

Proof tree found Mon, 18 Sep 2017 19:54:50

root: 0
      ├─────1
      └─────2

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))
We use his sibling for the next strategy
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
2: point
3: Av(Perm((0, 1)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 1]": "point", "[0, 2]": "Av(Perm((0, 1)))"}, "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.018364429473876953 seconds

