021_1023_1230_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:09:23

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 2.469451904296875 seconds
Number of tilings expanded by Set 1 is 57
Number of tilings expanded by Set 2 is 23
Total number of tilings is 229
Total number of expandable tilings is 197
Total number of verified tilings is 79
Total number of strategy verified tilings is 21
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.13267803192138672 seconds, ~5%
Time spent strategy verifying: 0.03649115562438965 seconds, ~1%
Time spent inferring: 0.8505313396453857 seconds, ~34%
Time spent expanding Set 1: 1.0298068523406982 seconds, ~41%
Time spent expanding Set 2: 0.03436541557312012 seconds, ~1%
Time spent queueing: 0.0078067779541015625 seconds, ~0%
Time spent prepping for tree search: 0.02595210075378418 seconds, ~1%
Time spent searching for tree: 0.0673677921295166 seconds, ~2%
Total of ~85% accounted for.

Proof tree found Mon, 18 Sep 2017 18:09:26

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: point

Label: 5

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 6

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: point

Label: 7

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point

Label: 8

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))", "[1, 2]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 13, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 15, "children": [{"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | ", "identifier": 74, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 225, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 224, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 164, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 2.469451904296875 seconds

