012_0321_1032_1302_2103_2130_2310_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 17:32:57

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 1.4469590187072754 seconds
Number of tilings expanded by Set 1 is 67
Number of tilings expanded by Set 2 is 23
Total number of tilings is 161
Total number of expandable tilings is 137
Total number of verified tilings is 48
Total number of strategy verified tilings is 23
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.033678293228149414 seconds, ~2%
Time spent strategy verifying: 0.011731624603271484 seconds, ~0%
Time spent inferring: 0.429856538772583 seconds, ~29%
Time spent expanding Set 1: 0.6481409072875977 seconds, ~44%
Time spent expanding Set 2: 0.029772043228149414 seconds, ~2%
Time spent queueing: 0.013216257095336914 seconds, ~0%
Time spent prepping for tree search: 0.028489351272583008 seconds, ~1%
Time spent searching for tree: 0.0879364013671875 seconds, ~6%
Total of ~84% accounted for.

Proof tree found Mon, 18 Sep 2017 17:32:59

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 5

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 6

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 7

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 8

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[0, 1]": "point"}, "relation": "", "identifier": 7, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | ", "identifier": 9, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 42, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "relation": "", "identifier": 61, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[2, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[2, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 63, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 160, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 1.4469590187072754 seconds

