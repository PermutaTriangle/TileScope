021_0123_1023_1230_3201
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:06:13

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 2.956019639968872 seconds
Number of tilings expanded by Set 1 is 59
Number of tilings expanded by Set 2 is 23
Total number of tilings is 284
Total number of expandable tilings is 216
Total number of verified tilings is 90
Total number of strategy verified tilings is 29
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.18335843086242676 seconds, ~6%
Time spent strategy verifying: 0.02994370460510254 seconds, ~1%
Time spent inferring: 1.062002182006836 seconds, ~35%
Time spent expanding Set 1: 0.8134400844573975 seconds, ~27%
Time spent expanding Set 2: 0.03238391876220703 seconds, ~1%
Time spent queueing: 0.008157730102539062 seconds, ~0%
Time spent prepping for tree search: 0.028955936431884766 seconds, ~0%
Time spent searching for tree: 0.07572436332702637 seconds, ~2%
Total of ~72% accounted for.

Proof tree found Mon, 18 Sep 2017 18:06:16

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((3, 2, 0, 1)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((3, 2, 0, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 1)))
3: point

Label: 5

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: Av+(Perm((0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 1)))
3: point

Label: 6

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: point

Label: 7

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point

Label: 8

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((3, 2, 0, 1)))", "[1, 2]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((3, 2, 0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((3, 2, 0, 1)))", "[1, 1]": "point"}, "relation": "", "identifier": 13, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "Av(Perm((0, 1)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "Av(Perm((0, 1)))", "[1, 2]": "point"}, "relation": "", "identifier": 15, "children": [{"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[1, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | ", "identifier": 75, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 272, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "Av+(Perm((0, 1)))", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "Av+(Perm((0, 1)))", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 276, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 158, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 2.956019639968872 seconds

