012_1032_2310_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:26:56

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 9.244914054870605 seconds
Number of tilings expanded by Set 1 is 185
Number of tilings expanded by Set 2 is 160
Total number of tilings is 800
Total number of expandable tilings is 703
Total number of verified tilings is 149
Total number of strategy verified tilings is 78
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.14188456535339355 seconds, ~1%
Time spent strategy verifying: 0.08699464797973633 seconds, ~0%
Time spent inferring: 2.528869152069092 seconds, ~27%
Time spent expanding Set 1: 2.7773189544677734 seconds, ~30%
Time spent expanding Set 2: 0.24532556533813477 seconds, ~2%
Time spent queueing: 0.17023730278015137 seconds, ~1%
Time spent prepping for tree search: 0.47046422958374023 seconds, ~5%
Time spent searching for tree: 1.1570184230804443 seconds, ~12%
Total of ~78% accounted for.

Proof tree found Mon, 18 Sep 2017 15:27:05

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        │     ├─────10
                        │     └─────11
                        └─────12

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
4: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 5

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |4| |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
4: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 6

+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
2: point

Label: 7

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 8

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 9

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | |1|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 10

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 11

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 12

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((2, 3, 1, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 11, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 1]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 4]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[2, 5]": "point"}, "relation": "| Inserting the right most point in to the cell Cell(i=2, j=0). | ", "identifier": 13, "children": [{"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[2, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[2, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 4]": "point"}, "relation": "", "identifier": 123, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "point", "[1, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 3]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[0, 1]": "point"}, "relation": "| Reverse of: Inserting the right most point in to the cell Cell(i=1, j=0). | ", "identifier": 109, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[4, 2]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[4, 2]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point"}, "relation": "", "identifier": 249, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (3, 4); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[0, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 5]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[0, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 5]": "point"}, "relation": "", "identifier": 125, "children": [{"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[0, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "point", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[3, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=3). | Reverse of: Inserting the right most point in to the cell Cell(i=3, j=0). | Inserting the left most point in to the cell Cell(i=3, j=0). | ", "identifier": 176, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=0, j=2). | ", "identifier": 625, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[3, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 798, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 700, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 9.244914054870605 seconds

