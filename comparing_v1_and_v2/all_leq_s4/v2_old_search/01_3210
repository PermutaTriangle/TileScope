01_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:55:07

Looking for proof tree for Basis((Perm((0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.005632162094116211 seconds
Number of tilings expanded by Set 1 is 1
Number of tilings expanded by Set 2 is 1
Total number of tilings is 5
Total number of expandable tilings is 5
Total number of verified tilings is 5
Total number of strategy verified tilings is 2
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.0011532306671142578 seconds, ~20%
Time spent strategy verifying: 0.0004105567932128906 seconds, ~7%
Time spent inferring: 0.0037925243377685547 seconds, ~67%
Time spent expanding Set 1: 0.0003998279571533203 seconds, ~7%
Time spent expanding Set 2: 0.00029587745666503906 seconds, ~5%
Time spent queueing: 2.8133392333984375e-05 seconds, ~0%
Time spent prepping for tree search: 3.218650817871094e-05 seconds, ~0%
Time spent searching for tree: 0.00014543533325195312 seconds, ~2%
Total of ~108% accounted for.

Proof tree found Mon, 18 Sep 2017 19:55:07

root: 0
      ├─────1
      └─────2

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.005632162094116211 seconds

