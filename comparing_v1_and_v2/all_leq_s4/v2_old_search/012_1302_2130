012_1302_2130
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:56:37

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.7287356853485107 seconds
Number of tilings expanded by Set 1 is 18
Number of tilings expanded by Set 2 is 7
Total number of tilings is 61
Total number of expandable tilings is 45
Total number of verified tilings is 30
Total number of strategy verified tilings is 15
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.018219709396362305 seconds, ~2%
Time spent strategy verifying: 0.0220639705657959 seconds, ~3%
Time spent inferring: 0.2206277847290039 seconds, ~30%
Time spent expanding Set 1: 0.35138988494873047 seconds, ~48%
Time spent expanding Set 2: 0.007043361663818359 seconds, ~0%
Time spent queueing: 0.001295328140258789 seconds, ~0%
Time spent prepping for tree search: 0.002857208251953125 seconds, ~0%
Time spent searching for tree: 0.012063264846801758 seconds, ~1%
Total of ~84% accounted for.

Proof tree found Mon, 18 Sep 2017 14:56:38

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))
3: point

Label: 5

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((0, 1)))

Label: 6

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 7, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))", "[1, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[2, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 9, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))", "[0, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))", "[0, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point"}, "relation": "", "identifier": 48, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[2, 4]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[2, 4]": "point"}, "relation": "", "identifier": 50, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.7287356853485107 seconds

