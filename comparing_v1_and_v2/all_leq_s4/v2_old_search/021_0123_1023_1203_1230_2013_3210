021_0123_1023_1203_1230_2013_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:27:04

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 2.499725580215454 seconds
Number of tilings expanded by Set 1 is 58
Number of tilings expanded by Set 2 is 28
Total number of tilings is 234
Total number of expandable tilings is 204
Total number of verified tilings is 86
Total number of strategy verified tilings is 22
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.15906167030334473 seconds, ~6%
Time spent strategy verifying: 0.03544282913208008 seconds, ~1%
Time spent inferring: 1.3087563514709473 seconds, ~52%
Time spent expanding Set 1: 0.5644583702087402 seconds, ~22%
Time spent expanding Set 2: 0.035887718200683594 seconds, ~1%
Time spent queueing: 0.007622957229614258 seconds, ~0%
Time spent prepping for tree search: 0.027441740036010742 seconds, ~1%
Time spent searching for tree: 0.07196760177612305 seconds, ~2%
Total of ~85% accounted for.

Proof tree found Mon, 18 Sep 2017 18:27:06

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((3, 2, 1, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: point

Label: 5

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 6

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))
2: point

Label: 7

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))
2: point

Label: 8

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((3, 2, 1, 0)))", "[1, 2]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 15, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 17, "children": [{"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | ", "identifier": 42, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 228, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2, 3)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 232, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)))", "[0, 1]": "point"}, "relation": "", "identifier": 128, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 2.499725580215454 seconds

