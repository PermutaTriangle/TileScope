021_120_0123_3012_3102_3201
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:54:56

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.09133291244506836 seconds
Number of tilings expanded by Set 1 is 6
Number of tilings expanded by Set 2 is 3
Total number of tilings is 21
Total number of expandable tilings is 19
Total number of verified tilings is 20
Total number of strategy verified tilings is 6
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.008431673049926758 seconds, ~9%
Time spent strategy verifying: 0.003177165985107422 seconds, ~3%
Time spent inferring: 0.05215883255004883 seconds, ~57%
Time spent expanding Set 1: 0.02330160140991211 seconds, ~25%
Time spent expanding Set 2: 0.0013394355773925781 seconds, ~1%
Time spent queueing: 0.0002598762512207031 seconds, ~0%
Time spent prepping for tree search: 0.0003387928009033203 seconds, ~0%
Time spent searching for tree: 0.0013401508331298828 seconds, ~1%
Total of ~96% accounted for.

Proof tree found Mon, 18 Sep 2017 19:54:56

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
2: point

Label: 4

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[0, 1]": "point"}, "relation": "", "identifier": 9, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))", "[1, 1]": "point"}, "relation": "", "identifier": 11, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.09133291244506836 seconds

