012_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:42:10

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.019463062286377 seconds
Number of tilings expanded by Set 1 is 297
Number of tilings expanded by Set 2 is 207
Total number of tilings is 1603
Total number of expandable tilings is 1368
Total number of verified tilings is 77
Total number of strategy verified tilings is 43
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.6103603839874268 seconds, ~2%
Time spent strategy verifying: 0.2890923023223877 seconds, ~0%
Time spent inferring: 7.944128036499023 seconds, ~26%
Time spent expanding Set 1: 11.194960594177246 seconds, ~37%
Time spent expanding Set 2: 0.5724027156829834 seconds, ~1%
Time spent queueing: 0.5271284580230713 seconds, ~1%
Time spent prepping for tree search: 1.4506726264953613 seconds, ~4%
Time spent searching for tree: 1.8803930282592773 seconds, ~6%
Total of ~77% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:42:40

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.09808874130249 seconds
Number of tilings expanded by Set 1 is 311
Number of tilings expanded by Set 2 is 231
Total number of tilings is 1789
Total number of expandable tilings is 1539
Total number of verified tilings is 98
Total number of strategy verified tilings is 51
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.6319248676300049 seconds, ~2%
Time spent strategy verifying: 0.08100557327270508 seconds, ~0%
Time spent inferring: 8.694449186325073 seconds, ~28%
Time spent expanding Set 1: 10.129599332809448 seconds, ~33%
Time spent expanding Set 2: 0.6101651191711426 seconds, ~2%
Time spent queueing: 0.568925142288208 seconds, ~1%
Time spent prepping for tree search: 1.6880896091461182 seconds, ~5%
Time spent searching for tree: 2.186861515045166 seconds, ~7%
Total of ~78% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:43:10

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.01140522956848 seconds
Number of tilings expanded by Set 1 is 268
Number of tilings expanded by Set 2 is 152
Total number of tilings is 1006
Total number of expandable tilings is 928
Total number of verified tilings is 60
Total number of strategy verified tilings is 28
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.6569304466247559 seconds, ~2%
Time spent strategy verifying: 0.02675461769104004 seconds, ~0%
Time spent inferring: 13.62473750114441 seconds, ~45%
Time spent expanding Set 1: 12.537814617156982 seconds, ~41%
Time spent expanding Set 2: 0.22348809242248535 seconds, ~0%
Time spent queueing: 0.16100764274597168 seconds, ~0%
Time spent prepping for tree search: 0.6569879055023193 seconds, ~2%
Time spent searching for tree: 0.8182296752929688 seconds, ~2%
Total of ~92% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:43:40

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.151378631591797 seconds
Number of tilings expanded by Set 1 is 333
Number of tilings expanded by Set 2 is 194
Total number of tilings is 1341
Total number of expandable tilings is 1242
Total number of verified tilings is 60
Total number of strategy verified tilings is 28
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.9528927803039551 seconds, ~3%
Time spent strategy verifying: 0.026742935180664062 seconds, ~0%
Time spent inferring: 16.563851833343506 seconds, ~54%
Time spent expanding Set 1: 7.466346740722656 seconds, ~24%
Time spent expanding Set 2: 0.3158743381500244 seconds, ~1%
Time spent queueing: 0.3013899326324463 seconds, ~0%
Time spent prepping for tree search: 1.0753076076507568 seconds, ~3%
Time spent searching for tree: 1.3841123580932617 seconds, ~4%
Total of ~89% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:44:10

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.03121542930603 seconds
Number of tilings expanded by Set 1 is 182
Number of tilings expanded by Set 2 is 145
Total number of tilings is 1190
Total number of expandable tilings is 1138
Total number of verified tilings is 108
Total number of strategy verified tilings is 46
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.5718932151794434 seconds, ~5%
Time spent strategy verifying: 0.042258501052856445 seconds, ~0%
Time spent inferring: 14.889451503753662 seconds, ~49%
Time spent expanding Set 1: 10.401289463043213 seconds, ~34%
Time spent expanding Set 2: 0.248032808303833 seconds, ~0%
Time spent queueing: 0.20157194137573242 seconds, ~0%
Time spent prepping for tree search: 0.5807273387908936 seconds, ~1%
Time spent searching for tree: 0.9352192878723145 seconds, ~3%
Total of ~92% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:44:40

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.318947553634644 seconds
Number of tilings expanded by Set 1 is 252
Number of tilings expanded by Set 2 is 177
Total number of tilings is 1449
Total number of expandable tilings is 1379
Total number of verified tilings is 108
Total number of strategy verified tilings is 46
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 2.0782501697540283 seconds, ~6%
Time spent strategy verifying: 0.04189348220825195 seconds, ~0%
Time spent inferring: 18.740803718566895 seconds, ~61%
Time spent expanding Set 1: 5.025383710861206 seconds, ~16%
Time spent expanding Set 2: 0.3103060722351074 seconds, ~1%
Time spent queueing: 0.29684901237487793 seconds, ~0%
Time spent prepping for tree search: 0.9776561260223389 seconds, ~3%
Time spent searching for tree: 1.43125319480896 seconds, ~4%
Total of ~91% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:45:11

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 12.207624912261963 seconds
Number of tilings expanded by Set 1 is 161
Number of tilings expanded by Set 2 is 106
Total number of tilings is 819
Total number of expandable tilings is 395
Total number of verified tilings is 307
Total number of strategy verified tilings is 119
Total number of empty tilings is 4
There were 0 cache misses

Time spent equivalent expanding: 0.11000394821166992 seconds, ~0%
Time spent strategy verifying: 0.0954744815826416 seconds, ~0%
Time spent inferring: 1.6926629543304443 seconds, ~13%
Time spent expanding Set 1: 2.5514633655548096 seconds, ~20%
Time spent expanding Set 2: 0.13604044914245605 seconds, ~1%
Time spent queueing: 3.4555323123931885 seconds, ~28%
Time spent prepping for tree search: 0.5520522594451904 seconds, ~4%
Time spent searching for tree: 2.5847549438476562 seconds, ~21%
Total of ~87% accounted for.

Proof tree found Mon, 18 Sep 2017 14:45:23

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     │           ├─────9
                  │     │           └─────10
                  │     │                 ├─────11
                  │     │                 └─────12
                  │     │                       ├─────13
                  │     │                       └─────14
                  │     └─────15
                  │           ├─────16
                  │           │     ├─────17
                  │           │     └─────18
                  │           │           ├─────19
                  │           │           └─────20
                  │           │                 ├─────21
                  │           │                 └─────22
                  │           │                       ├─────23
                  │           │                       └─────24
                  │           └─────25
                  │                 ├─────26
                  │                 │     ├─────27
                  │                 │     │     ├─────28
                  │                 │     │     └─────29
                  │                 │     └─────30
                  │                 │           ├─────31
                  │                 │           └─────32
                  │                 └─────33
                  │                       ├─────34
                  │                       │     ├─────35
                  │                       │     │     ├─────36
                  │                       │     │     └─────37
                  │                       │     │           ├─────38
                  │                       │     │           └─────39
                  │                       │     └─────40
                  │                       ├─────41
                  │                       │     ├─────42
                  │                       │     └─────43
                  │                       └─────44
                  │                             ├─────45
                  │                             └─────46
                  └─────47

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 5

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 6

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 7

+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 8

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 9

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 10

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 11

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 12

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 13

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point

Label: 14

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 15

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
4: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 16

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 17

+-+-+-+
| |1| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 18

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 19

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 20

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 21

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 22

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 23

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|2| | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 24

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point

Label: 25

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))
4: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 26

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))

Label: 27

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 28

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 29

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point

Label: 30

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 31

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 32

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point

Label: 33

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))

Label: 34

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| |3| |4|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))
4: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 35

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 36

+-+
|1|
+-+
1: point

Label: 37

+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 38

+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |2| | |1|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 39

+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 40

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | |1|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point

Label: 41

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| |3| | |1|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 42

+-+
|1|
+-+
1: point

Label: 43

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 44

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| |1| | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 45

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point

Label: 46

+-+
|1|
+-+
1: Av(Perm((0, 1)), Perm((1, 0)))

Label: 47

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 8, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 9, "children": [{"formal_step": "Placing the minimum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 21, "children": [{"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point"}, "relation": "", "identifier": 28, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 52, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the minimum point into row 1", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point"}, "relation": "", "identifier": 51, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 3]": "point"}, "relation": "", "identifier": 108, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "relation": "", "identifier": 109, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point"}, "relation": "", "identifier": 306, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the minimum point into row 2", "in_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 305, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[1, 0]": "point", "[4, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 416, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[5, 1]": "point", "[1, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "point", "[5, 1]": "point", "[1, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[3, 4]": "point"}, "relation": "", "identifier": 620, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 29, "children": [{"formal_step": "We perform cell insertion into cell (3, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 54, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 114, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the minimum point into row 1", "in_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 116, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point"}, "out_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point"}, "relation": "", "identifier": 193, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "relation": "", "identifier": 194, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point"}, "relation": "", "identifier": 465, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the minimum point into row 2", "in_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 464, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[5, 1]": "point", "[1, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[5, 1]": "point", "[1, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 414, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 814, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 55, "children": [{"formal_step": "Placing the maximum point into row 1", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point"}, "relation": "", "identifier": 113, "children": [{"formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[4, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[5, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=3, j=2). | ", "identifier": 201, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[4, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 473, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "point", "[2, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[4, 0]": "point", "[2, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 474, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[4, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[4, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 203, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 477, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "point", "[2, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[4, 0]": "point", "[2, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 476, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "Placing the maximum point into row 1", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 117, "children": [{"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[4, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[5, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[4, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[5, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 208, "children": [{"formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=3)]", "in_tiling": {"[3, 0]": "point", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "point", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 479, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "relation": "", "identifier": 6, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 1", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point"}, "relation": "", "identifier": 185, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "point", "[2, 2]": "point", "[0, 3]": "point"}, "out_tiling": {"[3, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "point", "[2, 2]": "point", "[0, 3]": "point"}, "relation": "", "identifier": 407, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "point"}, "relation": "", "identifier": 408, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=2, j=1), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=1): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=1, j=3)}]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "point", "[1, 1]": "point", "[5, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[4, 0]": "point", "[1, 1]": "point", "[5, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 480, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=5, j=1)]", "in_tiling": {"[4, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[4, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 209, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "relation": "", "identifier": 6, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "recurse", "in_tiling": {"[4, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[4, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 203, "children": [], "recurse": "[]", "strategy_verified": false}], "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=3): Cell(i=1, j=3), Cell(i=2, j=1): Cell(i=2, j=1), Cell(i=3, j=2): Cell(i=3, j=2), Cell(i=4, j=0): Cell(i=4, j=0)}, {Cell(i=0, j=0): Cell(i=5, j=1)}]", "strategy_verified": false}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=5, j=1)]", "in_tiling": {"[3, 0]": "point", "[0, 1]": "point", "[2, 1]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "point", "[2, 1]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 210, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[2, 1]": "point", "[0, 2]": "point", "[4, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[2, 1]": "point", "[0, 2]": "point", "[4, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 265, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 447, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=3): Cell(i=1, j=3), Cell(i=2, j=1): Cell(i=2, j=1), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=4, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=5, j=1)}]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 26, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 12.207624912261963 seconds

