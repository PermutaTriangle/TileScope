012_1302_1320_2130_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 16:24:59

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 1.7170491218566895 seconds
Number of tilings expanded by Set 1 is 48
Number of tilings expanded by Set 2 is 19
Total number of tilings is 230
Total number of expandable tilings is 156
Total number of verified tilings is 72
Total number of strategy verified tilings is 27
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.039868831634521484 seconds, ~2%
Time spent strategy verifying: 0.03164815902709961 seconds, ~1%
Time spent inferring: 0.6017835140228271 seconds, ~35%
Time spent expanding Set 1: 0.5852968692779541 seconds, ~34%
Time spent expanding Set 2: 0.025452613830566406 seconds, ~1%
Time spent queueing: 0.007668972015380859 seconds, ~0%
Time spent prepping for tree search: 0.02154994010925293 seconds, ~1%
Time spent searching for tree: 0.06553292274475098 seconds, ~3%
Total of ~77% accounted for.

Proof tree found Mon, 18 Sep 2017 16:25:00

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|5| | | | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| |1| |2| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: point
4: Av(Perm((1, 0)), Perm((0, 1, 2)))
5: Av(Perm((0, 1)), Perm((1, 0)))

Label: 5

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 6

+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))
2: point

Label: 7

+-+
|1|
+-+
1: Av(Perm((0, 1)), Perm((1, 0)))

Label: 8

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 9

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 10

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 11, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[5, 1]": "point", "[4, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "relation": "| Inserting the right most point in to the cell Cell(i=2, j=0). | ", "identifier": 13, "children": [{"formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=3)]", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point", "[3, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point", "[3, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point"}, "relation": "", "identifier": 112, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point", "[2, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 3]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "relation": "| Reverse of: Inserting the right most point in to the cell Cell(i=1, j=0). | ", "identifier": 96, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 148, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=3): Cell(i=1, j=4), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=2): Cell(i=3, j=2), Cell(i=3, j=1): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=0, j=3)}]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[4, 1]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=0). | Reverse of: Inserting the right most point in to the cell Cell(i=3, j=1). | Inserting the left most point in to the cell Cell(i=3, j=1). | Reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | ", "identifier": 57, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[3, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | Reverse of: Inserting the top most point in to the cell Cell(i=3, j=2). | ", "identifier": 45, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 225, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 1.7170491218566895 seconds

