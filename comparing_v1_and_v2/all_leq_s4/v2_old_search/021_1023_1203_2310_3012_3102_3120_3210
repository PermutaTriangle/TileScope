021_1023_1203_2310_3012_3102_3120_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:03:22

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.644845724105835 seconds
Number of tilings expanded by Set 1 is 24
Number of tilings expanded by Set 2 is 8
Total number of tilings is 65
Total number of expandable tilings is 59
Total number of verified tilings is 33
Total number of strategy verified tilings is 14
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.019783496856689453 seconds, ~3%
Time spent strategy verifying: 0.022269725799560547 seconds, ~3%
Time spent inferring: 0.21270179748535156 seconds, ~32%
Time spent expanding Set 1: 0.2964494228363037 seconds, ~45%
Time spent expanding Set 2: 0.009871244430541992 seconds, ~1%
Time spent queueing: 0.0012068748474121094 seconds, ~0%
Time spent prepping for tree search: 0.003093242645263672 seconds, ~0%
Time spent searching for tree: 0.012634038925170898 seconds, ~1%
Total of ~85% accounted for.

Proof tree found Mon, 18 Sep 2017 19:03:23

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)))
3: Av(Perm((1, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))

Label: 5

+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 6

+-+-+-+-+
| |1| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)))", "[2, 1]": "Av(Perm((1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))"}, "relation": "", "identifier": 25, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)), Perm((1, 0, 2, 3)))", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[2, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point", "[0, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 5]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "| Inserting the right most point in to the cell Cell(i=0, j=1). | ", "identifier": 27, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[2, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 54, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point"}, "relation": "", "identifier": 56, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.644845724105835 seconds

