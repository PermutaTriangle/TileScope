021_1203_2103_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueuedf.TilingQueueDF'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:04:48

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 1.7306504249572754 seconds
Number of tilings expanded by Set 1 is 24
Number of tilings expanded by Set 2 is 11
Total number of tilings is 131
Total number of expandable tilings is 114
Total number of verified tilings is 43
Total number of strategy verified tilings is 16
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.13652443885803223 seconds, ~7%
Time spent strategy verifying: 0.039240360260009766 seconds, ~2%
Time spent inferring: 0.65010666847229 seconds, ~37%
Time spent expanding Set 1: 0.6779732704162598 seconds, ~39%
Time spent expanding Set 2: 0.01636195182800293 seconds, ~0%
Time spent queueing: 0.0018279552459716797 seconds, ~0%
Time spent prepping for tree search: 0.0055713653564453125 seconds, ~0%
Time spent searching for tree: 0.018580913543701172 seconds, ~1%
Total of ~86% accounted for.

Proof tree found Mon, 18 Sep 2017 18:04:50

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((1, 0)))

Label: 5

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))
2: point
3: Av(Perm((1, 0)))

Label: 6

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| |1| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))", "[0, 1]": "point"}, "relation": "", "identifier": 10, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))", "[0, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))", "[1, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=1). | ", "identifier": 12, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))", "[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)), Perm((1, 2, 0, 3)))", "[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point"}, "relation": "", "identifier": 126, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point"}, "relation": "", "identifier": 127, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 1.7306504249572754 seconds

