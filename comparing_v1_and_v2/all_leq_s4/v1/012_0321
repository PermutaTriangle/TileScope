012_0321

===========================================
Log created Mon, 18 Sep 2017 14:38:08

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 578 inferral cache hits and 2954 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2706 tilings in it right now.
There were 1594 tilings of which 326 are verified.
There were 944 SiblingNodes of which 158 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3154* times, (1577 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 14:38:39

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 578 inferral cache hits and 139099 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2536 tilings in it right now.
There were 1735 tilings of which 437 are verified.
There were 1111 SiblingNodes of which 253 are verified.

The function splittings called the partitioning cache *139303* times, (956 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Mon, 18 Sep 2017 14:39:10

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 583 inferral cache hits and 2169 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2007 tilings in it right now.
There were 1210 tilings of which 250 are verified.
There were 396 SiblingNodes of which 78 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2324* times, (1162 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 14:39:40

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 703 inferral cache hits and 29382 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2800 tilings in it right now.
There were 1555 tilings of which 251 are verified.
There were 543 SiblingNodes of which 83 are verified.

The function splittings called the partitioning cache *29590* times, (828 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 14:39:51

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 11 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 3475 inferral cache hits and 1298 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1220 tilings in it right now.
There were 768 tilings of which 170 are verified.
There were 300 SiblingNodes of which 71 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1394* times, (697 originating)
There were 0 cache misses

A proof tree was found in 11 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        └─────10
                              ├─────11
                              └─────12
                                    ├─────13
                                    └─────14

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
2: point

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+
|2|
+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
2: point

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
3: point
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 7

+-+-+
| |2|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
3: point

Label: 8

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
3: point
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))

Label: 9

+-+
|1|
+-+
1: point

Label: 10

+-+-+
| |2|
+-+-+
| |2|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
2: point

Label: 11

+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
|1| | |
+-+-+-+
1: point

Label: 12

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
3: point

Label: 13

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
3: point
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))
2: point

Label: 14

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 103, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 104, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 54, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=1) in its column. | The reverse of: Separating the topmost point from cell Cell(i=0, j=0). | ", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "The components of the tiling", "identifier": 64, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))", "[1, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=1, j=1): Cell(i=2, j=2), Cell(i=2, j=0): Cell(i=3, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=1)}]", "relation": "| Isolating the point at Cell(i=1, j=2) in its column. | ", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 105, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 64, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))", "[1, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=2) in its column. | ", "strategy_verified": false}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 106, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=1), Cell(i=2, j=4)]", "identifier": 107, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=4, j=3), Cell(i=3, j=0): Cell(i=5, j=0)}, {Cell(i=0, j=0): Cell(i=1, j=1), Cell(i=1, j=1): Cell(i=2, j=4)}]", "relation": "| Isolating the point at Cell(i=1, j=3) in its column. | ", "strategy_verified": false}], "formal_step": "Isolated the point at Cell(i=1, j=2) in its column", "identifier": 108, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))", "[1, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))", "[1, 2]": "point", "[1, 3]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 109, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=0, j=0) in its row. | The reverse of: Isolating the point at Cell(i=1, j=3) in its column. | ", "strategy_verified": false}], "formal_step": "Isolated the point at Cell(i=0, j=1) in its column", "identifier": 110, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))", "[0, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))", "[0, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1))).", "identifier": 54, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))", "[0, 1]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=0, j=0). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1))).", "identifier": 111, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}}
