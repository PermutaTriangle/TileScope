012_3120_3210

===========================================
Log created Mon, 18 Sep 2017 15:16:05

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 973 inferral cache hits and 6521 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 6717 tilings in it right now.
There were 2672 tilings of which 244 are verified.
There were 1603 SiblingNodes of which 148 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *6946* times, (3473 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:16:35

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1010 inferral cache hits and 185967 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 6643 tilings in it right now.
There were 2585 tilings of which 237 are verified.
There were 1550 SiblingNodes of which 141 are verified.

The function splittings called the partitioning cache *186396* times, (2137 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:17:05

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 355 inferral cache hits and 3017 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 4069 tilings in it right now.
There were 1434 tilings of which 70 are verified.
There were 498 SiblingNodes of which 26 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3230* times, (1615 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:17:35

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 465 inferral cache hits and 32994 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 5593 tilings in it right now.
There were 1884 tilings of which 77 are verified.
There were 627 SiblingNodes of which 27 are verified.

The function splittings called the partitioning cache *33261* times, (1071 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:18:06

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 7901 inferral cache hits and 2581 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 4254 tilings in it right now.
There were 1536 tilings of which 129 are verified.
There were 502 SiblingNodes of which 53 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2766* times, (1383 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:18:36

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 10516 inferral cache hits and 32834 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 5293 tilings in it right now.
There were 1902 tilings of which 81 are verified.
There were 589 SiblingNodes of which 33 are verified.

The function splittings called the partitioning cache *33103* times, (1079 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:18:38

Maximum depth fully searched was 6

Maximum time set at 30 seconds

Total time taken was 1 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 47 inferral cache hits and 953 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 590 tilings in it right now.
There were 386 tilings of which 114 are verified.
There were 276 SiblingNodes of which 68 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1014* times, (507 originating)
There were 0 cache misses

A proof tree was found in 1 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     │           ├─────11
                        │     │           └─────12
                        │     └─────13
                        │           ├─────14
                        │           └─────15
                        └─────16
                              ├─────17
                              └─────18
                                    ├─────19
                                    │     ├─────20
                                    │     └─────21
                                    └─────22
                                          ├─────23
                                          └─────24

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 7

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
4: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 8

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 9

+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 10

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 11

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 12

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 13

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | | |3|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 14

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 15

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | | |1|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 16

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 17

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))

Label: 18

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 19

+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 20

+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 21

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 22

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 23

+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 24

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 163, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 164, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 165, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=1). | ", "strategy_verified": true}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 166, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 3]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=2). | ", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 167, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 168, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Placing the maximum point into row 2", "identifier": 169, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "identifier": 170, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 171, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 172, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 3]": "point", "[4, 0]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 3]": "point", "[4, 0]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 173, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[2, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 3]": "point", "[4, 0]": "point", "[5, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=3). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "identifier": 174, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 175, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 176, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[2, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 4]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[2, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 4]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 177, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 5]": "point", "[4, 4]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 5]": "point", "[4, 4]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (4, 5); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 178, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[2, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 4]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[2, 6]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 4]": "point", "[6, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=4). | ", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 179, "in_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point", "[2, 0]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=3). | ", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 180, "in_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 181, "in_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "Placing the minimum point into row 2", "identifier": 182, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "identifier": 183, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "Placing the minimum point into row 1", "identifier": 184, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0))).", "identifier": 185, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "identifier": 186, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))).", "identifier": 187, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}}
