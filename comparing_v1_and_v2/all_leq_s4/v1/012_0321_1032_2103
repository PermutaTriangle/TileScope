012_0321_1032_2103

===========================================
Log created Mon, 18 Sep 2017 15:19:09

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 461 inferral cache hits and 3218 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2905 tilings in it right now.
There were 1435 tilings of which 211 are verified.
There were 917 SiblingNodes of which 131 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3434* times, (1717 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:19:39

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 472 inferral cache hits and 109777 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2882 tilings in it right now.
There were 1433 tilings of which 220 are verified.
There were 919 SiblingNodes of which 140 are verified.

The function splittings called the partitioning cache *109990* times, (1027 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:20:10

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 386 inferral cache hits and 2324 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2355 tilings in it right now.
There were 1049 tilings of which 134 are verified.
There were 371 SiblingNodes of which 68 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2490* times, (1245 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:20:40

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 641 inferral cache hits and 35649 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 3179 tilings in it right now.
There were 1511 tilings of which 192 are verified.
There were 573 SiblingNodes of which 100 are verified.

The function splittings called the partitioning cache *35907* times, (998 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:21:10

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6468 inferral cache hits and 2476 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 2722 tilings in it right now.
There were 1215 tilings of which 189 are verified.
There were 427 SiblingNodes of which 90 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2654* times, (1327 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:21:40

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 9249 inferral cache hits and 33211 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 3748 tilings in it right now.
There were 1674 tilings of which 232 are verified.
There were 576 SiblingNodes of which 105 are verified.

The function splittings called the partitioning cache *33469* times, (1003 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 15:21:55

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 15 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 54 inferral cache hits and 1581 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 448 tilings in it right now.
There were 397 tilings of which 173 are verified.
There were 341 SiblingNodes of which 117 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1672* times, (836 originating)
There were 0 cache misses

A proof tree was found in 15 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           └─────11
                        │                 ├─────12
                        │                 │     ├─────13
                        │                 │     │     ├─────14
                        │                 │     │     └─────15
                        │                 │     └─────16
                        │                 └─────17
                        └─────18
                              ├─────19
                              └─────20

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 7

+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 8

+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))

Label: 9

+-+-+-+-+-+
|2| |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))

Label: 10

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point

Label: 11

+-+-+-+-+-+
|2| |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))

Label: 12

+-+-+-+-+
|2| |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))

Label: 13

+-+-+-+-+-+-+
|2| |3| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 14

+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 15

+-+
|1|
+-+
1: point

Label: 16

+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))

Label: 17

+-+
|1|
+-+
1: point

Label: 18

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 19

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))

Label: 20

+-+-+-+-+
|2| |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 179, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 180, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 181, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 182, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 183, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 35, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=5, j=1)]", "identifier": 49, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 1]": "point"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=1): Cell(i=1, j=2), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=4, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=5, j=1)}]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 184, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Placing the minimum point into row 2", "identifier": 28, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=3, j=0)]", "identifier": 185, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=0)}]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3))).", "identifier": 83, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 35, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 186, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [], "formal_step": "recurse", "identifier": 28, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 10, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "Placing the minimum point into row 1", "identifier": 30, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "identifier": 187, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3))).", "identifier": 188, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3))).", "identifier": 189, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 0, 3)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}}
