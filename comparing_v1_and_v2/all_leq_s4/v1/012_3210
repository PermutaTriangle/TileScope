012_3210

===========================================
Log created Mon, 18 Sep 2017 14:51:55

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 677 inferral cache hits and 5424 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 6189 tilings in it right now.
There were 2397 tilings of which 122 are verified.
There were 1431 SiblingNodes of which 82 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *5782* times, (2891 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 14:52:25

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 685 inferral cache hits and 144640 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 6293 tilings in it right now.
There were 2384 tilings of which 146 are verified.
There were 1414 SiblingNodes of which 80 are verified.

The function splittings called the partitioning cache *144999* times, (1783 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 14:52:55

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 293 inferral cache hits and 2386 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2834 tilings in it right now.
There were 1029 tilings of which 46 are verified.
There were 323 SiblingNodes of which 18 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2556* times, (1278 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 14:53:25

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 382 inferral cache hits and 24424 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 4579 tilings in it right now.
There were 1590 tilings of which 53 are verified.
There were 505 SiblingNodes of which 21 are verified.

The function splittings called the partitioning cache *24657* times, (912 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 14:53:55

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6687 inferral cache hits and 2603 partitioning cache hits.
The partitioning cache had 9 tilings in it right now.
The inferral cache has 3509 tilings in it right now.
There were 1301 tilings of which 102 are verified.
There were 377 SiblingNodes of which 40 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2788* times, (1394 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 14:54:26

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 9414 inferral cache hits and 22593 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 4850 tilings in it right now.
There were 1759 tilings of which 104 are verified.
There were 541 SiblingNodes of which 42 are verified.

The function splittings called the partitioning cache *22831* times, (916 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 18 Sep 2017 14:54:31

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 4 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 149 inferral cache hits and 2497 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1083 tilings in it right now.
There were 811 tilings of which 285 are verified.
There were 643 SiblingNodes of which 177 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2642* times, (1321 originating)
There were 0 cache misses

A proof tree was found in 4 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     │           ├─────11
                        │     │           └─────12
                        │     └─────13
                        │           ├─────14
                        │           │     ├─────15
                        │           │     └─────16
                        │           └─────17
                        │                 ├─────18
                        │                 │     ├─────19
                        │                 │     │     ├─────20
                        │                 │     │     └─────21
                        │                 │     └─────22
                        │                 ├─────23
                        │                 └─────24
                        │                       ├─────25
                        │                       │     ├─────26
                        │                       │     └─────27
                        │                       └─────28
                        └─────29
                              ├─────30
                              └─────31
                                    ├─────32
                                    │     ├─────33
                                    │     │     ├─────34
                                    │     │     └─────35
                                    │     │           ├─────36
                                    │     │           └─────37
                                    │     └─────38
                                    └─────39
                                          ├─────40
                                          └─────41

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 7

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
4: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 8

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 9

+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 10

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 11

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 12

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point

Label: 13

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
4: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 14

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 15

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 16

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 17

+-+-+-+-+-+
|2| |3| |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 18

+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 19

+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 20

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 21

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point

Label: 22

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point

Label: 23

+-+-+-+-+-+
|1| | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point

Label: 24

+-+-+-+-+-+-+
|2| |3| |4| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 25

+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 26

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|2| | |1| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 27

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 28

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | |1| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point

Label: 29

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 30

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))

Label: 31

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 32

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
|2| | | |3| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 33

+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 34

+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 35

+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 36

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|2| | | |1| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 37

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | |2| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 38

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|2| | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 39

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 40

+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 41

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 410, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 411, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 412, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=1). | ", "strategy_verified": true}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 413, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 3]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 3]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 414, "in_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 0]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 0]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=3, j=2). | Inserting the bottom most point in to the cell Cell(i=3, j=2). | ", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 415, "in_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 416, "in_tiling": {"[0, 1]": "point", "[1, 4]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 5]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=3, j=2). | Inserting the top most point in to the cell Cell(i=1, j=3). | Inserting the top most point in to the cell Cell(i=4, j=2). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "identifier": 417, "in_tiling": {"[0, 1]": "point", "[1, 3]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=2). | ", "strategy_verified": false}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 418, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 419, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Placing the maximum point into row 2", "identifier": 420, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 421, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 4]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 5]": "point", "[3, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "point", "[5, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=4). | ", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 422, "in_tiling": {"[0, 2]": "point", "[1, 5]": "point", "[2, 1]": "point", "[3, 4]": "point", "[4, 0]": "point", "[5, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 5]": "point", "[2, 1]": "point", "[3, 4]": "point", "[4, 0]": "point", "[5, 3]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (1, 5); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 423, "in_tiling": {"[0, 2]": "point", "[1, 6]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[3, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 4]": "point", "[5, 0]": "point", "[6, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[3, 4]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 0]": "point", "[5, 3]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=3, j=4). | ", "strategy_verified": false}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 424, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 5]": "point", "[3, 0]": "point", "[4, 4]": "point", "[5, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 5]": "point", "[3, 0]": "point", "[4, 4]": "point", "[5, 3]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (7, 3); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 425, "in_tiling": {"[0, 2]": "point", "[1, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[3, 4]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 0]": "point", "[5, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 7]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[3, 6]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 5]": "point", "[5, 0]": "point", "[6, 4]": "point", "[7, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=4). | Inserting the top most point in to the cell Cell(i=6, j=3). | ", "strategy_verified": false}, {"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 426, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 427, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point", "[2, 1]": "point", "[3, 3]": "point", "[4, 0]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point", "[2, 1]": "point", "[3, 3]": "point", "[4, 0]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 428, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Placing the maximum point into row 3", "identifier": 429, "in_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 430, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 3]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 3]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (4, 3); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 431, "in_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 2]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "Placing the minimum point into row 2", "identifier": 432, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "identifier": 433, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "identifier": 434, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 435, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 436, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 4]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=3). | ", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 437, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 438, "in_tiling": {"[0, 3]": "point", "[1, 2]": "point", "[2, 0]": "point", "[3, 4]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "point", "[2, 0]": "point", "[3, 4]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Placing the maximum point into row 3", "identifier": 439, "in_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "identifier": 440, "in_tiling": {"[0, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 441, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 3]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 3]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 442, "in_tiling": {"[0, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[5, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 443, "in_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point", "[2, 0]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=3). | ", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 444, "in_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 445, "in_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "Placing the minimum point into row 2", "identifier": 446, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "identifier": 447, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "Placing the minimum point into row 1", "identifier": 448, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 1, 0))).", "identifier": 449, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "identifier": 450, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((3, 2, 1, 0))).", "identifier": 451, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 2, 1, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}}
