021_0123_1203_1230_2310_3012_3102_3120_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:42:41

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 1.0027046203613281 seconds
Number of tilings expanded by Set 1 is 36
Number of tilings expanded by Set 2 is 21
Total number of tilings is 136
Total number of expandable tilings is 133
Total number of verified tilings is 42
Total number of strategy verified tilings is 17
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.04724431037902832 seconds, ~4%
Time spent strategy verifying: 0.011769771575927734 seconds, ~1%
Time spent inferring: 0.43152475357055664 seconds, ~43%
Time spent expanding Set 1: 0.3152964115142822 seconds, ~31%
Time spent expanding Set 2: 0.0269320011138916 seconds, ~2%
Time spent queueing: 0.0014328956604003906 seconds, ~0%
Time spent prepping for tree search: 0.00949239730834961 seconds, ~0%
Time spent searching for tree: 0.02530360221862793 seconds, ~2%
Total of ~83% accounted for.

Proof tree found Mon, 18 Sep 2017 19:42:42

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|4| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 5

+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 6

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "relation": "", "identifier": 23, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av(Perm((1, 0)), Perm((0, 1, 2)))"}, "relation": "| Inserting the right most point in to the cell Cell(i=2, j=1). | ", "identifier": 25, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "| Reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 91, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[2, 1]": "point", "[0, 2]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))"}, "out_tiling": {"[2, 0]": "point", "[3, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=2). | ", "identifier": 134, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 1.0027046203613281 seconds

