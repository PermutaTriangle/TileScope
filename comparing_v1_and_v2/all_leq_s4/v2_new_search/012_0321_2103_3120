012_0321_2103_3120
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:10:30

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.01055145263672 seconds
Number of tilings expanded by Set 1 is 301
Number of tilings expanded by Set 2 is 189
Total number of tilings is 1436
Total number of expandable tilings is 1229
Total number of verified tilings is 341
Total number of strategy verified tilings is 150
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.5140542984008789 seconds, ~1%
Time spent strategy verifying: 0.48450446128845215 seconds, ~1%
Time spent inferring: 7.859717130661011 seconds, ~26%
Time spent expanding Set 1: 11.598514556884766 seconds, ~38%
Time spent expanding Set 2: 0.451937198638916 seconds, ~1%
Time spent queueing: 0.021372318267822266 seconds, ~0%
Time spent prepping for tree search: 1.2642889022827148 seconds, ~4%
Time spent searching for tree: 3.362992286682129 seconds, ~11%
Total of ~82% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:11:00

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.085177183151245 seconds
Number of tilings expanded by Set 1 is 285
Number of tilings expanded by Set 2 is 188
Total number of tilings is 1413
Total number of expandable tilings is 1224
Total number of verified tilings is 340
Total number of strategy verified tilings is 149
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.5180385112762451 seconds, ~1%
Time spent strategy verifying: 0.48676252365112305 seconds, ~1%
Time spent inferring: 7.752219200134277 seconds, ~25%
Time spent expanding Set 1: 11.514080286026001 seconds, ~38%
Time spent expanding Set 2: 0.45108866691589355 seconds, ~1%
Time spent queueing: 0.020523786544799805 seconds, ~0%
Time spent prepping for tree search: 1.2592947483062744 seconds, ~4%
Time spent searching for tree: 3.1136765480041504 seconds, ~10%
Total of ~80% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:11:30

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.062662363052368 seconds
Number of tilings expanded by Set 1 is 311
Number of tilings expanded by Set 2 is 112
Total number of tilings is 593
Total number of expandable tilings is 545
Total number of verified tilings is 65
Total number of strategy verified tilings is 41
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.3041372299194336 seconds, ~1%
Time spent strategy verifying: 0.04229378700256348 seconds, ~0%
Time spent inferring: 9.113585948944092 seconds, ~30%
Time spent expanding Set 1: 18.416109323501587 seconds, ~61%
Time spent expanding Set 2: 0.11987757682800293 seconds, ~0%
Time spent queueing: 0.01642155647277832 seconds, ~0%
Time spent prepping for tree search: 0.4933497905731201 seconds, ~1%
Time spent searching for tree: 0.9166843891143799 seconds, ~3%
Total of ~96% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:12:01

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.309993267059326 seconds
Number of tilings expanded by Set 1 is 312
Number of tilings expanded by Set 2 is 234
Total number of tilings is 1529
Total number of expandable tilings is 1481
Total number of verified tilings is 210
Total number of strategy verified tilings is 91
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 1.108415126800537 seconds, ~3%
Time spent strategy verifying: 0.17357230186462402 seconds, ~0%
Time spent inferring: 16.819607257843018 seconds, ~55%
Time spent expanding Set 1: 5.9438323974609375 seconds, ~19%
Time spent expanding Set 2: 0.4523954391479492 seconds, ~1%
Time spent queueing: 0.021634340286254883 seconds, ~0%
Time spent prepping for tree search: 0.9436488151550293 seconds, ~3%
Time spent searching for tree: 1.7515733242034912 seconds, ~5%
Total of ~86% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:12:31

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.002505779266357 seconds
Number of tilings expanded by Set 1 is 271
Number of tilings expanded by Set 2 is 115
Total number of tilings is 902
Total number of expandable tilings is 858
Total number of verified tilings is 142
Total number of strategy verified tilings is 68
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.0850844383239746 seconds, ~3%
Time spent strategy verifying: 0.10666179656982422 seconds, ~0%
Time spent inferring: 10.026175737380981 seconds, ~33%
Time spent expanding Set 1: 15.646811723709106 seconds, ~52%
Time spent expanding Set 2: 0.18772029876708984 seconds, ~0%
Time spent queueing: 0.018673181533813477 seconds, ~0%
Time spent prepping for tree search: 0.6373684406280518 seconds, ~2%
Time spent searching for tree: 1.4130187034606934 seconds, ~4%
Total of ~94% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:13:01

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.038400173187256 seconds
Number of tilings expanded by Set 1 is 346
Number of tilings expanded by Set 2 is 184
Total number of tilings is 1385
Total number of expandable tilings is 1325
Total number of verified tilings is 262
Total number of strategy verified tilings is 94
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.7995185852050781 seconds, ~5%
Time spent strategy verifying: 0.14233660697937012 seconds, ~0%
Time spent inferring: 16.14285683631897 seconds, ~53%
Time spent expanding Set 1: 6.165622234344482 seconds, ~20%
Time spent expanding Set 2: 0.3310670852661133 seconds, ~1%
Time spent queueing: 0.02295827865600586 seconds, ~0%
Time spent prepping for tree search: 1.1078405380249023 seconds, ~3%
Time spent searching for tree: 2.7305614948272705 seconds, ~9%
Total of ~91% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:13:31

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 1.8029460906982422 seconds
Number of tilings expanded by Set 1 is 39
Number of tilings expanded by Set 2 is 26
Total number of tilings is 131
Total number of expandable tilings is 109
Total number of verified tilings is 76
Total number of strategy verified tilings is 34
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.018016576766967773 seconds, ~0%
Time spent strategy verifying: 0.050566673278808594 seconds, ~2%
Time spent inferring: 0.4277782440185547 seconds, ~23%
Time spent expanding Set 1: 0.9869110584259033 seconds, ~54%
Time spent expanding Set 2: 0.03681826591491699 seconds, ~2%
Time spent queueing: 0.0028793811798095703 seconds, ~0%
Time spent prepping for tree search: 0.015447139739990234 seconds, ~0%
Time spent searching for tree: 0.10371828079223633 seconds, ~5%
Total of ~86% accounted for.

Proof tree found Mon, 18 Sep 2017 15:13:33

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           └─────11
                        └─────12
                              ├─────13
                              └─────14

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))
3: point

Label: 7

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))
3: point

Label: 8

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))
2: point

Label: 9

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))

Label: 10

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))
2: point

Label: 11

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 12

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))
3: point

Label: 13

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 14

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[0, 1]": "point"}, "relation": "", "identifier": 5, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[1, 1]": "point"}, "relation": "", "identifier": 6, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 15, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[1, 1]": "point"}, "relation": "", "identifier": 14, "children": [{"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 29, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 60, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[1, 0]": "point", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 59, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 129, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[4, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[4, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 128, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 1]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[4, 4]": "point", "[2, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=2). | ", "identifier": 31, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[3, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[3, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 52, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 53, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 1.8029460906982422 seconds

