012_1032_1302_2130_3201
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:45:36

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 3.01035737991333 seconds
Number of tilings expanded by Set 1 is 71
Number of tilings expanded by Set 2 is 29
Total number of tilings is 238
Total number of expandable tilings is 204
Total number of verified tilings is 67
Total number of strategy verified tilings is 28
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.07276010513305664 seconds, ~2%
Time spent strategy verifying: 0.04086446762084961 seconds, ~1%
Time spent inferring: 0.8230886459350586 seconds, ~27%
Time spent expanding Set 1: 1.5239486694335938 seconds, ~50%
Time spent expanding Set 2: 0.046767473220825195 seconds, ~1%
Time spent queueing: 0.0037627220153808594 seconds, ~0%
Time spent prepping for tree search: 0.04481697082519531 seconds, ~1%
Time spent searching for tree: 0.12512683868408203 seconds, ~4%
Total of ~86% accounted for.

Proof tree found Mon, 18 Sep 2017 15:45:40

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
3: point

Label: 5

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((0, 1)))

Label: 6

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))

Label: 7

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: point

Label: 8

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 9

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 10

+-+-+-+-+
| | | |1|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 7, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[1, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[2, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 9, "children": [{"formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[0, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[0, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point"}, "relation": "", "identifier": 49, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)))", "[0, 1]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)))", "[0, 1]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[1, 3]": "point"}, "relation": "", "identifier": 54, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 237, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)))", "[3, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[4, 2]": "Av(Perm((0, 1)))", "[0, 3]": "point", "[3, 4]": "point"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=0). | ", "identifier": 51, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 196, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av+(Perm((0, 1)))", "[0, 2]": "point", "[3, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av+(Perm((0, 1)))", "[0, 2]": "point", "[3, 3]": "point"}, "relation": "", "identifier": 198, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 3.01035737991333 seconds

