021_1023_2310
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:08:59

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((2, 3, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 1.2510766983032227 seconds
Number of tilings expanded by Set 1 is 32
Number of tilings expanded by Set 2 is 9
Total number of tilings is 115
Total number of expandable tilings is 84
Total number of verified tilings is 34
Total number of strategy verified tilings is 17
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.04089164733886719 seconds, ~3%
Time spent strategy verifying: 0.03432869911193848 seconds, ~2%
Time spent inferring: 0.4417707920074463 seconds, ~35%
Time spent expanding Set 1: 0.44122767448425293 seconds, ~35%
Time spent expanding Set 2: 0.013194084167480469 seconds, ~1%
Time spent queueing: 0.001271963119506836 seconds, ~0%
Time spent prepping for tree search: 0.008048772811889648 seconds, ~0%
Time spent searching for tree: 0.026418447494506836 seconds, ~2%
Total of ~78% accounted for.

Proof tree found Mon, 18 Sep 2017 18:09:00

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((2, 3, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((2, 3, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 3, 1, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))

Label: 4

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 3, 1, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))

Label: 5

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))

Label: 6

+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((2, 3, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((2, 3, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((2, 3, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 3, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)), Perm((2, 3, 1, 0)))"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 3, 1, 0)))", "[2, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))"}, "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))"}, "relation": "", "identifier": 25, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0))).", "in_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 3, 1, 0)))", "[2, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 3]": "point", "[0, 4]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=0). | ", "identifier": 27, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((1, 0, 2, 3)))"}, "relation": "", "identifier": 106, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 3]": "point", "[0, 4]": "Av(Perm((0, 1)))"}, "out_tiling": {"[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 3]": "point", "[0, 4]": "Av(Perm((0, 1)))"}, "relation": "", "identifier": 108, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 1.2510766983032227 seconds

