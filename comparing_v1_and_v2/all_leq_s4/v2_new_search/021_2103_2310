021_2103_2310
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:09:16

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 1.4835293292999268 seconds
Number of tilings expanded by Set 1 is 32
Number of tilings expanded by Set 2 is 9
Total number of tilings is 109
Total number of expandable tilings is 82
Total number of verified tilings is 38
Total number of strategy verified tilings is 19
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.036327362060546875 seconds, ~2%
Time spent strategy verifying: 0.06113100051879883 seconds, ~4%
Time spent inferring: 0.7003633975982666 seconds, ~47%
Time spent expanding Set 1: 0.43721985816955566 seconds, ~29%
Time spent expanding Set 2: 0.012736797332763672 seconds, ~0%
Time spent queueing: 0.0012197494506835938 seconds, ~0%
Time spent prepping for tree search: 0.007112026214599609 seconds, ~0%
Time spent searching for tree: 0.025193214416503906 seconds, ~1%
Total of ~83% accounted for.

Proof tree found Mon, 18 Sep 2017 18:09:17

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))

Label: 4

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |2| |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))

Label: 5

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))

Label: 6

+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |2| |3| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av(Perm((1, 0)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)))"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)))", "[2, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))"}, "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))"}, "relation": "", "identifier": 25, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((1, 0))).", "in_tiling": {"[1, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 0)))", "[2, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[3, 1]": "Av(Perm((1, 0)))", "[4, 2]": "point", "[0, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=0). | ", "identifier": 27, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))"}, "out_tiling": {"[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0, 3)))"}, "relation": "", "identifier": 101, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)))", "[3, 1]": "Av(Perm((1, 0)))", "[4, 2]": "point", "[0, 3]": "Av(Perm((0, 1)))"}, "out_tiling": {"[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[5, 4]": "Av(Perm((1, 0)))", "[6, 5]": "point", "[0, 6]": "Av(Perm((0, 1)))"}, "relation": "| Inserting the top most point in to the cell Cell(i=1, j=1). | ", "identifier": 103, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 1.4835293292999268 seconds

