012_1302_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:51:49

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.06001329421997 seconds
Number of tilings expanded by Set 1 is 423
Number of tilings expanded by Set 2 is 248
Total number of tilings is 1692
Total number of expandable tilings is 1336
Total number of verified tilings is 255
Total number of strategy verified tilings is 117
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.5388736724853516 seconds, ~1%
Time spent strategy verifying: 0.162841796875 seconds, ~0%
Time spent inferring: 6.789766073226929 seconds, ~22%
Time spent expanding Set 1: 10.577238082885742 seconds, ~35%
Time spent expanding Set 2: 0.5083434581756592 seconds, ~1%
Time spent queueing: 0.03109431266784668 seconds, ~0%
Time spent prepping for tree search: 2.4885950088500977 seconds, ~8%
Time spent searching for tree: 4.246643543243408 seconds, ~14%
Total of ~81% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:52:19

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.021183967590332 seconds
Number of tilings expanded by Set 1 is 443
Number of tilings expanded by Set 2 is 248
Total number of tilings is 1701
Total number of expandable tilings is 1336
Total number of verified tilings is 255
Total number of strategy verified tilings is 117
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.6023850440979004 seconds, ~2%
Time spent strategy verifying: 0.1699810028076172 seconds, ~0%
Time spent inferring: 7.143265008926392 seconds, ~23%
Time spent expanding Set 1: 9.295720338821411 seconds, ~30%
Time spent expanding Set 2: 0.5349500179290771 seconds, ~1%
Time spent queueing: 0.03531289100646973 seconds, ~0%
Time spent prepping for tree search: 2.8199408054351807 seconds, ~9%
Time spent searching for tree: 4.779559135437012 seconds, ~15%
Total of ~80% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:52:49

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.068016529083252 seconds
Number of tilings expanded by Set 1 is 318
Number of tilings expanded by Set 2 is 108
Total number of tilings is 746
Total number of expandable tilings is 692
Total number of verified tilings is 47
Total number of strategy verified tilings is 29
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.42827701568603516 seconds, ~1%
Time spent strategy verifying: 0.025645732879638672 seconds, ~0%
Time spent inferring: 10.803678512573242 seconds, ~35%
Time spent expanding Set 1: 16.29946208000183 seconds, ~54%
Time spent expanding Set 2: 0.15336871147155762 seconds, ~0%
Time spent queueing: 0.01899266242980957 seconds, ~0%
Time spent prepping for tree search: 0.5781548023223877 seconds, ~1%
Time spent searching for tree: 0.815373420715332 seconds, ~2%
Total of ~93% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:53:19

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.00751233100891 seconds
Number of tilings expanded by Set 1 is 351
Number of tilings expanded by Set 2 is 197
Total number of tilings is 1292
Total number of expandable tilings is 1231
Total number of verified tilings is 80
Total number of strategy verified tilings is 51
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.7870805263519287 seconds, ~2%
Time spent strategy verifying: 0.07007908821105957 seconds, ~0%
Time spent inferring: 19.638055086135864 seconds, ~65%
Time spent expanding Set 1: 4.8478827476501465 seconds, ~16%
Time spent expanding Set 2: 0.33306288719177246 seconds, ~1%
Time spent queueing: 0.02077198028564453 seconds, ~0%
Time spent prepping for tree search: 0.9283370971679688 seconds, ~3%
Time spent searching for tree: 1.238664150238037 seconds, ~4%
Total of ~91% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:53:49

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.165011882781982 seconds
Number of tilings expanded by Set 1 is 271
Number of tilings expanded by Set 2 is 117
Total number of tilings is 934
Total number of expandable tilings is 886
Total number of verified tilings is 72
Total number of strategy verified tilings is 42
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 0.9335544109344482 seconds, ~3%
Time spent strategy verifying: 0.04985761642456055 seconds, ~0%
Time spent inferring: 12.576977014541626 seconds, ~41%
Time spent expanding Set 1: 13.588133335113525 seconds, ~45%
Time spent expanding Set 2: 0.1905832290649414 seconds, ~0%
Time spent queueing: 0.014662742614746094 seconds, ~0%
Time spent prepping for tree search: 0.6081297397613525 seconds, ~2%
Time spent searching for tree: 1.047865867614746 seconds, ~3%
Total of ~94% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:54:19

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.03963303565979 seconds
Number of tilings expanded by Set 1 is 373
Number of tilings expanded by Set 2 is 157
Total number of tilings is 1206
Total number of expandable tilings is 1137
Total number of verified tilings is 105
Total number of strategy verified tilings is 56
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.2127678394317627 seconds, ~4%
Time spent strategy verifying: 0.0685577392578125 seconds, ~0%
Time spent inferring: 18.936161518096924 seconds, ~63%
Time spent expanding Set 1: 5.016456127166748 seconds, ~16%
Time spent expanding Set 2: 0.2803778648376465 seconds, ~0%
Time spent queueing: 0.020435333251953125 seconds, ~0%
Time spent prepping for tree search: 1.0858690738677979 seconds, ~3%
Time spent searching for tree: 1.7592148780822754 seconds, ~5%
Total of ~91% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:54:49

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 2.7210609912872314 seconds
Number of tilings expanded by Set 1 is 72
Number of tilings expanded by Set 2 is 46
Total number of tilings is 327
Total number of expandable tilings is 194
Total number of verified tilings is 171
Total number of strategy verified tilings is 70
Total number of empty tilings is 2
There were 0 cache misses

Time spent equivalent expanding: 0.04707026481628418 seconds, ~1%
Time spent strategy verifying: 0.0607602596282959 seconds, ~2%
Time spent inferring: 0.6079535484313965 seconds, ~22%
Time spent expanding Set 1: 1.0961182117462158 seconds, ~40%
Time spent expanding Set 2: 0.05785226821899414 seconds, ~2%
Time spent queueing: 0.007966279983520508 seconds, ~0%
Time spent prepping for tree search: 0.08373832702636719 seconds, ~3%
Time spent searching for tree: 0.5002174377441406 seconds, ~18%
Total of ~88% accounted for.

Proof tree found Mon, 18 Sep 2017 14:54:52

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           │           ├─────13
                        │           │           └─────14
                        │           └─────15
                        └─────16
                              ├─────17
                              └─────18
                                    ├─────19
                                    └─────20

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))
3: point

Label: 7

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))
3: point

Label: 8

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))
2: point

Label: 9

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: point

Label: 10

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 11

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 12

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 13

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point

Label: 14

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | |2|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 15

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 16

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|1| | |2|
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 17

+-+-+-+
| |2| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 18

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|1| | |2|
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 19

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 20

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[0, 1]": "point"}, "relation": "", "identifier": 5, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "relation": "", "identifier": 6, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 15, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "relation": "", "identifier": 14, "children": [{"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 29, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 57, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the minimum point into row 0", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 56, "children": [{"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[3, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[3, 3]": "point"}, "relation": "", "identifier": 115, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 212, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 1", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[3, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[3, 3]": "point"}, "relation": "", "identifier": 211, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[1, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "point", "[4, 1]": "point", "[1, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "relation": "", "identifier": 264, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "relation": "", "identifier": 326, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[4, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 4]": "point", "[2, 5]": "point"}, "relation": "", "identifier": 123, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[2, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[2, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 30, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 61, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the minimum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[2, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[2, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 60, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point", "[3, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point", "[3, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 128, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 130, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 2.7210609912872314 seconds

