021_120_0123_1023_2013_2103_3012_3102
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:58:53

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.1000063419342041 seconds
Number of tilings expanded by Set 1 is 6
Number of tilings expanded by Set 2 is 2
Total number of tilings is 19
Total number of expandable tilings is 19
Total number of verified tilings is 19
Total number of strategy verified tilings is 5
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.009497404098510742 seconds, ~9%
Time spent strategy verifying: 0.003473043441772461 seconds, ~3%
Time spent inferring: 0.05700278282165527 seconds, ~56%
Time spent expanding Set 1: 0.028977632522583008 seconds, ~28%
Time spent expanding Set 2: 0.0015897750854492188 seconds, ~1%
Time spent queueing: 0.00025463104248046875 seconds, ~0%
Time spent prepping for tree search: 0.00028133392333984375 seconds, ~0%
Time spent searching for tree: 0.0009057521820068359 seconds, ~0%
Total of ~97% accounted for.

Proof tree found Mon, 18 Sep 2017 19:58:53

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
2: point

Label: 4

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((2, 0, 1, 3)), Perm((2, 1, 0, 3)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 7, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 9, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.1000063419342041 seconds

