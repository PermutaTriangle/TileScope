012_3120_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:02:24

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.060760498046875 seconds
Number of tilings expanded by Set 1 is 336
Number of tilings expanded by Set 2 is 221
Total number of tilings is 1852
Total number of expandable tilings is 1501
Total number of verified tilings is 104
Total number of strategy verified tilings is 55
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.5676772594451904 seconds, ~1%
Time spent strategy verifying: 0.07633042335510254 seconds, ~0%
Time spent inferring: 8.083433866500854 seconds, ~26%
Time spent expanding Set 1: 10.356668472290039 seconds, ~34%
Time spent expanding Set 2: 0.5641114711761475 seconds, ~1%
Time spent queueing: 0.02608799934387207 seconds, ~0%
Time spent prepping for tree search: 1.927643060684204 seconds, ~6%
Time spent searching for tree: 2.5714271068573 seconds, ~8%
Total of ~76% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:02:54

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.018786430358887 seconds
Number of tilings expanded by Set 1 is 350
Number of tilings expanded by Set 2 is 239
Total number of tilings is 1934
Total number of expandable tilings is 1568
Total number of verified tilings is 110
Total number of strategy verified tilings is 61
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.5100672245025635 seconds, ~1%
Time spent strategy verifying: 0.0839083194732666 seconds, ~0%
Time spent inferring: 8.28463077545166 seconds, ~27%
Time spent expanding Set 1: 9.58265495300293 seconds, ~31%
Time spent expanding Set 2: 0.5682532787322998 seconds, ~1%
Time spent queueing: 0.02233147621154785 seconds, ~0%
Time spent prepping for tree search: 2.1820626258850098 seconds, ~7%
Time spent searching for tree: 2.916808605194092 seconds, ~9%
Total of ~76% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:03:24

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.133095502853394 seconds
Number of tilings expanded by Set 1 is 348
Number of tilings expanded by Set 2 is 115
Total number of tilings is 853
Total number of expandable tilings is 716
Total number of verified tilings is 40
Total number of strategy verified tilings is 24
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.3280797004699707 seconds, ~1%
Time spent strategy verifying: 0.015906572341918945 seconds, ~0%
Time spent inferring: 10.987939834594727 seconds, ~36%
Time spent expanding Set 1: 15.630717515945435 seconds, ~51%
Time spent expanding Set 2: 0.137528657913208 seconds, ~0%
Time spent queueing: 0.014170169830322266 seconds, ~0%
Time spent prepping for tree search: 0.7055933475494385 seconds, ~2%
Time spent searching for tree: 0.9673943519592285 seconds, ~3%
Total of ~93% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:03:55

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.24427342414856 seconds
Number of tilings expanded by Set 1 is 358
Number of tilings expanded by Set 2 is 164
Total number of tilings is 1201
Total number of expandable tilings is 1064
Total number of verified tilings is 54
Total number of strategy verified tilings is 38
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.673663854598999 seconds, ~2%
Time spent strategy verifying: 0.0456845760345459 seconds, ~0%
Time spent inferring: 17.761732578277588 seconds, ~58%
Time spent expanding Set 1: 6.903972864151001 seconds, ~22%
Time spent expanding Set 2: 0.27872776985168457 seconds, ~0%
Time spent queueing: 0.020500898361206055 seconds, ~0%
Time spent prepping for tree search: 0.9420616626739502 seconds, ~3%
Time spent searching for tree: 1.2365405559539795 seconds, ~4%
Total of ~89% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:04:25

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.15787959098816 seconds
Number of tilings expanded by Set 1 is 281
Number of tilings expanded by Set 2 is 118
Total number of tilings is 1044
Total number of expandable tilings is 929
Total number of verified tilings is 62
Total number of strategy verified tilings is 39
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.0948634147644043 seconds, ~3%
Time spent strategy verifying: 0.0496373176574707 seconds, ~0%
Time spent inferring: 12.51914358139038 seconds, ~41%
Time spent expanding Set 1: 12.66720199584961 seconds, ~42%
Time spent expanding Set 2: 0.19337010383605957 seconds, ~0%
Time spent queueing: 0.0169832706451416 seconds, ~0%
Time spent prepping for tree search: 0.7436745166778564 seconds, ~2%
Time spent searching for tree: 1.162278413772583 seconds, ~3%
Total of ~91% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:04:55

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.26839828491211 seconds
Number of tilings expanded by Set 1 is 352
Number of tilings expanded by Set 2 is 138
Total number of tilings is 1229
Total number of expandable tilings is 1093
Total number of verified tilings is 68
Total number of strategy verified tilings is 42
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.5416290760040283 seconds, ~5%
Time spent strategy verifying: 0.05765676498413086 seconds, ~0%
Time spent inferring: 16.767653226852417 seconds, ~55%
Time spent expanding Set 1: 6.7266974449157715 seconds, ~22%
Time spent expanding Set 2: 0.2597794532775879 seconds, ~0%
Time spent queueing: 0.02353215217590332 seconds, ~0%
Time spent prepping for tree search: 1.1400246620178223 seconds, ~3%
Time spent searching for tree: 1.8992385864257812 seconds, ~6%
Total of ~91% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:05:26

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 3.810154676437378 seconds
Number of tilings expanded by Set 1 is 100
Number of tilings expanded by Set 2 is 54
Total number of tilings is 468
Total number of expandable tilings is 218
Total number of verified tilings is 181
Total number of strategy verified tilings is 70
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.044559478759765625 seconds, ~1%
Time spent strategy verifying: 0.07182884216308594 seconds, ~1%
Time spent inferring: 0.9508099555969238 seconds, ~24%
Time spent expanding Set 1: 1.0009675025939941 seconds, ~26%
Time spent expanding Set 2: 0.06912922859191895 seconds, ~1%
Time spent queueing: 0.009516477584838867 seconds, ~0%
Time spent prepping for tree search: 0.1941518783569336 seconds, ~5%
Time spent searching for tree: 0.7729952335357666 seconds, ~20%
Total of ~78% accounted for.

Proof tree found Mon, 18 Sep 2017 15:05:29

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     │           ├─────9
                  │     │           │     ├─────10
                  │     │           │     └─────11
                  │     │           └─────12
                  │     │                 ├─────13
                  │     │                 └─────14
                  │     └─────15
                  │           ├─────16
                  │           │     ├─────17
                  │           │     └─────18
                  │           │           ├─────19
                  │           │           └─────20
                  │           └─────21
                  │                 ├─────22
                  │                 │     ├─────23
                  │                 │     └─────24
                  │                 └─────25
                  │                       ├─────26
                  │                       └─────27
                  └─────28

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: point

Label: 5

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: point

Label: 6

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: point

Label: 7

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))
2: point

Label: 8

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point

Label: 9

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 10

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 11

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point

Label: 12

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 13

+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 14

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 15

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
4: point

Label: 16

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point

Label: 17

+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: point

Label: 18

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 19

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 20

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point

Label: 21

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))
4: point

Label: 22

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|1| | |2|
+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 23

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 24

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 25

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|3| | | | |2|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 26

+-+
|1|
+-+
1: point

Label: 27

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 28

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 10, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 11, "children": [{"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 21, "children": [{"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 37, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 70, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 69, "children": [{"formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 2]": "point", "[1, 3]": "point", "[0, 4]": "point", "[3, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=4, j=1). | ", "identifier": 191, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "point", "[1, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "point", "[1, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "relation": "", "identifier": 461, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[4, 1]": "point", "[1, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[4, 1]": "point", "[1, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 462, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[6, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 4]": "point", "[0, 5]": "point", "[3, 6]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=1, j=1). | ", "identifier": 193, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "relation": "", "identifier": 463, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[3, 5]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[5, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[0, 4]": "point", "[3, 5]": "point"}, "relation": "", "identifier": 464, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[4, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[4, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 38, "children": [{"formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[4, 3]": "point", "[2, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | ", "identifier": 78, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 1]": "point", "[1, 2]": "point"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 202, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 3]": "point", "[1, 4]": "point"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=0, j=1). | Inserting the top most point in to the cell Cell(i=2, j=0). | ", "identifier": 198, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 324, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[2, 1]": "point", "[0, 2]": "point", "[4, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[2, 1]": "point", "[0, 2]": "point", "[4, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 323, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[4, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[4, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 77, "children": [{"formal_step": "Placing the minimum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[2, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[2, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 201, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point", "[3, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point", "[3, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 338, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 339, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=5, j=2)]", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[5, 2]": "point", "[4, 3]": "point", "[1, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | ", "identifier": 214, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "relation": "", "identifier": 6, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "recurse", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 198, "children": [], "recurse": "[]", "strategy_verified": false}], "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=4): Cell(i=1, j=4), Cell(i=2, j=1): Cell(i=2, j=1), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=4, j=3): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=5, j=2)}]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 25, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 3.810154676437378 seconds

