021_0123_1230_2103_2310_3012_3120_3201
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:04:50

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 1.780731201171875 seconds
Number of tilings expanded by Set 1 is 72
Number of tilings expanded by Set 2 is 37
Total number of tilings is 218
Total number of expandable tilings is 201
Total number of verified tilings is 69
Total number of strategy verified tilings is 21
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.07740545272827148 seconds, ~4%
Time spent strategy verifying: 0.01835918426513672 seconds, ~1%
Time spent inferring: 0.6407225131988525 seconds, ~35%
Time spent expanding Set 1: 0.566960334777832 seconds, ~31%
Time spent expanding Set 2: 0.0500335693359375 seconds, ~2%
Time spent queueing: 0.003632068634033203 seconds, ~0%
Time spent prepping for tree search: 0.04448676109313965 seconds, ~2%
Time spent searching for tree: 0.08743596076965332 seconds, ~4%
Total of ~79% accounted for.

Proof tree found Mon, 18 Sep 2017 19:04:51

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0, 3)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0, 3)))
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)))
3: point

Label: 5

+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((1, 0)), Perm((0, 1, 2)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 6

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((1, 0)), Perm((0, 1, 2)))
2: point

Label: 7

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point

Label: 8

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)))
3: point
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0, 3)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0, 3))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0, 3)))", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 13, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0, 3)))", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[0, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | ", "identifier": 15, "children": [{"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=2). | Reverse of: Inserting the top most point in to the cell Cell(i=3, j=0). | ", "identifier": 94, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 216, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 215, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 0]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[0, 2]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0, 3)))", "[0, 1]": "point"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=1, j=0). | ", "identifier": 116, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 1.780731201171875 seconds

