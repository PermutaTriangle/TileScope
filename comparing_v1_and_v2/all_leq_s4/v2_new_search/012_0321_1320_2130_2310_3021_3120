012_0321_1320_2130_2310_3021_3120
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 16:54:49

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 5.45470666885376 seconds
Number of tilings expanded by Set 1 is 153
Number of tilings expanded by Set 2 is 48
Total number of tilings is 404
Total number of expandable tilings is 273
Total number of verified tilings is 88
Total number of strategy verified tilings is 45
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.08857583999633789 seconds, ~1%
Time spent strategy verifying: 0.06148791313171387 seconds, ~1%
Time spent inferring: 1.179729700088501 seconds, ~21%
Time spent expanding Set 1: 2.7823872566223145 seconds, ~51%
Time spent expanding Set 2: 0.07350850105285645 seconds, ~1%
Time spent queueing: 0.008213281631469727 seconds, ~0%
Time spent prepping for tree search: 0.19952678680419922 seconds, ~3%
Time spent searching for tree: 0.49600791931152344 seconds, ~9%
Total of ~87% accounted for.

Proof tree found Mon, 18 Sep 2017 16:54:54

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: point
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 5

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 6

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2)))
2: point

Label: 7

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 8

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 9

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 10

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 1, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 7, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[3, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 9, "children": [{"formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "relation": "", "identifier": 48, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 244, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 245, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)))", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[4, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[5, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | ", "identifier": 50, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 4]": "point"}, "relation": "", "identifier": 401, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[4, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[4, 2]": "point", "[0, 3]": "point", "[3, 4]": "point"}, "relation": "", "identifier": 402, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 5.45470666885376 seconds

