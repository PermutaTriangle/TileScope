021_1203_2103_2130_3012_3102_3201
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:51:46

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.11003255844116211 seconds
Number of tilings expanded by Set 1 is 6
Number of tilings expanded by Set 2 is 2
Total number of tilings is 19
Total number of expandable tilings is 19
Total number of verified tilings is 14
Total number of strategy verified tilings is 4
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.009114980697631836 seconds, ~8%
Time spent strategy verifying: 0.004795551300048828 seconds, ~4%
Time spent inferring: 0.059105634689331055 seconds, ~53%
Time spent expanding Set 1: 0.02923583984375 seconds, ~26%
Time spent expanding Set 2: 0.0014138221740722656 seconds, ~1%
Time spent queueing: 0.0002224445343017578 seconds, ~0%
Time spent prepping for tree search: 0.00026535987854003906 seconds, ~0%
Time spent searching for tree: 0.0010139942169189453 seconds, ~0%
Total of ~92% accounted for.

Proof tree found Mon, 18 Sep 2017 18:51:46

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((3, 0, 1, 2)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((3, 0, 1, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))
2: Av(Perm((1, 0)))
3: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((3, 0, 1, 2)), Perm((3, 1, 0, 2)), Perm((3, 2, 0, 1)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((3, 0, 1, 2)))", "[1, 2]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "relation": "", "identifier": 13, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))", "[0, 1]": "Av(Perm((1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))", "[0, 1]": "Av(Perm((1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 15, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.11003255844116211 seconds

