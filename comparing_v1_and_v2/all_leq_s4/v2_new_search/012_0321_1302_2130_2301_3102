012_0321_1302_2130_2301_3102
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 16:05:49

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 5.705323934555054 seconds
Number of tilings expanded by Set 1 is 138
Number of tilings expanded by Set 2 is 45
Total number of tilings is 326
Total number of expandable tilings is 307
Total number of verified tilings is 121
Total number of strategy verified tilings is 47
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.12688565254211426 seconds, ~2%
Time spent strategy verifying: 0.09546446800231934 seconds, ~1%
Time spent inferring: 1.3033554553985596 seconds, ~22%
Time spent expanding Set 1: 3.2569944858551025 seconds, ~57%
Time spent expanding Set 2: 0.0772557258605957 seconds, ~1%
Time spent queueing: 0.007534980773925781 seconds, ~0%
Time spent prepping for tree search: 0.1026909351348877 seconds, ~1%
Time spent searching for tree: 0.3085505962371826 seconds, ~5%
Total of ~89% accounted for.

Proof tree found Mon, 18 Sep 2017 16:05:55

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     └─────9
                  └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |2| | |2| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))

Label: 5

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))

Label: 6

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 7

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 8

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point

Label: 9

+-+-+-+-+
|1| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))
2: point

Label: 10

+-+-+-+-+
| |3| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "relation": "", "identifier": 15, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[3, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))", "[0, 3]": "point", "[1, 4]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 4]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=1). | ", "identifier": 17, "children": [{"formal_step": "We perform cell insertion into cell (3, 4); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[2, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))", "[0, 3]": "point", "[3, 4]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[2, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))", "[0, 3]": "point", "[3, 4]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "relation": "", "identifier": 31, "children": [{"formal_step": "We perform cell insertion into cell (5, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 1)))", "[0, 3]": "point", "[3, 4]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[2, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 1)))", "[0, 3]": "point", "[4, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=3, j=4). | ", "identifier": 43, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 4]": "point"}, "relation": "", "identifier": 324, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 325, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))", "[0, 3]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)))", "[0, 1]": "point"}, "relation": "| Reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | ", "identifier": 108, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[1, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[1, 3]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "relation": "", "identifier": 33, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 5.705323934555054 seconds

