021_1203_2103_2310_3102_3120_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:15:52

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 1.4972927570343018 seconds
Number of tilings expanded by Set 1 is 36
Number of tilings expanded by Set 2 is 20
Total number of tilings is 152
Total number of expandable tilings is 140
Total number of verified tilings is 47
Total number of strategy verified tilings is 22
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.07323408126831055 seconds, ~4%
Time spent strategy verifying: 0.03780961036682129 seconds, ~2%
Time spent inferring: 0.5940420627593994 seconds, ~39%
Time spent expanding Set 1: 0.47309017181396484 seconds, ~31%
Time spent expanding Set 2: 0.02916693687438965 seconds, ~1%
Time spent queueing: 0.0020613670349121094 seconds, ~0%
Time spent prepping for tree search: 0.012906789779663086 seconds, ~0%
Time spent searching for tree: 0.03781771659851074 seconds, ~2%
Total of ~79% accounted for.

Proof tree found Mon, 18 Sep 2017 19:15:53

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: Av(Perm((1, 0)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((1, 0)))

Label: 5

+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((1, 0)))
2: point

Label: 6

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 1, 0, 3)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))"}, "relation": "", "identifier": 23, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((1, 0)))", "[2, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av(Perm((1, 0)))"}, "relation": "| Inserting the top most point in to the cell Cell(i=2, j=1). | ", "identifier": 25, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((1, 0)))", "[0, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point"}, "relation": "| Reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | Inserting the left most point in to the cell Cell(i=0, j=0). | ", "identifier": 110, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[2, 0]": "Av+(Perm((1, 0)))", "[3, 1]": "point", "[0, 2]": "Av(Perm((1, 0)))", "[1, 3]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=3). | Reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=0). | ", "identifier": 120, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 1.4972927570343018 seconds

