012_1032_1320_2130_2301
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:46:16

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 3.5136356353759766 seconds
Number of tilings expanded by Set 1 is 83
Number of tilings expanded by Set 2 is 29
Total number of tilings is 232
Total number of expandable tilings is 190
Total number of verified tilings is 76
Total number of strategy verified tilings is 34
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.0531611442565918 seconds, ~1%
Time spent strategy verifying: 0.07250761985778809 seconds, ~2%
Time spent inferring: 0.7773542404174805 seconds, ~22%
Time spent expanding Set 1: 2.007802724838257 seconds, ~57%
Time spent expanding Set 2: 0.042577505111694336 seconds, ~1%
Time spent queueing: 0.003513813018798828 seconds, ~0%
Time spent prepping for tree search: 0.05406951904296875 seconds, ~1%
Time spent searching for tree: 0.15493059158325195 seconds, ~4%
Total of ~88% accounted for.

Proof tree found Mon, 18 Sep 2017 15:46:20

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 7

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 8

+-+-+-+-+
| | |1| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[0, 1]": "point"}, "relation": "", "identifier": 7, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[1, 1]": "point"}, "relation": "", "identifier": 9, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "point"}, "relation": "", "identifier": 89, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the minimum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[1, 1]": "point"}, "relation": "", "identifier": 88, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 4]": "point"}, "relation": "", "identifier": 82, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=3, j=1). | ", "identifier": 230, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 3.5136356353759766 seconds

