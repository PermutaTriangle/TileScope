012_0321_1320_2130_3102_3120_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 17:26:32

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 3.1126842498779297 seconds
Number of tilings expanded by Set 1 is 150
Number of tilings expanded by Set 2 is 46
Total number of tilings is 312
Total number of expandable tilings is 247
Total number of verified tilings is 76
Total number of strategy verified tilings is 39
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.06021618843078613 seconds, ~1%
Time spent strategy verifying: 0.035596609115600586 seconds, ~1%
Time spent inferring: 0.8067269325256348 seconds, ~25%
Time spent expanding Set 1: 1.3218629360198975 seconds, ~42%
Time spent expanding Set 2: 0.056694746017456055 seconds, ~1%
Time spent queueing: 0.00470280647277832 seconds, ~0%
Time spent prepping for tree search: 0.11584186553955078 seconds, ~3%
Time spent searching for tree: 0.3320932388305664 seconds, ~10%
Total of ~83% accounted for.

Proof tree found Mon, 18 Sep 2017 17:26:35

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 5

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 6

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
2: point

Label: 7

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 8

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 9

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point

Label: 10

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)), Perm((3, 1, 0, 2)), Perm((3, 1, 2, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 7, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | ", "identifier": 9, "children": [{"formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "relation": "", "identifier": 43, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 200, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 201, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[4, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[5, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | ", "identifier": 45, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 303, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "point", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 4]": "point"}, "relation": "", "identifier": 310, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 3.1126842498779297 seconds

