012_2301_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:58:40

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.00675129890442 seconds
Number of tilings expanded by Set 1 is 437
Number of tilings expanded by Set 2 is 247
Total number of tilings is 1936
Total number of expandable tilings is 1360
Total number of verified tilings is 213
Total number of strategy verified tilings is 111
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.587188720703125 seconds, ~1%
Time spent strategy verifying: 0.14832496643066406 seconds, ~0%
Time spent inferring: 7.046421527862549 seconds, ~23%
Time spent expanding Set 1: 8.838716983795166 seconds, ~29%
Time spent expanding Set 2: 0.4983196258544922 seconds, ~1%
Time spent queueing: 0.030773401260375977 seconds, ~0%
Time spent prepping for tree search: 2.6634535789489746 seconds, ~8%
Time spent searching for tree: 5.0349695682525635 seconds, ~16%
Total of ~78% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:59:10

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.00963306427002 seconds
Number of tilings expanded by Set 1 is 438
Number of tilings expanded by Set 2 is 249
Total number of tilings is 1942
Total number of expandable tilings is 1366
Total number of verified tilings is 214
Total number of strategy verified tilings is 112
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.5658137798309326 seconds, ~1%
Time spent strategy verifying: 0.15335631370544434 seconds, ~0%
Time spent inferring: 6.925980806350708 seconds, ~23%
Time spent expanding Set 1: 7.94403862953186 seconds, ~26%
Time spent expanding Set 2: 0.49202394485473633 seconds, ~1%
Time spent queueing: 0.027132511138916016 seconds, ~0%
Time spent prepping for tree search: 2.971123695373535 seconds, ~9%
Time spent searching for tree: 5.572945594787598 seconds, ~18%
Total of ~78% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:59:40

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.01204013824463 seconds
Number of tilings expanded by Set 1 is 320
Number of tilings expanded by Set 2 is 113
Total number of tilings is 714
Total number of expandable tilings is 672
Total number of verified tilings is 40
Total number of strategy verified tilings is 24
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.35020875930786133 seconds, ~1%
Time spent strategy verifying: 0.014603853225708008 seconds, ~0%
Time spent inferring: 11.884877681732178 seconds, ~39%
Time spent expanding Set 1: 15.34137749671936 seconds, ~51%
Time spent expanding Set 2: 0.14542698860168457 seconds, ~0%
Time spent queueing: 0.01663947105407715 seconds, ~0%
Time spent prepping for tree search: 0.5572235584259033 seconds, ~1%
Time spent searching for tree: 0.7598364353179932 seconds, ~2%
Total of ~94% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:00:10

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.08334493637085 seconds
Number of tilings expanded by Set 1 is 334
Number of tilings expanded by Set 2 is 226
Total number of tilings is 1419
Total number of expandable tilings is 1376
Total number of verified tilings is 71
Total number of strategy verified tilings is 49
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.7985401153564453 seconds, ~2%
Time spent strategy verifying: 0.06680989265441895 seconds, ~0%
Time spent inferring: 19.8055362701416 seconds, ~65%
Time spent expanding Set 1: 4.215609788894653 seconds, ~14%
Time spent expanding Set 2: 0.3759140968322754 seconds, ~1%
Time spent queueing: 0.018355131149291992 seconds, ~0%
Time spent prepping for tree search: 0.9491851329803467 seconds, ~3%
Time spent searching for tree: 1.2130606174468994 seconds, ~4%
Total of ~89% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:00:40

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.144277572631836 seconds
Number of tilings expanded by Set 1 is 274
Number of tilings expanded by Set 2 is 120
Total number of tilings is 938
Total number of expandable tilings is 891
Total number of verified tilings is 65
Total number of strategy verified tilings is 41
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 0.8446900844573975 seconds, ~2%
Time spent strategy verifying: 0.04653477668762207 seconds, ~0%
Time spent inferring: 12.454993724822998 seconds, ~41%
Time spent expanding Set 1: 13.710367202758789 seconds, ~45%
Time spent expanding Set 2: 0.17954802513122559 seconds, ~0%
Time spent queueing: 0.011571407318115234 seconds, ~0%
Time spent prepping for tree search: 0.5888032913208008 seconds, ~1%
Time spent searching for tree: 1.0730595588684082 seconds, ~3%
Total of ~92% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:01:10

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.038820028305054 seconds
Number of tilings expanded by Set 1 is 356
Number of tilings expanded by Set 2 is 174
Total number of tilings is 1300
Total number of expandable tilings is 1247
Total number of verified tilings is 94
Total number of strategy verified tilings is 54
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.3270032405853271 seconds, ~4%
Time spent strategy verifying: 0.06354475021362305 seconds, ~0%
Time spent inferring: 18.934988498687744 seconds, ~63%
Time spent expanding Set 1: 4.483858346939087 seconds, ~14%
Time spent expanding Set 2: 0.3089008331298828 seconds, ~1%
Time spent queueing: 0.0177462100982666 seconds, ~0%
Time spent prepping for tree search: 1.0665113925933838 seconds, ~3%
Time spent searching for tree: 1.7941458225250244 seconds, ~5%
Total of ~90% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:01:41

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 5.389150619506836 seconds
Number of tilings expanded by Set 1 is 110
Number of tilings expanded by Set 2 is 55
Total number of tilings is 532
Total number of expandable tilings is 250
Total number of verified tilings is 211
Total number of strategy verified tilings is 71
Total number of empty tilings is 6
There were 0 cache misses

Time spent equivalent expanding: 0.11918330192565918 seconds, ~2%
Time spent strategy verifying: 0.07094478607177734 seconds, ~1%
Time spent inferring: 1.1734569072723389 seconds, ~21%
Time spent expanding Set 1: 2.1446709632873535 seconds, ~39%
Time spent expanding Set 2: 0.07685422897338867 seconds, ~1%
Time spent queueing: 0.011517763137817383 seconds, ~0%
Time spent prepping for tree search: 0.18157386779785156 seconds, ~3%
Time spent searching for tree: 0.9539468288421631 seconds, ~17%
Total of ~84% accounted for.

Proof tree found Mon, 18 Sep 2017 15:01:46

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     │           ├─────11
                        │     │           │     ├─────12
                        │     │           │     └─────13
                        │     │           │           ├─────14
                        │     │           │           └─────15
                        │     │           └─────16
                        │     └─────17
                        │           ├─────18
                        │           └─────19
                        │                 ├─────20
                        │                 └─────21
                        └─────22
                              ├─────23
                              │     ├─────24
                              │     │     ├─────25
                              │     │     └─────26
                              │     │           ├─────27
                              │     │           └─────28
                              │     └─────29
                              └─────30

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))
3: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))
3: Av(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))
3: Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))

Label: 7

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))
4: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 8

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((1, 0)), Perm((0, 1, 2)))

Label: 9

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 10

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av+(Perm((1, 0)), Perm((0, 1, 2)))

Label: 11

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 14

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 15

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point

Label: 16

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 17

+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 18

+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 19

+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 20

+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 21

+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 22

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 23

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 24

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 25

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 26

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 27

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))

Label: 28

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 29

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 30

+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1)), Perm((2, 1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))", "[2, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 9, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))", "[2, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))", "[2, 1]": "Av(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 10, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))"}, "relation": "", "identifier": 22, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 1", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))", "[2, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))", "[2, 1]": "Av+(Perm((0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 21, "children": [{"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 33, "children": [{"formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 54, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 3]": "point"}, "relation": "", "identifier": 110, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 1", "in_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 2]": "point"}, "relation": "", "identifier": 109, "children": [{"formal_step": "Reversibly delete the blocks at cells [Cell(i=6, j=4)]", "in_tiling": {"[4, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[5, 3]": "point", "[3, 4]": "point", "[1, 5]": "point"}, "out_tiling": {"[5, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[6, 4]": "point", "[4, 5]": "point", "[2, 6]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=2). | ", "identifier": 190, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "relation": "", "identifier": 35, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[5, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[4, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[5, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[4, 4]": "point", "[2, 5]": "point"}, "relation": "", "identifier": 196, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[4, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 523, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "point", "[1, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[4, 0]": "point", "[1, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 524, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=3), Cell(i=1, j=2): Cell(i=1, j=2), Cell(i=2, j=5): Cell(i=2, j=6), Cell(i=3, j=1): Cell(i=3, j=1), Cell(i=4, j=4): Cell(i=4, j=5), Cell(i=5, j=0): Cell(i=5, j=0)}, {Cell(i=0, j=0): Cell(i=6, j=4)}]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[2, 1]": "point", "[0, 2]": "point", "[5, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 4]": "point", "[1, 5]": "point"}, "out_tiling": {"[3, 0]": "point", "[2, 1]": "point", "[0, 2]": "point", "[5, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 4]": "point", "[1, 5]": "point"}, "relation": "", "identifier": 189, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point"}, "relation": "", "identifier": 75, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point"}, "relation": "", "identifier": 174, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 1", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point"}, "relation": "", "identifier": 173, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[2, 3]": "point", "[0, 4]": "point"}, "out_tiling": {"[3, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 2]": "point", "[2, 3]": "point", "[0, 4]": "point"}, "relation": "", "identifier": 330, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[0, 3]": "point"}, "relation": "", "identifier": 331, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (3, 1); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point"}, "relation": "", "identifier": 34, "children": [{"formal_step": "Placing the maximum point into row 1", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point"}, "relation": "", "identifier": 46, "children": [{"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[3, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[3, 3]": "point"}, "relation": "", "identifier": 120, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 200, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the minimum point into row 1", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[3, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[4, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 2]": "point", "[3, 3]": "point"}, "relation": "", "identifier": 199, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 3]": "point", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "point", "[4, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 3]": "point", "[3, 4]": "point"}, "relation": "", "identifier": 528, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[5, 1]": "point", "[1, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 4]": "point", "[3, 5]": "point"}, "out_tiling": {"[2, 0]": "point", "[5, 1]": "point", "[1, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 4]": "point", "[3, 5]": "point"}, "relation": "", "identifier": 527, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[4, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 121, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 2]": "point"}, "relation": "", "identifier": 81, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 5.389150619506836 seconds

