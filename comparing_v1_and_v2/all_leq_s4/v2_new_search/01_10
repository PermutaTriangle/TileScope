01_10
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:58:58

Looking for proof tree for Basis((Perm((0, 1)), Perm((1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.0007898807525634766 seconds
Number of tilings expanded by Set 1 is 1
Number of tilings expanded by Set 2 is 1
Total number of tilings is 3
Total number of expandable tilings is 3
Total number of verified tilings is 3
Total number of strategy verified tilings is 2
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 1.7404556274414062e-05 seconds, ~2%
Time spent strategy verifying: 3.981590270996094e-05 seconds, ~5%
Time spent inferring: 0.00010418891906738281 seconds, ~13%
Time spent expanding Set 1: 0.0001952648162841797 seconds, ~24%
Time spent expanding Set 2: 0.0002357959747314453 seconds, ~29%
Time spent queueing: 3.147125244140625e-05 seconds, ~3%
Time spent prepping for tree search: 2.193450927734375e-05 seconds, ~2%
Time spent searching for tree: 0.00011157989501953125 seconds, ~14%
Total of ~92% accounted for.

Proof tree found Mon, 18 Sep 2017 19:58:58

root: 0
      ├─────1
      └─────2

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1)), Perm((1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "relation": "", "identifier": 2, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.0007898807525634766 seconds

