021_2310_3201_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 18:12:52

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 3.4468140602111816 seconds
Number of tilings expanded by Set 1 is 37
Number of tilings expanded by Set 2 is 36
Total number of tilings is 305
Total number of expandable tilings is 283
Total number of verified tilings is 68
Total number of strategy verified tilings is 33
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.16152572631835938 seconds, ~4%
Time spent strategy verifying: 0.09511947631835938 seconds, ~2%
Time spent inferring: 1.4543025493621826 seconds, ~42%
Time spent expanding Set 1: 0.7860333919525146 seconds, ~22%
Time spent expanding Set 2: 0.06083822250366211 seconds, ~1%
Time spent queueing: 0.002902507781982422 seconds, ~0%
Time spent prepping for tree search: 0.028598308563232422 seconds, ~0%
Time spent searching for tree: 0.07384443283081055 seconds, ~2%
Total of ~73% accounted for.

Proof tree found Mon, 18 Sep 2017 18:12:56

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: Av(Perm((1, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|4| | | | |2|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 5

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Label: 6

+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 7

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 8

+-+-+-+-+
| |1| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av(Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 1, 0)), Perm((3, 2, 0, 1)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((1, 0)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))"}, "relation": "", "identifier": 19, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=5, j=4)]", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((1, 0)))"}, "out_tiling": {"[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 3]": "point", "[0, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 4]": "Av(Perm((1, 0)))"}, "relation": "| Inserting the right most point in to the cell Cell(i=0, j=1). | ", "identifier": 21, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "relation": "", "identifier": 47, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((1, 0))).", "in_tiling": {"[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 3]": "point", "[0, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 3]": "point", "[0, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "relation": "", "identifier": 56, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[1, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 2]": "point", "[0, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "relation": "| Reverse of: Inserting the right most point in to the cell Cell(i=0, j=1). | ", "identifier": 194, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[3, 1]": "Av+(Perm((1, 0)))", "[0, 2]": "Av(Perm((1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[3, 1]": "Av+(Perm((1, 0)))", "[0, 2]": "Av(Perm((1, 0)))", "[1, 3]": "point"}, "relation": "", "identifier": 303, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[{Cell(i=0, j=4): Cell(i=0, j=4), Cell(i=1, j=2): Cell(i=1, j=2), Cell(i=2, j=3): Cell(i=2, j=3), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=4, j=1): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=5, j=4)}]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 3.4468140602111816 seconds

