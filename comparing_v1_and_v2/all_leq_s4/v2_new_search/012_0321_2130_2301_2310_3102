012_0321_2130_2301_2310_3102
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 16:15:21

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 8.90256929397583 seconds
Number of tilings expanded by Set 1 is 160
Number of tilings expanded by Set 2 is 50
Total number of tilings is 340
Total number of expandable tilings is 310
Total number of verified tilings is 95
Total number of strategy verified tilings is 42
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.25550127029418945 seconds, ~2%
Time spent strategy verifying: 0.11740517616271973 seconds, ~1%
Time spent inferring: 2.346863031387329 seconds, ~26%
Time spent expanding Set 1: 4.361625909805298 seconds, ~48%
Time spent expanding Set 2: 0.15328383445739746 seconds, ~1%
Time spent queueing: 0.006889820098876953 seconds, ~0%
Time spent prepping for tree search: 0.24205756187438965 seconds, ~2%
Time spent searching for tree: 0.6056563854217529 seconds, ~6%
Total of ~86% accounted for.

Proof tree found Mon, 18 Sep 2017 16:15:30

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point

Label: 5

+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 6

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 7

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point

Label: 8

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)), Perm((3, 1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)), Perm((2, 3, 1, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 7, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 9, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point"}, "relation": "", "identifier": 49, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "Av+(Perm((0, 1)))", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[4, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 3]": "point", "[4, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | ", "identifier": 51, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 325, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[0, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 4]": "point"}, "relation": "", "identifier": 338, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 8.90256929397583 seconds

