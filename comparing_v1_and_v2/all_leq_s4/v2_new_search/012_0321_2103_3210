012_0321_2103_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:13:33

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.02212429046631 seconds
Number of tilings expanded by Set 1 is 387
Number of tilings expanded by Set 2 is 227
Total number of tilings is 1492
Total number of expandable tilings is 1242
Total number of verified tilings is 235
Total number of strategy verified tilings is 122
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.391448974609375 seconds, ~1%
Time spent strategy verifying: 0.1345829963684082 seconds, ~0%
Time spent inferring: 6.365952253341675 seconds, ~21%
Time spent expanding Set 1: 11.541201114654541 seconds, ~38%
Time spent expanding Set 2: 0.5103187561035156 seconds, ~1%
Time spent queueing: 0.02747654914855957 seconds, ~0%
Time spent prepping for tree search: 1.9482474327087402 seconds, ~6%
Time spent searching for tree: 5.048875570297241 seconds, ~16%
Total of ~83% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:14:03

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.092993021011353 seconds
Number of tilings expanded by Set 1 is 418
Number of tilings expanded by Set 2 is 238
Total number of tilings is 1599
Total number of expandable tilings is 1301
Total number of verified tilings is 249
Total number of strategy verified tilings is 125
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.397723913192749 seconds, ~1%
Time spent strategy verifying: 0.1480848789215088 seconds, ~0%
Time spent inferring: 6.666213512420654 seconds, ~22%
Time spent expanding Set 1: 9.472373008728027 seconds, ~31%
Time spent expanding Set 2: 0.5360538959503174 seconds, ~1%
Time spent queueing: 0.028850317001342773 seconds, ~0%
Time spent prepping for tree search: 2.331913709640503 seconds, ~7%
Time spent searching for tree: 5.975540399551392 seconds, ~19%
Total of ~81% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:14:33

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.369098901748657 seconds
Number of tilings expanded by Set 1 is 284
Number of tilings expanded by Set 2 is 140
Total number of tilings is 771
Total number of expandable tilings is 729
Total number of verified tilings is 78
Total number of strategy verified tilings is 51
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.38676929473876953 seconds, ~1%
Time spent strategy verifying: 0.04085516929626465 seconds, ~0%
Time spent inferring: 12.849826574325562 seconds, ~42%
Time spent expanding Set 1: 13.827106237411499 seconds, ~45%
Time spent expanding Set 2: 0.1934354305267334 seconds, ~0%
Time spent queueing: 0.01653122901916504 seconds, ~0%
Time spent prepping for tree search: 0.5123553276062012 seconds, ~1%
Time spent searching for tree: 1.203643560409546 seconds, ~3%
Total of ~92% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:15:04

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.02406334877014 seconds
Number of tilings expanded by Set 1 is 284
Number of tilings expanded by Set 2 is 258
Total number of tilings is 1437
Total number of expandable tilings is 1398
Total number of verified tilings is 137
Total number of strategy verified tilings is 81
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.7798914909362793 seconds, ~2%
Time spent strategy verifying: 0.09861111640930176 seconds, ~0%
Time spent inferring: 18.25510263442993 seconds, ~60%
Time spent expanding Set 1: 4.3812596797943115 seconds, ~14%
Time spent expanding Set 2: 0.49924612045288086 seconds, ~1%
Time spent queueing: 0.025443315505981445 seconds, ~0%
Time spent prepping for tree search: 1.0534634590148926 seconds, ~3%
Time spent searching for tree: 1.906667709350586 seconds, ~6%
Total of ~86% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:15:34

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.174480199813843 seconds
Number of tilings expanded by Set 1 is 280
Number of tilings expanded by Set 2 is 129
Total number of tilings is 930
Total number of expandable tilings is 890
Total number of verified tilings is 113
Total number of strategy verified tilings is 70
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 0.9642283916473389 seconds, ~3%
Time spent strategy verifying: 0.07674884796142578 seconds, ~0%
Time spent inferring: 12.621206760406494 seconds, ~41%
Time spent expanding Set 1: 12.982846975326538 seconds, ~43%
Time spent expanding Set 2: 0.20771050453186035 seconds, ~0%
Time spent queueing: 0.017744064331054688 seconds, ~0%
Time spent prepping for tree search: 0.6641051769256592 seconds, ~2%
Time spent searching for tree: 1.4091603755950928 seconds, ~4%
Total of ~93% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:16:04

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: splittings
Set 2: all_cell_insertions, all_point_isolations

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 30.01959252357483 seconds
Number of tilings expanded by Set 1 is 318
Number of tilings expanded by Set 2 is 188
Total number of tilings is 1325
Total number of expandable tilings is 1278
Total number of verified tilings is 173
Total number of strategy verified tilings is 91
Total number of empty tilings is 1
There were 0 cache misses

Time spent equivalent expanding: 1.4985966682434082 seconds, ~4%
Time spent strategy verifying: 0.09794449806213379 seconds, ~0%
Time spent inferring: 18.312878847122192 seconds, ~61%
Time spent expanding Set 1: 4.667019367218018 seconds, ~15%
Time spent expanding Set 2: 0.3375847339630127 seconds, ~1%
Time spent queueing: 0.021390438079833984 seconds, ~0%
Time spent prepping for tree search: 1.0266444683074951 seconds, ~3%
Time spent searching for tree: 2.1561031341552734 seconds, ~7%
Total of ~91% accounted for.

Exceeded maximum time. Aborting auto search.

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 15:16:34

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 2.471367120742798 seconds
Number of tilings expanded by Set 1 is 55
Number of tilings expanded by Set 2 is 51
Total number of tilings is 292
Total number of expandable tilings is 193
Total number of verified tilings is 154
Total number of strategy verified tilings is 70
Total number of empty tilings is 2
There were 0 cache misses

Time spent equivalent expanding: 0.036530494689941406 seconds, ~1%
Time spent strategy verifying: 0.07102513313293457 seconds, ~2%
Time spent inferring: 0.7155647277832031 seconds, ~28%
Time spent expanding Set 1: 0.9154582023620605 seconds, ~37%
Time spent expanding Set 2: 0.06342458724975586 seconds, ~2%
Time spent queueing: 0.006040334701538086 seconds, ~0%
Time spent prepping for tree search: 0.05927705764770508 seconds, ~2%
Time spent searching for tree: 0.3358161449432373 seconds, ~13%
Total of ~85% accounted for.

Proof tree found Mon, 18 Sep 2017 15:16:37

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           └─────11
                        │                 ├─────12
                        │                 └─────13
                        └─────14
                              ├─────15
                              │     ├─────16
                              │     └─────17
                              └─────18
                                    ├─────19
                                    │     ├─────20
                                    │     └─────21
                                    └─────22

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 7

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
3: point

Label: 8

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))
2: point

Label: 9

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 10

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((1, 0)), Perm((0, 1, 2)))
2: point

Label: 11

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 12

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2)))
2: point

Label: 13

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))

Label: 14

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 15

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 16

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 17

+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point

Label: 18

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))
3: point

Label: 19

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)), Perm((0, 1, 2)))

Label: 20

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((1, 0)), Perm((0, 1, 2)))
2: point

Label: 21

+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((1, 0)))
2: point

Label: 22

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((1, 0)), Perm((0, 1, 2)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 1, 0, 3)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point"}, "relation": "", "identifier": 5, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 6, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 15, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[1, 1]": "point"}, "relation": "", "identifier": 14, "children": [{"formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 29, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[2, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 1, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "relation": "", "identifier": 61, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[1, 0]": "point", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[0, 1]": "point", "[2, 2]": "point"}, "relation": "", "identifier": 60, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[3, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[0, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 165, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 2]": "point", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "relation": "", "identifier": 164, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "point", "[3, 2]": "point", "[0, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 286, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "out_tiling": {"[3, 0]": "point", "[5, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[4, 3]": "point", "[0, 4]": "point", "[2, 5]": "point"}, "relation": "", "identifier": 287, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (5, 0); either it is empty or Av+(Perm((1, 0)), Perm((0, 1, 2))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "point", "[2, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | ", "identifier": 31, "children": [{"formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 64, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 104, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "point", "[3, 2]": "point", "[2, 3]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "point", "[3, 2]": "point", "[2, 3]": "point"}, "relation": "", "identifier": 110, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "in_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[4, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 65, "children": [{"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[2, 0]": "point", "[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "point", "[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "point", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 107, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[2, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[2, 1]": "point", "[0, 2]": "point", "[3, 3]": "point", "[1, 4]": "point"}, "relation": "", "identifier": 201, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[5, 2]": "point", "[0, 3]": "point", "[3, 4]": "point", "[1, 5]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 1]": "point", "[5, 2]": "point", "[0, 3]": "point", "[3, 4]": "point", "[1, 5]": "point"}, "relation": "", "identifier": 200, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[3, 3]": "point", "[2, 4]": "point"}, "out_tiling": {"[4, 0]": "Av+(Perm((1, 0)), Perm((0, 1, 2)))", "[1, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[3, 3]": "point", "[2, 4]": "point"}, "relation": "", "identifier": 168, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 2.471367120742798 seconds

