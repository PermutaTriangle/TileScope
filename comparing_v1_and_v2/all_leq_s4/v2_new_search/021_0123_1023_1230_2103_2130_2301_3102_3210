021_0123_1023_1230_2103_2130_2301_3102_3210
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 19:21:29

Looking for proof tree for Basis((Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 0.7475652694702148 seconds
Number of tilings expanded by Set 1 is 36
Number of tilings expanded by Set 2 is 13
Total number of tilings is 83
Total number of expandable tilings is 83
Total number of verified tilings is 29
Total number of strategy verified tilings is 11
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.03479170799255371 seconds, ~4%
Time spent strategy verifying: 0.008382558822631836 seconds, ~1%
Time spent inferring: 0.27125978469848633 seconds, ~36%
Time spent expanding Set 1: 0.3104414939880371 seconds, ~41%
Time spent expanding Set 2: 0.016352176666259766 seconds, ~2%
Time spent queueing: 0.0013535022735595703 seconds, ~0%
Time spent prepping for tree search: 0.0066449642181396484 seconds, ~0%
Time spent searching for tree: 0.019047975540161133 seconds, ~2%
Total of ~86% accounted for.

Proof tree found Mon, 18 Sep 2017 19:21:30

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)), Perm((2, 1, 0)))
2: Av(Perm((1, 0)), Perm((0, 1, 2)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: point

Label: 5

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((1, 0)), Perm((0, 1, 2)))
2: Av(Perm((0, 1)), Perm((1, 0)))
3: point
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 6

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1)), Perm((2, 1, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| |1| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((0, 1, 2, 3)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 1, 0, 3)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 0, 2)), Perm((3, 2, 1, 0)))"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((0, 1, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[0, 1]": "point"}, "relation": "", "identifier": 7, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1)), Perm((2, 1, 0)))", "[2, 1]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 3]": "point", "[3, 4]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | ", "identifier": 9, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((1, 0)), Perm((0, 1, 2)))", "[0, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[1, 2]": "point", "[3, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 1, 0)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 82, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))", "[0, 1]": "point", "[1, 2]": "point"}, "out_tiling": {"[3, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[0, 2]": "point", "[1, 3]": "point"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=0). | ", "identifier": 71, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 0.7475652694702148 seconds

