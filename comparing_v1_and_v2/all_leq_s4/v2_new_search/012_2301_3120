012_2301_3120
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:58:38

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 2.1610498428344727 seconds
Number of tilings expanded by Set 1 is 31
Number of tilings expanded by Set 2 is 26
Total number of tilings is 199
Total number of expandable tilings is 193
Total number of verified tilings is 77
Total number of strategy verified tilings is 29
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.06704568862915039 seconds, ~3%
Time spent strategy verifying: 0.22037601470947266 seconds, ~10%
Time spent inferring: 0.8204028606414795 seconds, ~37%
Time spent expanding Set 1: 0.5770788192749023 seconds, ~26%
Time spent expanding Set 2: 0.04600667953491211 seconds, ~2%
Time spent queueing: 0.0023040771484375 seconds, ~0%
Time spent prepping for tree search: 0.015687942504882812 seconds, ~0%
Time spent searching for tree: 0.04832172393798828 seconds, ~2%
Total of ~80% accounted for.

Proof tree found Mon, 18 Sep 2017 14:58:40

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))
3: Av(Perm((0, 1)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 5

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 6

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 7

+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point

Label: 8

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 0, 1))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[2, 1]": "Av(Perm((0, 1)))"}, "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "relation": "", "identifier": 15, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[2, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 1)))"}, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=1). | ", "identifier": 17, "children": [{"formal_step": "Reversibly delete the blocks at cells [Cell(i=3, j=3)]", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)))"}, "out_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)))"}, "relation": "", "identifier": 36, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "relation": "", "identifier": 32, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[3, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 1]": "point"}, "relation": "| Reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | ", "identifier": 109, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=1): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=3, j=3)}]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[0, 2]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[1, 4]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[5, 0]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1)))", "[0, 3]": "point", "[6, 4]": "Av(Perm((0, 1)))", "[3, 5]": "Av(Perm((0, 1)))", "[2, 6]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=1, j=4). | ", "identifier": 38, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 2.1610498428344727 seconds

