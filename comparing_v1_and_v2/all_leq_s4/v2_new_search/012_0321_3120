012_0321_3120
Symmetry: False
Non-Interleaving Decompoition: False
Tiling Queue: <class 'atrapv2.tilingqueue.TilingQueue'>

--------------------------------------------------------------------------
Trying: No name
Auto search started Mon, 18 Sep 2017 14:47:39

Looking for proof tree for Basis((Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((3, 1, 2, 0))))

The strategies being used are:
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Verification: subset_verified
Set 1: components, reversibly_deletable_cells
Set 2: all_cell_insertions, all_row_placements, all_column_placements

 ------------- 
|STATUS UPDATE|
 ------------- 

Time spent searching so far: 22.676158666610718 seconds
Number of tilings expanded by Set 1 is 187
Number of tilings expanded by Set 2 is 159
Total number of tilings is 1420
Total number of expandable tilings is 1289
Total number of verified tilings is 281
Total number of strategy verified tilings is 126
Total number of empty tilings is 0
There were 0 cache misses

Time spent equivalent expanding: 0.5129387378692627 seconds, ~2%
Time spent strategy verifying: 0.4657015800476074 seconds, ~2%
Time spent inferring: 7.972462892532349 seconds, ~35%
Time spent expanding Set 1: 6.435514688491821 seconds, ~28%
Time spent expanding Set 2: 0.44579482078552246 seconds, ~1%
Time spent queueing: 0.013936758041381836 seconds, ~0%
Time spent prepping for tree search: 0.6827783584594727 seconds, ~3%
Time spent searching for tree: 1.5972788333892822 seconds, ~7%
Total of ~78% accounted for.

Proof tree found Mon, 18 Sep 2017 14:48:02

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     └─────11
                        └─────12
                              ├─────13
                              └─────14

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((0, 1)), Perm((2, 1, 0)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))
2: point

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))
2: point
3: Av+(Perm((0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))
3: point

Label: 7

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 8

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 9

+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)))
2: point
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))
2: point

Label: 10

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1)))
3: point

Label: 11

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 12

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))
3: Av+(Perm((0, 1)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))
3: point

Label: 13

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))
3: point
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))
2: point

Label: 14

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1)))
2: point
{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((3, 1, 2, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((3, 1, 2, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 1)), Perm((2, 1, 0))).", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 3, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[0, 1]": "point", "[1, 2]": "Av(Perm((0, 1)), Perm((2, 1, 0)))"}, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | ", "identifier": 3, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[0, 1]": "point"}, "relation": "", "identifier": 10, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1))).", "in_tiling": {"[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[0, 1]": "point", "[1, 2]": "Av+(Perm((0, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[1, 1]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=1, j=2). | Reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | ", "identifier": 12, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "point"}, "relation": "", "identifier": 92, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the maximum point into row 0", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[1, 1]": "point"}, "relation": "", "identifier": 91, "children": [{"formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=5), Cell(i=1, j=4)]", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[3, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[0, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[4, 0]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[5, 2]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 1)))", "[0, 5]": "point", "[3, 6]": "point"}, "relation": "| Inserting the right most point in to the cell Cell(i=3, j=0). | ", "identifier": 269, "children": [{"formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[0, 1]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[1, 4]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[0, 1]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[1, 4]": "point"}, "relation": "", "identifier": 68, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[0, 3]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[0, 1]": "point"}, "relation": "| Reverse of: Inserting the right most point in to the cell Cell(i=1, j=0). | ", "identifier": 113, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[0, 1]": "Av+(Perm((0, 1)))", "[3, 2]": "point", "[1, 3]": "point"}, "out_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[0, 1]": "Av+(Perm((0, 1)))", "[3, 2]": "point", "[1, 3]": "point"}, "relation": "", "identifier": 509, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[]", "strategy_verified": false}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[0, 1]": "point"}, "relation": "", "identifier": 203, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=1): Cell(i=2, j=1), Cell(i=1, j=4): Cell(i=3, j=6), Cell(i=2, j=0): Cell(i=4, j=0), Cell(i=2, j=3): Cell(i=4, j=3), Cell(i=3, j=2): Cell(i=5, j=2)}, {Cell(i=0, j=1): Cell(i=0, j=5), Cell(i=1, j=0): Cell(i=1, j=4)}]", "strategy_verified": false}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=3), Cell(i=1, j=2)]", "in_tiling": {"[2, 0]": "Av(Perm((0, 1)))", "[4, 1]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[0, 2]": "Av+(Perm((0, 1)))", "[3, 3]": "point", "[1, 4]": "point"}, "out_tiling": {"[3, 0]": "Av(Perm((0, 1)))", "[5, 1]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[1, 2]": "Av(Perm((0, 1)))", "[0, 3]": "point", "[4, 4]": "point", "[2, 5]": "point"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=2). | ", "identifier": 271, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[2, 2]": "point", "[0, 3]": "point"}, "out_tiling": {"[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((0, 3, 2, 1)))", "[0, 1]": "point"}, "relation": "| Reverse of: Inserting the top most point in to the cell Cell(i=1, j=0). | ", "identifier": 113, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[0, 1]": "point"}, "out_tiling": {"[1, 0]": "Av(Perm((0, 1)))", "[0, 1]": "point"}, "relation": "", "identifier": 203, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=3): Cell(i=2, j=5), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=4, j=4), Cell(i=3, j=1): Cell(i=5, j=1)}, {Cell(i=0, j=1): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=2)}]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
Time taken was 22.676158666610718 seconds

