0123

===========================================
Log created Fri, 26 May 2017 13:15:19

Maximum depth fully searched was 5

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 2727 inferral cache hits and 16202 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 11819 tilings in it right now.
There were 8604 tilings of which 364 are verified.
There were 6063 SiblingNodes of which 129 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *17250* times, (8625 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Fri, 26 May 2017 13:25:58

Maximum depth fully searched was 5

Maximum time set at 600 seconds

Total time taken was 638 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 2242 inferral cache hits and 808591 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 10786 tilings in it right now.
There were 7957 tilings of which 556 are verified.
There were 5628 SiblingNodes of which 309 are verified.

The function splittings called the partitioning cache *809512* times, (3829 originating)
There were 0 cache misses

No proof tree was found after 638 seconds

===========================================
Log created Fri, 26 May 2017 13:35:58

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 2497 inferral cache hits and 11165 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 6829 tilings in it right now.
There were 5383 tilings of which 320 are verified.
There were 2313 SiblingNodes of which 92 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *11908* times, (5954 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Fri, 26 May 2017 13:45:59

Maximum depth fully searched was 5

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 4460 inferral cache hits and 206558 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 11820 tilings in it right now.
There were 9264 tilings of which 527 are verified.
There were 4195 SiblingNodes of which 170 are verified.

The function splittings called the partitioning cache *207896* times, (5085 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Fri, 26 May 2017 13:53:42

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 463 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 44753 inferral cache hits and 9643 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 13022 tilings in it right now.
There were 7728 tilings of which 476 are verified.
There were 2705 SiblingNodes of which 127 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *10298* times, (5149 originating)
There were 0 cache misses

A proof tree was found in 463 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           └─────11
                        └─────12
                              ├─────13
                              │     ├─────14
                              │     ├─────15
                              │     └─────16
                              └─────17
                                    ├─────18
                                    └─────19

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2, 3)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2, 3)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: point
2: Av(Perm((0, 1, 2, 3)))

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+
|2|
+-+
|1|
+-+
1: point
2: Av+(Perm((0, 1, 2, 3)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: Av+(Perm((0, 1, 2, 3)))
2: point

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2, 3)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 2)))
2: Av(Perm((0, 1, 2, 3)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| | |1| |
+-+-+-+-+
|1|2| |3|
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))
3: Av(Perm((0, 1, 2, 3)))

Label: 7

+-+-+-+
| |1| |
+-+-+-+
|1| |2|
+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1, 2, 3)))
2: point
3: Av(Perm((0, 1, 2)))

Label: 8

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1, 2, 3)))
2: point

Label: 9

+-+-+-+
| |2| |
+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1, 2, 3)))
2: point
3: Av+(Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
| | |3|
+-+-+-+
| | |2|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1, 2, 3)))
2: point
3: Av(Perm((0, 1, 2)))

Label: 10

+-+-+
| |3|
+-+-+
| |2|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2, 3)))
2: point
3: Av(Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 2)))
2: Av(Perm((0, 1, 2, 3)))
3: point

Label: 11

+-+
|1|
+-+
1: point

Label: 12

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1|2| |3|
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)))
3: Av(Perm((0, 1, 2, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1|1|2| |3|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))
3: Av(Perm((0, 1, 2, 3)))

Label: 13

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3|4| |1|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: Av(Perm((0, 1, 2, 3)))
3: point
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |4| |1|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: Av(Perm((0, 1, 2, 3)))
3: point
4: Av(Perm((0, 1)))

Label: 14

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |4| |1|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: Av(Perm((0, 1, 2, 3)))
3: point
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 2)))
2: Av(Perm((0, 1, 2, 3)))
3: point

Label: 15

+-+
|1|
+-+
1: point

Label: 16

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 17

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |4| |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1|2| |3|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))
3: Av(Perm((0, 1, 2, 3)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| |4| |1|
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: Av(Perm((0, 1, 2, 3)))
3: point
4: Av(Perm((0, 1)))

Label: 18

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |4| |1|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: Av(Perm((0, 1, 2, 3)))
3: point
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 2)))
2: Av(Perm((0, 1, 2, 3)))
3: point

Label: 19

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 394, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 395, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 396, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 183, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2, 3)))", "[1, 2]": "point", "[1, 3]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Separating the bottommost point from cell Cell(i=1, j=2). | Separating the topmost point from cell Cell(i=1, j=2). | Isolating the point at Cell(i=1, j=3) in its column. | The reverse of: Isolating the point at Cell(i=2, j=1) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 397, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)))", "[2, 2]": "Av+(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)))", "[2, 2]": "point", "[2, 3]": "Av(Perm((0, 1, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2), Cell(i=1, j=3): Cell(i=2, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=4)}]", "relation": "| Separating the bottommost point from cell Cell(i=2, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1, 2))).", "identifier": 398, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)))", "[2, 2]": "Av(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=1, j=1) in its row. | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 183, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)))", "[1, 2]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)))", "[3, 2]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=1) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 276, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=3), Cell(i=2, j=5)]", "identifier": 399, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)))", "[4, 2]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))", "[2, 2]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)))", "[4, 2]": "Av(Perm((0, 1, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2), Cell(i=2, j=3): Cell(i=3, j=4), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=3)}, {Cell(i=0, j=0): Cell(i=2, j=5)}]", "relation": "| Isolating the point at Cell(i=3, j=3) in its row. | The reverse of: Isolating the point at Cell(i=3, j=3) in its row. | The reverse of: Isolating the point at Cell(i=2, j=3) in its column. | The reverse of: Separating the topmost point from cell Cell(i=2, j=2). | Separating the bottommost point from cell Cell(i=2, j=2). | Isolating the point at Cell(i=2, j=3) in its column. | Isolating the point at Cell(i=2, j=3) in its row. | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 183, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)))", "[1, 2]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)))", "[3, 2]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=1) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=2)]", "identifier": 400, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)))", "[4, 2]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)))", "[4, 2]": "Av(Perm((0, 1, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2), Cell(i=2, j=3): Cell(i=3, j=3), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=2)}]", "relation": "| Isolating the point at Cell(i=3, j=3) in its row. | The reverse of: Isolating the point at Cell(i=3, j=3) in its row. | "}], "formal_step": "Isolated the point at Cell(i=0, j=0) in its row", "identifier": 401, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)))"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)))"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1, 2))).", "identifier": 183, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)))"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1, 2)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)))"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=0, j=0). | "}], "formal_step": "Isolated the point at Cell(i=0, j=1) in its column", "identifier": 231, "in_tiling": {"[0, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2, 3)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2, 3)))", "[0, 1]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=0, j=1). | The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2, 3))).", "identifier": 26, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2, 3)))"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2, 3)))"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2, 3))).", "identifier": 402, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)))"}, "recurse": "[]", "relation": ""}}
