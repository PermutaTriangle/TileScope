0132_1302
Log created  Fri, 05 May 2017 08:38:03
Finding the proof tree took 14 seconds
The depth searched was 4

Strategies applied: standard_strategies_w_all_rows_cols
Maximum depth set at 4

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     ├─────7
                  │     └─────8
                  └─────9
                        ├─────10
                        ├─────11
                        ├─────12
                        └─────13

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av(Perm((0, 2, 1)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av+(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|2| | |3| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |2| | |3| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av(Perm((0, 2, 1)))

Label: 5

+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |2| |3| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av(Perm((0, 2, 1)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))

Label: 7

+-+
|1|
+-+
1: point

Label: 8

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))

Label: 9

+-+-+-+-+-+-+
|4| | |5| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
5: Av+(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
|4| | | | |5| | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| |4| | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
5: Av(Perm((1, 0)))

Label: 10

+-+-+-+-+-+
|2| | | |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |2| | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av(Perm((0, 2, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av+(Perm((0, 2, 1)))

Label: 11

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 12

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Label: 13

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 14, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 15, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 16, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 2, 1)))", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 2, 1)))", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=3)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 10, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)))", "[4, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=2, j=1). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 8, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 6, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=1), Cell(i=6, j=2), Cell(i=7, j=3)]", "identifier": 17, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "Av+(Perm((0, 2, 1)))", "[4, 2]": "Av(Perm((0, 2, 1)))", "[5, 3]": "point"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 5]": "point", "[5, 4]": "Av(Perm((0, 2, 1)))", "[5, 6]": "Av(Perm((1, 0)))", "[6, 2]": "Av(Perm((0, 2, 1)))", "[7, 3]": "point"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=6), Cell(i=1, j=1): Cell(i=1, j=4), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=2): Cell(i=4, j=5), Cell(i=4, j=1): Cell(i=5, j=4), Cell(i=4, j=3): Cell(i=5, j=6)}, {Cell(i=0, j=0): Cell(i=2, j=1)}, {Cell(i=0, j=0): Cell(i=6, j=2)}, {Cell(i=0, j=0): Cell(i=7, j=3)}]", "relation": "| Inserting the left most point in to the cell Cell(i=3, j=4). | "}], "formal_step": "We perform cell insertion into cell (3, 3); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 10, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 3]": "Av(Perm((0, 2, 1)))", "[4, 1]": "Av(Perm((0, 2, 1)))", "[5, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=2, j=1). | "}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 2, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2))).", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}}
