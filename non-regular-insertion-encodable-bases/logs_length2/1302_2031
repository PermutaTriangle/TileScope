1302_2031
Log created  Fri, 05 May 2017 09:06:43
Finding the proof tree took 72 seconds
The depth searched was 4

Strategies applied: standard_strategies_w_all_rows_cols
Maximum depth set at 4

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     │           ├─────11
                        │     │           │     ├─────12
                        │     │           │     └─────13
                        │     │           └─────14
                        │     └─────15
                        └─────16

Label: 0

+-+
|1|
+-+
1: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+-+
|2| |2|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
3: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 6

+-+-+
| |1|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 7

+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |1| |1|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
3: point

Label: 8

+-+-+-+-+
| |1| |1|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 9

+-+-+-+-+
| |2| |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 10

+-+-+-+-+
| |3| |3|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| |1|
+-+-+-+-+-+
1: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 11

+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| |1|
+-+-+-+-+
1: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 12

+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| |1|
+-+-+-+-+
1: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 13

+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| |1|
+-+-+-+-+
1: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 14

+-+
|1|
+-+
1: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 15

+-+
|1|
+-+
1: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 16

+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+-+-+
| |3| |3|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 113, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 114, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 115, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 116, "in_tiling": {"[0, 0]": "point", "[1, 2]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=1). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 115, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=1, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 45, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 3]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 2]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 4]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=3). | The reverse of: Inserting the top most point in to the cell Cell(i=1, j=1). | Inserting the left most point in to the cell Cell(i=1, j=1). | The reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=4). | "}], "formal_step": "We perform cell insertion into cell (3, 3); either it is empty or Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1))).", "identifier": 3, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 3]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 3]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 20, "in_tiling": {"[0, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=3)]", "identifier": 70, "in_tiling": {"[0, 1]": "point", "[1, 3]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 3]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 3]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[4, 4]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=1): Cell(i=3, j=1), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=3): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=1, j=3)}]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=0). | The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=3). | "}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1))).", "identifier": 4, "in_tiling": {"[0, 1]": "point", "[1, 3]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 3]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 3]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 20, "in_tiling": {"[0, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1)]", "identifier": 45, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 2]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 4]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 4]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[4, 4]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=3): Cell(i=2, j=4), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=3): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=4). | The reverse of: Inserting the left most point in to the cell Cell(i=1, j=1). | "}, {"children": [], "formal_step": "recurse", "identifier": 70, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 2]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 4]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 3]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | The reverse of: Inserting the left most point in to the cell Cell(i=1, j=3). | Inserting the bottom most point in to the cell Cell(i=1, j=3). | The reverse of: Inserting the top most point in to the cell Cell(i=3, j=0). | "}], "formal_step": "Placing the leftmost point into column 1", "identifier": 117, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1))).", "identifier": 118, "in_tiling": {"[0, 1]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=1). | The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1))).", "identifier": 20, "in_tiling": {"[0, 0]": "Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1))).", "identifier": 1, "in_tiling": {"[0, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}}
