0231_1203_1230

===========================================
Log created Wed, 21 Jun 2017 01:38:04

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3739 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_point_placements, all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 639224 inferral cache hits and 2459444 partitioning cache hits.
The partitioning cache had 21 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 78628 tilings of which 2934 are verified.
There were 18786 SiblingNodes of which 640 are verified.

The function splittings called the partitioning cache *2462474* times, (12257 originating)
There were 0 cache misses

No proof tree was found after 3739 seconds

===========================================
Log created Wed, 21 Jun 2017 10:11:13

Maximum depth fully searched was 2

Maximum time set at 3600 seconds

Total time taken was 30787 seconds

The strategies applied were:
Batch: extreme_point_boundaries, all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_point_placements, all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 169461 inferral cache hits and 26533775 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 40556 tilings in it right now.
There were 19515 tilings of which 912 are verified.
There were 8251 SiblingNodes of which 700 are verified.

The function splittings called the partitioning cache *26534249* times, (2295 originating)
There were 0 cache misses

No proof tree was found after 30787 seconds

===========================================
Log created Wed, 21 Jun 2017 11:11:21

Maximum depth fully searched was 16

Maximum time set at 3600 seconds

Total time taken was 3607 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: 
Verification: subset_verified, is_empty

There were 4562 inferral cache hits and 0 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 24211 tilings in it right now.
There were 16025 tilings of which 8419 are verified.
There were 10052 SiblingNodes of which 2447 are verified.

There were 0 cache misses

No proof tree was found after 3607 seconds

===========================================
Log created Wed, 21 Jun 2017 12:11:26

Maximum depth fully searched was 12

Maximum time set at 3600 seconds

Total time taken was 3604 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: 
Verification: subset_verified, is_empty

There were 25150 inferral cache hits and 0 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 86725 tilings in it right now.
There were 47909 tilings of which 17085 are verified.
There were 20067 SiblingNodes of which 3379 are verified.

There were 0 cache misses

No proof tree was found after 3604 seconds

===========================================
Log created Wed, 21 Jun 2017 13:11:27

Maximum depth fully searched was 14

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_leftmost_column_placements
Equivalent: all_equivalent_leftmost_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: 
Verification: subset_verified, is_empty

There were 19691 inferral cache hits and 0 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 44674 tilings in it right now.
There were 23569 tilings of which 6389 are verified.
There were 9576 SiblingNodes of which 1646 are verified.

There were 0 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Wed, 21 Jun 2017 14:11:34

Maximum depth fully searched was 12

Maximum time set at 3600 seconds

Total time taken was 3606 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: 
Verification: subset_verified, is_empty

There were 28694 inferral cache hits and 0 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 93627 tilings in it right now.
There were 50175 tilings of which 17384 are verified.
There were 19325 SiblingNodes of which 3034 are verified.

There were 0 cache misses

No proof tree was found after 3606 seconds

===========================================
Log created Wed, 21 Jun 2017 15:11:35

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4779 inferral cache hits and 18988 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 24933 tilings in it right now.
There were 16256 tilings of which 1843 are verified.
There were 8788 SiblingNodes of which 795 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *20196* times, (10098 originating)
There were 0 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Wed, 21 Jun 2017 16:11:36

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_point_placements, all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: 
Verification: subset_verified, is_empty

There were 874137 inferral cache hits and 0 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 100341 tilings of which 3267 are verified.
There were 20930 SiblingNodes of which 616 are verified.

There were 0 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Wed, 21 Jun 2017 17:16:53

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3915 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 224488 inferral cache hits and 25229 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 75983 tilings in it right now.
There were 29079 tilings of which 869 are verified.
There were 10925 SiblingNodes of which 500 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *26854* times, (13427 originating)
There were 0 cache misses

No proof tree was found after 3915 seconds

===========================================
Log created Wed, 21 Jun 2017 21:54:44

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 16670 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 227501 inferral cache hits and 27025 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 75391 tilings in it right now.
There were 30966 tilings of which 1100 are verified.
There were 14698 SiblingNodes of which 694 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *28796* times, (14398 originating)
There were 0 cache misses

No proof tree was found after 16670 seconds

===========================================
Log created Wed, 21 Jun 2017 22:56:12

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3686 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 436096 inferral cache hits and 42092 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 54270 tilings of which 2333 are verified.
There were 14676 SiblingNodes of which 549 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *44750* times, (22375 originating)
There were 0 cache misses

No proof tree was found after 3686 seconds

===========================================
Log created Thu, 22 Jun 2017 02:05:44

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 11371 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 367740 inferral cache hits and 2633673 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 45409 tilings of which 766 are verified.
There were 15769 SiblingNodes of which 509 are verified.

The function splittings called the partitioning cache *2636297* times, (11129 originating)
There were 0 cache misses

No proof tree was found after 11371 seconds

===========================================
Log created Thu, 22 Jun 2017 04:21:23

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 8138 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 258318 inferral cache hits and 900721 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 81001 tilings in it right now.
There were 34379 tilings of which 1070 are verified.
There were 16447 SiblingNodes of which 717 are verified.

The function splittings called the partitioning cache *902643* times, (7223 originating)
There were 0 cache misses

No proof tree was found after 8138 seconds

===========================================
Log created Thu, 22 Jun 2017 04:37:25

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 961 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 214962 inferral cache hits and 509440 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 67559 tilings in it right now.
There were 28378 tilings of which 1695 are verified.
There were 8028 SiblingNodes of which 433 are verified.

The function splittings called the partitioning cache *510987* times, (5737 originating)
There were 0 cache misses

A proof tree was found in 961 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     ├─────7
                  │     │     ├─────8
                  │     │     │     ├─────9
                  │     │     │     │     ├─────10
                  │     │     │     │     └─────11
                  │     │     │     └─────12
                  │     │     │           ├─────13
                  │     │     │           └─────14
                  │     │     └─────15
                  │     │           ├─────16
                  │     │           └─────17
                  │     └─────18
                  │           ├─────19
                  │           ├─────20
                  │           │     ├─────21
                  │           │     └─────22
                  │           └─────23
                  │                 ├─────24
                  │                 │     ├─────25
                  │                 │     ├─────26
                  │                 │     └─────27
                  │                 └─────28
                  └─────29
                        ├─────30
                        ├─────31
                        │     ├─────32
                        │     └─────33
                        └─────34
                              ├─────35
                              │     ├─────36
                              │     └─────37
                              └─────38
                                    ├─────39
                                    └─────40

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|2|
+-+
|1|
+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))
2: point

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+
|2|
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))
2: point
We use his sibling for the next strategy
+-+
|1|
+-+
|2|
+-+
|1|
+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))

Label: 5

+-+-+-+
| | |1|
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |1| |
+-+-+-+
|2| |2|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((1, 2, 0)))

Label: 6

+-+-+
| |1|
+-+-+
|1| |
+-+-+
1: point

Label: 7

+-+-+-+
| |1| |
+-+-+-+
|2| |2|
+-+-+-+
|1| | |
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((1, 2, 0)))

Label: 8

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 9

+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|2| | |3| |3|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 10

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| | |1|
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 11

+-+
|1|
+-+
1: point

Label: 12

+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| |1|2| |3|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |1|3|
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 13

+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| |1|2| |3|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 14

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point

Label: 15

+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|2| | |3| |3|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 16

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| | |1|
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 17

+-+
|1|
+-+
1: point

Label: 18

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 19

+-+-+-+
| |1| |
+-+-+-+
| | |1|
+-+-+-+
|1| | |
+-+-+-+
1: point

Label: 20

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | |3|
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 21

+-+
|1|
+-+
1: point

Label: 22

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 23

+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 24

+-+-+-+
| | |1|
+-+-+-+
|2| |3|
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 25

+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 26

+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |1|3|
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| |1|2| |3|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 27

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 28

+-+
|1|
+-+
1: point

Label: 29

+-+-+-+
|1| | |
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |1| |
+-+-+-+
|2| |3|
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))

Label: 30

+-+-+
|1| |
+-+-+
| |1|
+-+-+
1: point

Label: 31

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| |3| |4|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))
4: Av(Perm((1, 2, 0)))

Label: 32

+-+
|1|
+-+
1: point

Label: 33

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))
4: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|1| | |
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))
3: Av(Perm((1, 2, 0)))

Label: 34

+-+-+-+
| |1| |
+-+-+-+
| | |1|
+-+-+-+
|2| |3|
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))

Label: 35

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|1| | |
+-+-+-+
| | |1|
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 36

+-+-+-+
| | |1|
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 37

+-+
|1|
+-+
1: point

Label: 38

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))
4: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
|2| |3|
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))

Label: 39

+-+-+-+
| |1| |
+-+-+-+
|2| |3|
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))
We use his sibling for the next strategy
+-+-+-+
|1| | |
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))
3: Av(Perm((1, 2, 0)))

Label: 40

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 938, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 939, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 940, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 102, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[2, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=2) in its column. | ", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 939, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 109, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))", "[4, 3]": "point", "[5, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=2), Cell(i=3, j=2): Cell(i=4, j=3), Cell(i=4, j=1): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": "| Isolating the point at Cell(i=3, j=3) in its column. | ", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 941, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 2, 0)))", "[5, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 2, 0)))", "[5, 3]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 942, "in_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Isolated the point at Cell(i=3, j=1) in its column", "identifier": 941, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 2, 0)))", "[5, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))", "[3, 3]": "point"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=2) in its row. | The reverse of: Isolating the point at Cell(i=3, j=1) in its column. | The reverse of: Isolating the point at Cell(i=2, j=2) in its row. | ", "strategy_verified": false}], "formal_step": "insert leftmost point into col 2", "identifier": 595, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 2]": "Av(Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 2, 0)))", "[4, 3]": "point"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=1) in its column. | The reverse of: Isolating the point at Cell(i=4, j=3) in its column. | ", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 102, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[2, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=2) in its column. | ", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 939, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 588, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))", "[4, 3]": "point", "[5, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))", "[4, 3]": "point", "[5, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=1): Cell(i=3, j=2), Cell(i=3, j=2): Cell(i=4, j=3), Cell(i=4, j=1): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": "", "strategy_verified": false}], "formal_step": "Isolated the point at Cell(i=0, j=0) in its column", "identifier": 943, "in_tiling": {"[0, 0]": "point", "[0, 1]": "point", "[0, 2]": "Av(Perm((1, 2, 0)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "point", "[0, 2]": "Av(Perm((1, 2, 0)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 944, "in_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 939, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 786, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 945, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "point", "[4, 1]": "point", "[4, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "point", "[4, 1]": "point", "[4, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=3)}, {Cell(i=0, j=2): Cell(i=1, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=3): Cell(i=3, j=4), Cell(i=3, j=1): Cell(i=4, j=1), Cell(i=3, j=2): Cell(i=4, j=2)}]", "relation": "", "strategy_verified": false}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 109, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))", "[3, 3]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 941, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 2, 0)))", "[5, 3]": "point"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=2) in its row. | Isolating the point at Cell(i=3, j=1) in its column. | The reverse of: Isolating the point at Cell(i=2, j=2) in its row. | ", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 786, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "insert leftmost point into col 2", "identifier": 937, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 2]": "Av(Perm((1, 2, 0)))", "[2, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 2]": "Av(Perm((1, 2, 0)))", "[2, 3]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 939, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 946, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 4]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 4]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))", "[3, 3]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=1): Cell(i=3, j=1), Cell(i=2, j=2): Cell(i=3, j=2), Cell(i=2, j=3): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=2, j=4)}]", "relation": "", "strategy_verified": false}], "formal_step": "insert topmost point into row 2", "identifier": 786, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "insert bottommost point into row 1", "identifier": 102, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((1, 2, 0)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=2) in its column. | The reverse of: Isolating the point at Cell(i=0, j=0) in its column. | ", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 947, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 939, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 391, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1, 2)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)))", "[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=2) in its column. | ", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 502, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "point", "[3, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 1]": "Av(Perm((0, 1, 2)))", "[4, 0]": "point", "[5, 1]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2)}, {Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=2): Cell(i=2, j=3), Cell(i=2, j=1): Cell(i=3, j=1), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=4, j=1): Cell(i=5, j=1)}]", "relation": "| Isolating the point at Cell(i=3, j=0) in its column. | ", "strategy_verified": false}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 102, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[2, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 939, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 948, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 2, 0)))", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[2, 2]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=1): Cell(i=2, j=1), Cell(i=2, j=2): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=3)}]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=3) in its column. | ", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 391, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)))", "[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=0) in its column. | The reverse of: Isolating the point at Cell(i=0, j=2) in its column. | ", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 939, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 949, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1, 2)))", "[2, 2]": "point", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "point", "[1, 2]": "point", "[2, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=2): Cell(i=1, j=2), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=2, j=1): Cell(i=2, j=1)}, {Cell(i=0, j=0): Cell(i=0, j=3)}]", "relation": "| Isolating the point at Cell(i=2, j=2) in its column. | The reverse of: Isolating the point at Cell(i=4, j=0) in its column. | The reverse of: Isolating the point at Cell(i=0, j=3) in its column. | ", "strategy_verified": false}], "formal_step": "Isolated the point at Cell(i=2, j=0) in its column", "identifier": 950, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))", "[2, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "insert topmost point into row 1", "identifier": 391, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)))", "[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=0, j=2) in its column. | The reverse of: Isolating the point at Cell(i=2, j=0) in its column. | ", "strategy_verified": false}], "formal_step": "Isolated the point at Cell(i=0, j=0) in its column", "identifier": 951, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))", "[0, 2]": "point"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0))).", "identifier": 10, "in_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))", "[0, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | Separating the topmost point from cell Cell(i=0, j=0). | ", "strategy_verified": false}], "formal_step": "insert bottommost point into row 0", "identifier": 952, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}}
