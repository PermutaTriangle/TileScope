0231_0321_3021

===========================================
Log created Mon, 29 May 2017 21:11:42

Maximum depth fully searched was 5

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6103 inferral cache hits and 25679 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 31730 tilings in it right now.
There were 18321 tilings of which 1458 are verified.
There were 9304 SiblingNodes of which 368 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *27290* times, (13653 originating)
There were 1 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Mon, 29 May 2017 21:41:47

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1804 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 3879 inferral cache hits and 1512077 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 19691 tilings in it right now.
There were 11948 tilings of which 915 are verified.
There were 6384 SiblingNodes of which 433 are verified.

The function splittings called the partitioning cache *1513113* times, (4398 originating)
There were 0 cache misses

No proof tree was found after 1804 seconds

===========================================
Log created Mon, 29 May 2017 22:11:47

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 11296 inferral cache hits and 26313 partitioning cache hits.
The partitioning cache had 13 tilings in it right now.
The inferral cache has 32201 tilings in it right now.
There were 20887 tilings of which 1240 are verified.
There were 5617 SiblingNodes of which 194 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *27962* times, (13989 originating)
There were 1 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Mon, 29 May 2017 22:42:21

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1832 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 12127 inferral cache hits and 1694419 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 33513 tilings in it right now.
There were 22683 tilings of which 1849 are verified.
There were 6963 SiblingNodes of which 463 are verified.

The function splittings called the partitioning cache *1696387* times, (7968 originating)
There were 0 cache misses

No proof tree was found after 1832 seconds

===========================================
Log created Mon, 29 May 2017 23:12:21

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 143679 inferral cache hits and 25596 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 40159 tilings in it right now.
There were 21753 tilings of which 1618 are verified.
There were 5558 SiblingNodes of which 340 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *27244* times, (13630 originating)
There were 1 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Mon, 29 May 2017 23:33:23

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1261 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 168973 inferral cache hits and 1090080 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 46836 tilings in it right now.
There were 25889 tilings of which 2822 are verified.
There were 7408 SiblingNodes of which 627 are verified.

The function splittings called the partitioning cache *1092128* times, (7869 originating)
There were 0 cache misses

A proof tree was found in 1261 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     └─────9
                  │           ├─────10
                  │           │     ├─────11
                  │           │     └─────12
                  │           │           ├─────13
                  │           │           │     ├─────14
                  │           │           │     └─────15
                  │           │           │           ├─────16
                  │           │           │           │     ├─────17
                  │           │           │           │     │     ├─────18
                  │           │           │           │     │     └─────19
                  │           │           │           │     └─────20
                  │           │           │           └─────21
                  │           │           │                 ├─────22
                  │           │           │                 └─────23
                  │           │           └─────24
                  │           └─────25
                  └─────26
                        ├─────27
                        └─────28

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
2: point

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+
|2|
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
2: point
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
|1|
+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))

Label: 5

+-+-+-+
|2| |3|
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 6

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 7

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))

Label: 8

+-+
|1|
+-+
1: point

Label: 9

+-+-+-+-+-+
|2| |1| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|2| | | |3| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 10

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 11

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 12

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
|3| | | | |2| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
4: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 13

+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
2: point
3: Av(Perm((1, 0)))

Label: 14

+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
2: point
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
2: point

Label: 15

+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
2: point
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |2| |3| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 16

+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 0)))

Label: 17

+-+-+-+
| |1| |
+-+-+-+
|2| |3|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 0)))

Label: 18

+-+-+
| |1|
+-+-+
|2| |
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
2: point

Label: 19

+-+-+-+
| |1| |
+-+-+-+
|2| |3|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
2: point
3: Av+(Perm((1, 0)))

Label: 20

+-+
|1|
+-+
1: point

Label: 21

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |2| |3| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+
| |1| |
+-+-+-+
|1| | |
+-+-+-+
|2| |3|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av+(Perm((1, 0)))

Label: 22

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((0, 2, 1)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |2| |3| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))

Label: 23

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point

Label: 24

+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 25

+-+
|1|
+-+
1: point

Label: 26

+-+-+-+
|2| |3|
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 27

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))

Label: 28

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2173, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 15, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=1) in its column. | The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 2174, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2175, "in_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2176, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=1) in its row. | The reverse of: Separting the rightmost point from cell Cell(i=0, j=0). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 2176, "in_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 2]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": "| The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | Separting the rightmost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=2, j=1) in its row. | "}, {"children": [], "formal_step": "recurse", "identifier": 2177, "in_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=2, j=1). | Isolating the point at Cell(i=1, j=2) in its row. | The reverse of: Separating the bottommost point from cell Cell(i=1, j=0). | Separting the rightmost point from cell Cell(i=1, j=0). | Isolating the point at Cell(i=3, j=3) in its row. | The reverse of: Isolating the point at Cell(i=2, j=3) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=3, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0))).", "identifier": 975, "in_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 2178, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 3]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=1): Cell(i=2, j=1)}, {Cell(i=0, j=0): Cell(i=3, j=2)}]", "relation": "| Isolating the point at Cell(i=2, j=3) in its column. | The reverse of: Isolating the point at Cell(i=1, j=3) in its column. | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 2179, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)))", "[3, 3]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=4, j=1). | Isolating the point at Cell(i=3, j=3) in its column. | The reverse of: Isolating the point at Cell(i=3, j=3) in its column. | Isolating the point at Cell(i=3, j=3) in its row. | The reverse of: Isolating the point at Cell(i=2, j=5) in its column. | The reverse of: Isolating the point at Cell(i=1, j=3) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=2, j=1). | Separting the rightmost point from cell Cell(i=2, j=1). | Isolating the point at Cell(i=1, j=3) in its row. | The reverse of: Separating the topmost point from cell Cell(i=0, j=3). | Isolating the point at Cell(i=2, j=4) in its column. | The reverse of: Isolating the point at Cell(i=3, j=4) in its column. | "}, {"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 2180, "in_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Isolated the point at Cell(i=0, j=2) in its column", "identifier": 2179, "in_tiling": {"[0, 3]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[0, 2]": "point", "[1, 3]": "point", "[2, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=3, j=4) in its column. | The reverse of: Isolating the point at Cell(i=2, j=4) in its column. | Separating the topmost point from cell Cell(i=0, j=3). | The reverse of: Isolating the point at Cell(i=1, j=3) in its row. | The reverse of: Separting the rightmost point from cell Cell(i=2, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1))).", "identifier": 2177, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=3, j=2). | Isolating the point at Cell(i=2, j=3) in its row. | The reverse of: Isolating the point at Cell(i=3, j=3) in its row. | The reverse of: Separting the rightmost point from cell Cell(i=1, j=0). | Separating the bottommost point from cell Cell(i=1, j=0). | The reverse of: Isolating the point at Cell(i=1, j=2) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=2, j=1). | Separting the rightmost point from cell Cell(i=2, j=1). | Isolating the point at Cell(i=1, j=2) in its column. | Isolating the point at Cell(i=3, j=2) in its row. | The reverse of: Isolating the point at Cell(i=3, j=4) in its column. | "}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 256, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 258, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 2181, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 3]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 5]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 4]": "Av(Perm((1, 0)))", "[6, 6]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=0, j=2): Cell(i=0, j=4), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=3): Cell(i=3, j=5), Cell(i=3, j=2): Cell(i=5, j=4)}, {Cell(i=0, j=0): Cell(i=2, j=0), Cell(i=1, j=1): Cell(i=4, j=1), Cell(i=2, j=2): Cell(i=6, j=6)}]", "relation": "| Separting the rightmost point from cell Cell(i=0, j=1). | Isolating the point at Cell(i=5, j=3) in its row. | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1))).", "identifier": 1097, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 3]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 3]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 2182, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))", "[5, 4]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=4, j=2), Cell(i=4, j=3): Cell(i=5, j=4)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": "| Isolating the point at Cell(i=4, j=2) in its row. | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 708, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=2) in its column. | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 15, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=1) in its column. | The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 982, "in_tiling": {"[0, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=1): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": "| Isolating the point at Cell(i=2, j=2) in its column. | The reverse of: Isolating the point at Cell(i=2, j=2) in its column. | "}], "formal_step": "Isolated the point at Cell(i=0, j=0) in its column", "identifier": 948, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[0, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | The reverse of: Separating the topmost point from cell Cell(i=0, j=1). | Separating the bottommost point from cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1))).", "identifier": 15, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))", "[0, 1]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1))).", "identifier": 141, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": ""}}
