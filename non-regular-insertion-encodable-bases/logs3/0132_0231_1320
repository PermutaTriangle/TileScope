0132_0231_1320

===========================================
Log created Thu, 25 May 2017 06:14:11

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 831 inferral cache hits and 3706 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 5040 tilings in it right now.
There were 2653 tilings of which 216 are verified.
There were 1177 SiblingNodes of which 70 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3958* times, (1979 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:16:11

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 925 inferral cache hits and 161692 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 5726 tilings in it right now.
There were 3031 tilings of which 321 are verified.
There were 1457 SiblingNodes of which 141 are verified.

The function splittings called the partitioning cache *162001* times, (1139 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:18:12

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1283 inferral cache hits and 4686 partitioning cache hits.
The partitioning cache had 19 tilings in it right now.
The inferral cache has 4651 tilings in it right now.
There were 2881 tilings of which 278 are verified.
There were 755 SiblingNodes of which 56 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *5014* times, (2507 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:20:19

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 126 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1737 inferral cache hits and 187902 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 6008 tilings in it right now.
There were 3803 tilings of which 402 are verified.
There were 1047 SiblingNodes of which 130 are verified.

The function splittings called the partitioning cache *188267* times, (1160 originating)
There were 0 cache misses

No proof tree was found after 126 seconds

===========================================
Log created Thu, 25 May 2017 06:22:19

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 17010 inferral cache hits and 4478 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 5566 tilings in it right now.
There were 3056 tilings of which 318 are verified.
There were 826 SiblingNodes of which 76 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4794* times, (2397 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:24:20

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 26003 inferral cache hits and 63164 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 8211 tilings in it right now.
There were 4577 tilings of which 444 are verified.
There were 1282 SiblingNodes of which 125 are verified.

The function splittings called the partitioning cache *63619* times, (1433 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:25:59

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 98 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 234 inferral cache hits and 2679 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1209 tilings in it right now.
There were 1027 tilings of which 418 are verified.
There were 649 SiblingNodes of which 108 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2836* times, (1418 originating)
There were 0 cache misses

A proof tree was found in 98 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     │     ├─────10
                        │     │     │     └─────11
                        │     │     └─────12
                        │     └─────13
                        │           ├─────14
                        │           │     ├─────15
                        │           │     ├─────16
                        │           │     ├─────17
                        │           │     └─────18
                        │           └─────19
                        │                 ├─────20
                        │                 ├─────21
                        │                 ├─────22
                        │                 ├─────23
                        │                 └─────24
                        └─────25
                              ├─────26
                              └─────27
                                    ├─────28
                                    │     ├─────29
                                    │     │     ├─────30
                                    │     │     └─────31
                                    │     └─────32
                                    │           ├─────33
                                    │           └─────34
                                    └─────35
                                          ├─────36
                                          └─────37

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
2: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point

Label: 7

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point

Label: 8

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point

Label: 9

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point

Label: 10

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
2: point

Label: 11

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: Av+(Perm((0, 2, 1)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | |1| |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point

Label: 14

+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point

Label: 15

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point

Label: 16

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Label: 17

+-+
|1|
+-+
1: point

Label: 18

+-+
|1|
+-+
1: point

Label: 19

+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | |4| | | |
+-+-+-+-+-+-+-+
| |4| | | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | |1| |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: Av+(Perm((0, 2, 1)))
4: point

Label: 20

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point

Label: 21

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)))

Label: 22

+-+
|1|
+-+
1: point

Label: 23

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Label: 24

+-+
|1|
+-+
1: point

Label: 25

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| |2| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
4: point

Label: 26

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))

Label: 27

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| |2| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
4: point

Label: 28

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| |2| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))

Label: 29

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))

Label: 30

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
2: point

Label: 31

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))

Label: 32

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| |2| | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))

Label: 33

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| |2| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
4: point

Label: 34

+-+
|1|
+-+
1: point

Label: 35

+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|1| |2| | | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
4: point

Label: 36

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| |2| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
4: point

Label: 37

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 303, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 304, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 305, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 306, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 39, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 9, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=1, j=1): Cell(i=2, j=2), Cell(i=2, j=0): Cell(i=3, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=1)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 8, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 30, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 1)))", "[4, 4]": "point", "[5, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 1)))", "[4, 4]": "point", "[5, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=3, j=0), Cell(i=1, j=1): Cell(i=4, j=4), Cell(i=2, j=0): Cell(i=5, j=0)}, {Cell(i=0, j=0): Cell(i=1, j=1)}, {Cell(i=0, j=0): Cell(i=0, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=3)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 26, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 8, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=2), Cell(i=1, j=3), Cell(i=2, j=1), Cell(i=3, j=4)]", "identifier": 307, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 2, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 1)))", "[5, 5]": "point", "[6, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 2, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 1)))", "[5, 5]": "point", "[6, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=4, j=0), Cell(i=1, j=1): Cell(i=5, j=5), Cell(i=2, j=0): Cell(i=6, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=3)}, {Cell(i=0, j=0): Cell(i=2, j=1)}, {Cell(i=0, j=0): Cell(i=3, j=4)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 87, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 2, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 1)))", "[5, 5]": "point", "[6, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 29, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 308, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 309, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 310, "in_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 3]": "point", "[4, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 5]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 3]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | "}], "formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0))).", "identifier": 311, "in_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 293, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=1)]", "identifier": 312, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[4, 3]": "point", "[5, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[4, 3]": "point", "[5, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=1, j=3): Cell(i=2, j=4), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=2): Cell(i=4, j=3), Cell(i=4, j=1): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=1)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 313, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[4, 3]": "point", "[5, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[4, 3]": "point", "[5, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 63, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 314, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 4]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[5, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 4]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[5, 3]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=3): Cell(i=1, j=4), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=2): Cell(i=3, j=2), Cell(i=4, j=1): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=5, j=3)}]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 293, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0))).", "identifier": 63, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 39, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0))).", "identifier": 315, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0))).", "identifier": 316, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0))).", "identifier": 317, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}}
