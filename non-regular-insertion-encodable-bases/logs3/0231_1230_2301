0231_1230_2301

===========================================
Log created Wed, 31 May 2017 16:46:01

Maximum depth fully searched was 5

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 10380 inferral cache hits and 33713 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 42467 tilings in it right now.
There were 25766 tilings of which 2398 are verified.
There were 12749 SiblingNodes of which 663 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *35800* times, (17973 originating)
There were 9 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Wed, 31 May 2017 17:16:01

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 4826 inferral cache hits and 1820687 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 20857 tilings in it right now.
There were 12750 tilings of which 1863 are verified.
There were 6511 SiblingNodes of which 802 are verified.

The function splittings called the partitioning cache *1821768* times, (4536 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Wed, 31 May 2017 17:46:02

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 11139 inferral cache hits and 27300 partitioning cache hits.
The partitioning cache had 9 tilings in it right now.
The inferral cache has 30152 tilings in it right now.
There were 19268 tilings of which 1374 are verified.
There were 5076 SiblingNodes of which 270 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *29018* times, (14517 originating)
There were 1 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Wed, 31 May 2017 18:18:09

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1926 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 13377 inferral cache hits and 1752033 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 35492 tilings in it right now.
There were 22848 tilings of which 3091 are verified.
There were 6635 SiblingNodes of which 684 are verified.

The function splittings called the partitioning cache *1754049* times, (7969 originating)
There were 0 cache misses

No proof tree was found after 1926 seconds

===========================================
Log created Wed, 31 May 2017 18:40:31

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1341 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 134778 inferral cache hits and 23482 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 37478 tilings in it right now.
There were 19877 tilings of which 1854 are verified.
There were 5205 SiblingNodes of which 315 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *24986* times, (12493 originating)
There were 0 cache misses

A proof tree was found in 1341 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        └─────8
                              ├─────9
                              │     ├─────10
                              │     │     ├─────11
                              │     │     │     ├─────12
                              │     │     │     └─────13
                              │     │     │           ├─────14
                              │     │     │           │     ├─────15
                              │     │     │           │     └─────16
                              │     │     │           │           ├─────17
                              │     │     │           │           ├─────18
                              │     │     │           │           └─────19
                              │     │     │           ├─────20
                              │     │     │           └─────21
                              │     │     ├─────22
                              │     │     └─────23
                              │     └─────24
                              │           ├─────25
                              │           │     ├─────26
                              │           │     │     ├─────27
                              │           │     │     └─────28
                              │           │     ├─────29
                              │           │     ├─────30
                              │           │     └─────31
                              │           ├─────32
                              │           └─────33
                              └─────34
                                    ├─────35
                                    ├─────36
                                    └─────37

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+
|2|
+-+
|1|
+-+
1: point
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1|2| |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 7

+-+-+-+
| | |2|
+-+-+-+
|1|2| |
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 8

+-+-+-+-+
| | |2| |
+-+-+-+-+
|1|2| |3|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1|2| |1|2|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))

Label: 9

+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | |1| | |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((1, 2, 0)))

Label: 10

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 11

+-+-+-+
| |2| |
+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 12

+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((1, 2, 0)))

Label: 13

+-+-+-+
| |2| |
+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |2| |3|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 14

+-+-+-+-+
| |2| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 15

+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((1, 2, 0)))

Label: 16

+-+-+-+-+
| |2| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |2| |3| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 17

+-+-+-+-+
| |2| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 18

+-+
|1|
+-+
1: point

Label: 19

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)))

Label: 20

+-+
|1|
+-+
1: point

Label: 21

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 22

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 23

+-+
|1|
+-+
1: point

Label: 24

+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | |1| | |2| |
+-+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | |3| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+
|3| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |3| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+
| | | |4| | | | | |
+-+-+-+-+-+-+-+-+-+
| | |3| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | |2| |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((1, 2, 0)))

Label: 25

+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | |1| | |2| |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((1, 2, 0)))

Label: 26

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |4| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((1, 2, 0)))

Label: 27

+-+-+-+
| | |2|
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| | |2|
+-+-+-+
|1|2| |
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 28

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: Av+(Perm((0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |3| | |3| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((0, 1)))

Label: 29

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 30

+-+
|1|
+-+
1: point

Label: 31

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)))

Label: 32

+-+
|1|
+-+
1: point

Label: 33

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 34

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1|2| | |2| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
3: Av(Perm((1, 2, 0)))

Label: 35

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1|2| |2|
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
3: point

Label: 36

+-+
|1|
+-+
1: point

Label: 37

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1656, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1657, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1658, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1659, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Separting the rightmost point from cell Cell(i=0, j=0). | "}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1660, "in_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1661, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 15, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1657, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=3), Cell(i=5, j=4)]", "identifier": 273, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av+(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av(Perm((1, 2, 0)))", "[5, 4]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=2): Cell(i=2, j=2), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=3)}, {Cell(i=0, j=0): Cell(i=5, j=4)}]", "relation": "| Separting the leftmost point from cell Cell(i=1, j=2). | Isolating the point at Cell(i=4, j=2) in its row. | "}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 15, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1657, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 18, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=4), Cell(i=2, j=1)]", "identifier": 309, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=2): Cell(i=2, j=3), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=4)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": "| Separating the bottommost point from cell Cell(i=2, j=0). | Isolating the point at Cell(i=1, j=4) in its column. | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 51, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 18, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1657, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=3), Cell(i=3, j=1)]", "identifier": 1662, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 5]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[4, 4]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 5]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[4, 4]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=2), Cell(i=1, j=3): Cell(i=2, j=5), Cell(i=2, j=0): Cell(i=4, j=0), Cell(i=2, j=2): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=0, j=3)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": "| The reverse of: Separating the topmost point from cell Cell(i=0, j=2). | Separating the bottommost point from cell Cell(i=0, j=2). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 1659, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)))", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=1) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | Separting the rightmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1663, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[3, 4]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 1]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=3, j=0). | Isolating the point at Cell(i=2, j=2) in its row. | "}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 1664, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 18, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1657, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=4), Cell(i=3, j=6), Cell(i=6, j=5)]", "identifier": 1379, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[3, 6]": "point", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 5]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[3, 6]": "point", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 5]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2), Cell(i=2, j=3): Cell(i=4, j=3), Cell(i=3, j=0): Cell(i=5, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=4)}, {Cell(i=0, j=0): Cell(i=3, j=6)}, {Cell(i=0, j=0): Cell(i=6, j=5)}]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1657, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 18, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=6), Cell(i=6, j=3)]", "identifier": 1665, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[3, 5]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 4]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 6]": "point", "[1, 5]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[3, 2]": "Av(Perm((1, 2, 0)))", "[4, 8]": "point", "[5, 4]": "point", "[6, 3]": "Av(Perm((0, 1)))", "[7, 0]": "Av(Perm((0, 1)))", "[8, 7]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=4): Cell(i=1, j=5), Cell(i=1, j=1): Cell(i=2, j=1), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=3, j=2), Cell(i=3, j=6): Cell(i=4, j=8), Cell(i=4, j=3): Cell(i=5, j=4), Cell(i=5, j=0): Cell(i=7, j=0), Cell(i=6, j=5): Cell(i=8, j=7)}, {Cell(i=0, j=0): Cell(i=0, j=6)}, {Cell(i=0, j=0): Cell(i=6, j=3)}]", "relation": "| Separting the leftmost point from cell Cell(i=2, j=0). | Isolating the point at Cell(i=4, j=5) in its row. | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 1666, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[3, 5]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[5, 4]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[3, 5]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[5, 4]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 56, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 1657, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=3), Cell(i=5, j=2)]", "identifier": 1667, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[5, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[5, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=1): Cell(i=3, j=1), Cell(i=3, j=0): Cell(i=4, j=0)}, {Cell(i=0, j=0): Cell(i=2, j=3)}, {Cell(i=0, j=0): Cell(i=5, j=2)}]", "relation": ""}], "formal_step": "Isolated the point at Cell(i=3, j=0) in its row", "identifier": 1668, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 1]": "point", "[3, 0]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Separting the rightmost point from cell Cell(i=0, j=0). | Separting the leftmost point from cell Cell(i=2, j=0). | Separting the leftmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 56, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=0, j=0). | "}], "formal_step": "Isolated the point at Cell(i=0, j=1) in its column", "identifier": 1079, "in_tiling": {"[0, 0]": "point", "[0, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[0, 1]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=0, j=1). | The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 29, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 16, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}}
