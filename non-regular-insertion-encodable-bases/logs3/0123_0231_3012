0123_0231_3012

===========================================
Log created Sat, 10 Jun 2017 00:29:10

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1801 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 226139 inferral cache hits and 28965 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 91050 tilings in it right now.
There were 28539 tilings of which 982 are verified.
There were 11196 SiblingNodes of which 645 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *30830* times, (15423 originating)
There were 1 cache misses

No proof tree was found after 1801 seconds

===========================================
Log created Sat, 10 Jun 2017 01:46:03

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 4611 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 248667 inferral cache hits and 29865 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 93278 tilings in it right now.
There were 32904 tilings of which 1196 are verified.
There were 16217 SiblingNodes of which 867 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *31810* times, (15905 originating)
There were 0 cache misses

No proof tree was found after 4611 seconds

===========================================
Log created Sat, 10 Jun 2017 02:16:03

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 281966 inferral cache hits and 31671 partitioning cache hits.
The partitioning cache had 10 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 36078 tilings of which 1527 are verified.
There were 10647 SiblingNodes of which 618 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *33716* times, (16899 originating)
There were 5 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Sat, 10 Jun 2017 02:46:04

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 250240 inferral cache hits and 1427614 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 97873 tilings in it right now.
There were 31059 tilings of which 946 are verified.
There were 11529 SiblingNodes of which 616 are verified.

The function splittings called the partitioning cache *1429637* times, (8132 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Sat, 10 Jun 2017 03:16:05

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 331983 inferral cache hits and 1745596 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 42646 tilings of which 1225 are verified.
There were 19571 SiblingNodes of which 859 are verified.

The function splittings called the partitioning cache *1747876* times, (8839 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Sat, 10 Jun 2017 03:46:06

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 322820 inferral cache hits and 1582460 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 41097 tilings of which 1650 are verified.
There were 11511 SiblingNodes of which 561 are verified.

The function splittings called the partitioning cache *1584467* times, (7828 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Sat, 10 Jun 2017 04:34:17

Maximum depth fully searched was 3

Maximum time set at 1800 seconds

Total time taken was 2889 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4112 inferral cache hits and 10418 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 12112 tilings in it right now.
There were 25323 tilings of which 3529 are verified.
There were 21697 SiblingNodes of which 3265 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *10958* times, (5479 originating)
There were 0 cache misses

No proof tree was found after 2889 seconds

===========================================
Log created Sat, 10 Jun 2017 05:13:43

Maximum depth fully searched was 2

Maximum time set at 1800 seconds

Total time taken was 2366 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 711 inferral cache hits and 11803668 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 3200 tilings in it right now.
There were 4422 tilings of which 427 are verified.
There were 3564 SiblingNodes of which 381 are verified.

The function splittings called the partitioning cache *11803793* times, (684 originating)
There were 0 cache misses

No proof tree was found after 2366 seconds

===========================================
Log created Sat, 10 Jun 2017 05:44:01

Maximum depth fully searched was 3

Maximum time set at 1800 seconds

Total time taken was 1817 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 2497 inferral cache hits and 9722 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 22777 tilings in it right now.
There were 35896 tilings of which 3773 are verified.
There were 29229 SiblingNodes of which 3459 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *10224* times, (5112 originating)
There were 0 cache misses

No proof tree was found after 1817 seconds

===========================================
Log created Sat, 10 Jun 2017 06:15:03

Maximum depth fully searched was 2

Maximum time set at 1800 seconds

Total time taken was 1861 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 180 inferral cache hits and 16499886 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 3271 tilings in it right now.
There were 3182 tilings of which 336 are verified.
There were 2214 SiblingNodes of which 296 are verified.

The function splittings called the partitioning cache *16499967* times, (368 originating)
There were 0 cache misses

No proof tree was found after 1861 seconds

===========================================
Log created Sat, 10 Jun 2017 06:37:58

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1375 seconds

The strategies applied were:
Batch: all_cell_insertions, all_lrm_and_rlm_placements
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4690 inferral cache hits and 19695 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 57951 tilings in it right now.
There were 24030 tilings of which 1039 are verified.
There were 8436 SiblingNodes of which 420 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *20964* times, (10498 originating)
There were 2 cache misses

A proof tree was found in 1375 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        │     ├─────10
                        │     │     ├─────11
                        │     │     │     ├─────12
                        │     │     │     └─────13
                        │     │     │           ├─────14
                        │     │     │           │     ├─────15
                        │     │     │           │     └─────16
                        │     │     │           └─────17
                        │     │     └─────18
                        │     └─────19
                        │           ├─────20
                        │           └─────21
                        └─────22

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
|4| |1| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 5

+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))

Label: 6

+-+-+-+
| | |2|
+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 2)))
2: point

Label: 7

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 8

+-+-+-+-+
|4| |1| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
4: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| |5| |1| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|3| |1| | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))

Label: 9

+-+-+-+-+-+-+
|4| |5| |1| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|3| |1| | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))

Label: 10

+-+-+-+-+-+
|4| |5| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|3| |1| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|3| |1| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 11

+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| |5| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+
|4| |5| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | |4| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))

Label: 14

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))

Label: 15

+-+-+-+
| |3| |
+-+-+-+
|1| | |
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))
3: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 16

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))

Label: 17

+-+-+-+-+
| | |4| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: Av+(Perm((0, 1)))
3: point
4: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
|4| |1| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
4: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 18

+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|3| | | |4| | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| |2| | | | |2| |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))

Label: 19

+-+-+-+-+-+-+
|3| |4| |5| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
5: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
|5| |3| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)))
5: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 20

+-+-+-+-+
|4| |1| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))

Label: 21

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1)))
2: point

Label: 22

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2321, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2322, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2323, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 10, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=2, j=4)]", "identifier": 2324, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=3): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=2, j=4)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2325, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1, 2)))", "[1, 3]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2326, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2))).", "identifier": 2327, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1, 2)))", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1, 2)))", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2328, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1, 2)))", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[0, 4]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=0). | The reverse of: Inserting the left most point in to the cell Cell(i=0, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 2290, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1, 2)))", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=2). | Inserting the left most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "The components of the tiling", "identifier": 2329, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 0]": "point", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=3, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=1), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=4, j=2)}]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=0, j=3). | Inserting the bottom most point in to the cell Cell(i=0, j=3). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2330, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)))", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 1]": "point", "[6, 3]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 6]": "Av(Perm((0, 1)))", "[4, 5]": "point", "[5, 2]": "point", "[6, 1]": "Av(Perm((0, 1)))", "[7, 4]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=0). | The reverse of: Inserting the bottom most point in to the cell Cell(i=4, j=1). | Inserting the top most point in to the cell Cell(i=4, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 2331, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 1]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[0, 6]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 5]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 3]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=4). | Inserting the right most point in to the cell Cell(i=0, j=4). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 218, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=0, j=0). | Inserting the bottom most point in to the cell Cell(i=0, j=0). | The reverse of: Inserting the right most point in to the cell Cell(i=2, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 609, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=2, j=0), Cell(i=4, j=1)]", "identifier": 788, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 0]": "point", "[4, 4]": "Av+(Perm((0, 1)))", "[5, 2]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[0, 6]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 6]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=0, j=2): Cell(i=0, j=4), Cell(i=0, j=4): Cell(i=0, j=6), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=4): Cell(i=2, j=6), Cell(i=3, j=3): Cell(i=3, j=5)}, {Cell(i=0, j=0): Cell(i=2, j=0), Cell(i=1, j=1): Cell(i=4, j=1)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=4). | The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=3). | Inserting the right most point in to the cell Cell(i=0, j=3). | The reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=0). | "}], "formal_step": "We perform cell insertion into cell (4, 5); either it is empty or Av+(Perm((0, 1))).", "identifier": 18, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 1]": "point", "[4, 5]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 1]": "point", "[4, 5]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 10, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=5, j=4)]", "identifier": 2328, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[0, 4]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[0, 6]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 5]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[2, 6]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 1]": "point", "[4, 6]": "Av(Perm((0, 1)))", "[5, 4]": "Av(Perm((0, 1)))", "[6, 3]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=0, j=5): Cell(i=0, j=6), Cell(i=1, j=4): Cell(i=1, j=5), Cell(i=2, j=2): Cell(i=2, j=2), Cell(i=2, j=5): Cell(i=2, j=6), Cell(i=3, j=1): Cell(i=3, j=1), Cell(i=4, j=5): Cell(i=4, j=6), Cell(i=5, j=3): Cell(i=6, j=3)}, {Cell(i=0, j=0): Cell(i=5, j=4)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=4). | "}], "formal_step": "We perform cell insertion into cell (0, 4); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2))).", "identifier": 218, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=2, j=1). | The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0))).", "identifier": 134, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2))).", "identifier": 2332, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}}
