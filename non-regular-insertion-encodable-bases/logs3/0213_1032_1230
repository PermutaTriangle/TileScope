0213_1032_1230

===========================================
Log created Thu, 25 May 2017 09:54:18

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1124 inferral cache hits and 5140 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 6845 tilings in it right now.
There were 3356 tilings of which 388 are verified.
There were 1545 SiblingNodes of which 110 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *5488* times, (2744 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 09:56:18

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1582 inferral cache hits and 237707 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 6392 tilings in it right now.
There were 3124 tilings of which 694 are verified.
There were 1226 SiblingNodes of which 186 are verified.

The function splittings called the partitioning cache *238006* times, (1121 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 09:58:19

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1310 inferral cache hits and 4644 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 5253 tilings in it right now.
There were 2941 tilings of which 195 are verified.
There were 721 SiblingNodes of which 47 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4970* times, (2485 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 10:00:19

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1875 inferral cache hits and 63266 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 6605 tilings in it right now.
There were 3712 tilings of which 398 are verified.
There were 922 SiblingNodes of which 84 are verified.

The function splittings called the partitioning cache *63688* times, (1283 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 10:02:19

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 18109 inferral cache hits and 4490 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 6389 tilings in it right now.
There were 3220 tilings of which 265 are verified.
There were 824 SiblingNodes of which 63 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4808* times, (2404 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 10:04:20

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 27596 inferral cache hits and 94672 partitioning cache hits.
The partitioning cache had 15 tilings in it right now.
The inferral cache has 9308 tilings in it right now.
There were 4614 tilings of which 376 are verified.
There were 1128 SiblingNodes of which 108 are verified.

The function splittings called the partitioning cache *95123* times, (1440 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 10:06:31

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 130 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 404 inferral cache hits and 3528 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1699 tilings in it right now.
There were 1342 tilings of which 317 are verified.
There were 838 SiblingNodes of which 87 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3728* times, (1864 originating)
There were 0 cache misses

No proof tree was found after 130 seconds

===========================================
Log created Thu, 25 May 2017 10:09:42

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 191 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 206 inferral cache hits and 181345 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1055 tilings in it right now.
There were 1000 tilings of which 334 are verified.
There were 702 SiblingNodes of which 194 are verified.

The function splittings called the partitioning cache *181466* times, (556 originating)
There were 0 cache misses

No proof tree was found after 191 seconds

===========================================
Log created Thu, 25 May 2017 10:11:43

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 121 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 341 inferral cache hits and 1718 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 725 tilings in it right now.
There were 541 tilings of which 84 are verified.
There were 105 SiblingNodes of which 22 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1836* times, (918 originating)
There were 0 cache misses

No proof tree was found after 121 seconds

===========================================
Log created Thu, 25 May 2017 10:13:51

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 127 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 739 inferral cache hits and 9381 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 1458 tilings in it right now.
There were 1053 tilings of which 203 are verified.
There were 199 SiblingNodes of which 45 are verified.

The function splittings called the partitioning cache *9643* times, (722 originating)
There were 0 cache misses

No proof tree was found after 127 seconds

===========================================
Log created Thu, 25 May 2017 10:16:10

Maximum depth fully searched was 8

Maximum time set at 120 seconds

Total time taken was 138 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 87 inferral cache hits and 1706 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 493 tilings in it right now.
There were 698 tilings of which 69 are verified.
There were 618 SiblingNodes of which 45 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1800* times, (900 originating)
There were 0 cache misses

No proof tree was found after 138 seconds

===========================================
Log created Thu, 25 May 2017 10:18:28

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 138 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 26 inferral cache hits and 14313 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 203 tilings in it right now.
There were 260 tilings of which 81 are verified.
There were 234 SiblingNodes of which 72 are verified.

The function splittings called the partitioning cache *14354* times, (190 originating)
There were 0 cache misses

No proof tree was found after 138 seconds

===========================================
Log created Thu, 25 May 2017 10:20:30

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 121 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 140 inferral cache hits and 1333 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 306 tilings in it right now.
There were 249 tilings of which 55 are verified.
There were 64 SiblingNodes of which 21 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1424* times, (712 originating)
There were 0 cache misses

No proof tree was found after 121 seconds

===========================================
Log created Thu, 25 May 2017 10:22:42

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 131 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 444 inferral cache hits and 6599 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 799 tilings in it right now.
There were 640 tilings of which 100 are verified.
There were 147 SiblingNodes of which 38 are verified.

The function splittings called the partitioning cache *6801* times, (544 originating)
There were 0 cache misses

No proof tree was found after 131 seconds

===========================================
Log created Thu, 25 May 2017 10:24:44

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 122 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 423 inferral cache hits and 3935 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1848 tilings in it right now.
There were 1511 tilings of which 367 are verified.
There were 961 SiblingNodes of which 105 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4158* times, (2079 originating)
There were 0 cache misses

No proof tree was found after 122 seconds

===========================================
Log created Thu, 25 May 2017 10:27:58

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 193 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 300 inferral cache hits and 102573 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1598 tilings in it right now.
There were 1302 tilings of which 440 are verified.
There were 842 SiblingNodes of which 200 are verified.

The function splittings called the partitioning cache *102770* times, (988 originating)
There were 0 cache misses

No proof tree was found after 193 seconds

===========================================
Log created Thu, 25 May 2017 10:30:01

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 123 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 248 inferral cache hits and 1905 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 673 tilings in it right now.
There were 502 tilings of which 152 are verified.
There were 130 SiblingNodes of which 40 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2036* times, (1018 originating)
There were 0 cache misses

No proof tree was found after 123 seconds

===========================================
Log created Thu, 25 May 2017 10:32:03

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 121 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 860 inferral cache hits and 13683 partitioning cache hits.
The partitioning cache had 19 tilings in it right now.
The inferral cache has 1709 tilings in it right now.
There were 1245 tilings of which 213 are verified.
There were 239 SiblingNodes of which 49 are verified.

The function splittings called the partitioning cache *13977* times, (848 originating)
There were 0 cache misses

No proof tree was found after 121 seconds

===========================================
Log created Thu, 25 May 2017 10:33:50

Maximum depth fully searched was 10

Maximum time set at 120 seconds

Total time taken was 107 seconds

The strategies applied were:
Batch: all_cell_insertions, all_leftmost_column_placements
Equivalent: all_equivalent_leftmost_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 216 inferral cache hits and 2866 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 793 tilings in it right now.
There were 974 tilings of which 341 are verified.
There were 725 SiblingNodes of which 153 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3014* times, (1548 originating)
There were 4 cache misses

A proof tree was found in 107 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     │           ├─────11
                        │     │           │     ├─────12
                        │     │           │     │     ├─────13
                        │     │           │     │     └─────14
                        │     │           │     └─────15
                        │     │           └─────16
                        │     └─────17
                        │           ├─────18
                        │           │     ├─────19
                        │           │     │     ├─────20
                        │           │     │     └─────21
                        │           │     └─────22
                        │           │           ├─────23
                        │           │           │     ├─────24
                        │           │           │     └─────25
                        │           │           └─────26
                        │           └─────27
                        │                 ├─────28
                        │                 │     ├─────29
                        │                 │     │     ├─────30
                        │                 │     │     └─────31
                        │                 │     │           ├─────32
                        │                 │     │           │     ├─────33
                        │                 │     │           │     └─────34
                        │                 │     │           └─────35
                        │                 │     └─────36
                        │                 │           ├─────37
                        │                 │           └─────38
                        │                 │                 ├─────39
                        │                 │                 │     ├─────40
                        │                 │                 │     │     ├─────41
                        │                 │                 │     │     │     ├─────42
                        │                 │                 │     │     │     └─────43
                        │                 │                 │     │     └─────44
                        │                 │                 │     │           ├─────45
                        │                 │                 │     │           └─────46
                        │                 │                 │     ├─────47
                        │                 │                 │     └─────48
                        │                 │                 └─────49
                        │                 ├─────50
                        │                 └─────51
                        │                       ├─────52
                        │                       │     ├─────53
                        │                       │     └─────54
                        │                       └─────55
                        └─────56
                              ├─────57
                              └─────58

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point

Label: 6

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 7

+-+-+-+
| | |4|
+-+-+-+
|2| | |
+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
4: Av+(Perm((1, 0)))

Label: 8

+-+-+-+
| | |3|
+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
3: Av+(Perm((1, 0)))

Label: 9

+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 10

+-+-+-+
| | |3|
+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
3: Av+(Perm((1, 0)))

Label: 11

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
3: Av+(Perm((1, 0)))

Label: 12

+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
3: Av+(Perm((1, 0)))

Label: 13

+-+-+-+
| | |3|
+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
3: Av+(Perm((1, 0)))

Label: 14

+-+
|1|
+-+
1: point

Label: 15

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
3: Av(Perm((0, 1)))

Label: 16

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))

Label: 17

+-+-+-+
| | |4|
+-+-+-+
|2| | |
+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av+(Perm((1, 0)))

Label: 18

+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))

Label: 19

+-+-+-+-+
| | | |4|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
4: Av+(Perm((1, 0)))

Label: 20

+-+-+-+
| | |4|
+-+-+-+
|2| | |
+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
4: Av+(Perm((1, 0)))

Label: 21

+-+
|1|
+-+
1: point

Label: 22

+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
4: Av(Perm((1, 0)))

Label: 23

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
4: Av(Perm((1, 0)))

Label: 24

+-+-+-+-+
| |2| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point

Label: 25

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))

Label: 26

+-+
|1|
+-+
1: point

Label: 27

+-+-+-+
| | |4|
+-+-+-+
|2| | |
+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av+(Perm((1, 0)))

Label: 28

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))

Label: 29

+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))

Label: 30

+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0)))

Label: 31

+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0)))

Label: 32

+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))

Label: 33

+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))

Label: 34

+-+
|1|
+-+
1: point

Label: 35

+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))

Label: 36

+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0)))

Label: 37

+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0)))

Label: 38

+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0)))

Label: 39

+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |4| | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))

Label: 40

+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | |4| | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))

Label: 41

+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0)))

Label: 42

+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))

Label: 43

+-+
|1|
+-+
1: point

Label: 44

+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0)))

Label: 45

+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0)))

Label: 46

+-+
|1|
+-+
1: point

Label: 47

+-+
|1|
+-+
1: point

Label: 48

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Label: 49

+-+-+-+-+-+-+-+-+-+
| | | | | | | | |3|
+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |4| | |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |3| | | |
+-+-+-+-+-+-+-+-+-+
| | | |2| | | | | |
+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |3| |
+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |3| | | |
+-+-+-+-+-+-+-+-+-+
| | | |2| | | | | |
+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))

Label: 50

+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))

Label: 51

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 52

+-+-+-+
| |2| |
+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 53

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 54

+-+
|1|
+-+
1: point

Label: 55

+-+
|1|
+-+
1: point

Label: 56

+-+-+-+-+
| | | |4|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((1, 0)))

Label: 57

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))
4: Av(Perm((1, 0)))

Label: 58

+-+-+-+
| |2| |
+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 539, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 540, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 541, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 542, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 2]": "point", "[3, 3]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=2). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 32, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[2, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[2, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0)]", "identifier": 543, "in_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[3, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[3, 4]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=2), Cell(i=2, j=3): Cell(i=3, j=4)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 544, "in_tiling": {"[0, 4]": "point", "[1, 0]": "point", "[2, 2]": "point", "[3, 5]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 0]": "point", "[2, 2]": "point", "[3, 5]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0))).", "identifier": 545, "in_tiling": {"[0, 4]": "point", "[1, 0]": "point", "[2, 2]": "point", "[3, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[3, 5]": "Av+(Perm((1, 0)))", "[4, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 0]": "point", "[2, 2]": "point", "[3, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[3, 5]": "Av+(Perm((1, 0)))", "[4, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 546, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the leftmost point into column 2", "identifier": 547, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[2, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[2, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0))).", "identifier": 32, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[2, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[2, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 11, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[2, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[2, 4]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=3)]", "identifier": 379, "in_tiling": {"[0, 4]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[3, 5]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[3, 5]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=1): Cell(i=2, j=1), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=3, j=2), Cell(i=2, j=4): Cell(i=3, j=5)}, {Cell(i=0, j=0): Cell(i=1, j=3)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 548, "in_tiling": {"[0, 3]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=2, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 549, "in_tiling": {"[0, 3]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0)))", "[4, 5]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 3]": "point", "[4, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=2, j=0). | Inserting the bottom most point in to the cell Cell(i=3, j=3). | "}], "formal_step": "We perform cell insertion into cell (4, 5); either it is empty or Av+(Perm((1, 0))).", "identifier": 550, "in_tiling": {"[0, 3]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[4, 5]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[4, 5]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=4)]", "identifier": 551, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[4, 4]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 3]": "point", "[2, 5]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[5, 6]": "Av(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=1, j=3), Cell(i=1, j=4): Cell(i=2, j=5), Cell(i=2, j=1): Cell(i=3, j=1), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=2): Cell(i=4, j=2), Cell(i=4, j=5): Cell(i=5, j=6)}, {Cell(i=0, j=0): Cell(i=0, j=4)}]", "relation": "| Inserting the left most point in to the cell Cell(i=3, j=0). | "}], "formal_step": "Placing the leftmost point into column 2", "identifier": 152, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 552, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0)))", "[5, 5]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=2). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 142, "in_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0)))", "[3, 4]": "Av+(Perm((1, 0)))", "[4, 6]": "point", "[5, 7]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0)))", "[3, 4]": "Av+(Perm((1, 0)))", "[4, 6]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=4, j=6). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=3)]", "identifier": 553, "in_tiling": {"[0, 6]": "point", "[1, 4]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[4, 2]": "Av(Perm((1, 0)))", "[4, 5]": "Av+(Perm((1, 0)))", "[5, 7]": "point", "[6, 8]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 6]": "point", "[1, 4]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[4, 2]": "Av(Perm((1, 0)))", "[4, 5]": "Av+(Perm((1, 0)))", "[5, 7]": "point", "[6, 8]": "Av(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=5): Cell(i=0, j=6), Cell(i=1, j=3): Cell(i=1, j=4), Cell(i=2, j=1): Cell(i=3, j=1), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=2): Cell(i=4, j=2), Cell(i=3, j=4): Cell(i=4, j=5), Cell(i=4, j=6): Cell(i=5, j=7), Cell(i=5, j=7): Cell(i=6, j=8)}, {Cell(i=0, j=0): Cell(i=2, j=3)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 554, "in_tiling": {"[0, 5]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[5, 4]": "Av(Perm((1, 0)))", "[6, 6]": "point", "[7, 7]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[5, 4]": "Av(Perm((1, 0)))", "[6, 6]": "point", "[7, 7]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the leftmost point into column 3", "identifier": 406, "in_tiling": {"[0, 4]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 3]": "Av+(Perm((1, 0)))", "[4, 5]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 3]": "Av+(Perm((1, 0)))", "[4, 5]": "point", "[5, 6]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=5). | "}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0))).", "identifier": 353, "in_tiling": {"[0, 4]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 3]": "Av+(Perm((1, 0)))", "[4, 5]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 3]": "Av+(Perm((1, 0)))", "[4, 5]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 555, "in_tiling": {"[0, 4]": "point", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av+(Perm((1, 0)))", "[4, 3]": "Av+(Perm((1, 0)))", "[5, 5]": "point", "[6, 6]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))", "[5, 4]": "Av+(Perm((1, 0)))", "[6, 6]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=5, j=5). | Inserting the bottom most point in to the cell Cell(i=3, j=1). | "}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 353, "in_tiling": {"[0, 4]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 3]": "Av+(Perm((1, 0)))", "[4, 5]": "point", "[5, 6]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 3]": "Av+(Perm((1, 0)))", "[4, 5]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=4, j=5). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=5)]", "identifier": 556, "in_tiling": {"[0, 4]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 3]": "Av+(Perm((1, 0)))", "[4, 5]": "point", "[5, 6]": "point", "[6, 7]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 3]": "Av+(Perm((1, 0)))", "[4, 5]": "point", "[5, 6]": "point", "[6, 7]": "Av(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=4): Cell(i=0, j=4), Cell(i=1, j=2): Cell(i=1, j=2), Cell(i=2, j=1): Cell(i=2, j=1), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=3, j=3): Cell(i=3, j=3), Cell(i=4, j=5): Cell(i=5, j=6), Cell(i=5, j=6): Cell(i=6, j=7)}, {Cell(i=0, j=0): Cell(i=4, j=5)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 275, "in_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 6]": "point", "[6, 7]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 6]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=5, j=6). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=6, j=7)]", "identifier": 557, "in_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 6]": "point", "[6, 7]": "point", "[7, 8]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 6]": "point", "[6, 7]": "point", "[7, 8]": "Av(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=5): Cell(i=0, j=5), Cell(i=1, j=3): Cell(i=1, j=3), Cell(i=2, j=1): Cell(i=2, j=1), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=3, j=2): Cell(i=3, j=2), Cell(i=4, j=4): Cell(i=4, j=4), Cell(i=5, j=6): Cell(i=5, j=6), Cell(i=6, j=7): Cell(i=7, j=8)}, {Cell(i=0, j=0): Cell(i=6, j=7)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 360, "in_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0)))", "[3, 4]": "Av+(Perm((1, 0)))", "[4, 6]": "point", "[5, 7]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0)))", "[3, 4]": "Av+(Perm((1, 0)))", "[4, 6]": "point", "[5, 7]": "point", "[6, 8]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=5, j=7). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 22, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=8), Cell(i=6, j=7)]", "identifier": 558, "in_tiling": {"[0, 7]": "point", "[1, 5]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[4, 2]": "Av(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 6]": "Av+(Perm((1, 0)))", "[6, 8]": "point", "[7, 9]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 8]": "point", "[1, 5]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[4, 2]": "Av(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 6]": "point", "[6, 7]": "Av(Perm((1, 0)))", "[7, 9]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=5): Cell(i=1, j=5), Cell(i=1, j=3): Cell(i=2, j=3), Cell(i=2, j=1): Cell(i=3, j=1), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=2): Cell(i=4, j=2), Cell(i=3, j=4): Cell(i=4, j=4), Cell(i=4, j=6): Cell(i=5, j=6), Cell(i=5, j=7): Cell(i=7, j=9)}, {Cell(i=0, j=0): Cell(i=0, j=8)}, {Cell(i=0, j=0): Cell(i=6, j=7)}]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=6, j=8). | Inserting the bottom most point in to the cell Cell(i=5, j=6). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 559, "in_tiling": {"[0, 6]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[5, 3]": "Av(Perm((1, 0)))", "[6, 5]": "Av+(Perm((1, 0)))", "[7, 7]": "point", "[8, 8]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 7]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[5, 3]": "Av(Perm((1, 0)))", "[6, 5]": "point", "[7, 6]": "Av(Perm((1, 0)))", "[8, 8]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=7, j=7). | Inserting the bottom most point in to the cell Cell(i=6, j=5). | "}], "formal_step": "Placing the leftmost point into column 3", "identifier": 438, "in_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 6]": "point", "[6, 7]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 6]": "point", "[6, 7]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0))).", "identifier": 275, "in_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 6]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 6]": "point", "[6, 7]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=5, j=6). | "}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 142, "in_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0)))", "[3, 4]": "Av+(Perm((1, 0)))", "[4, 6]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0)))", "[3, 4]": "Av+(Perm((1, 0)))", "[4, 6]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 560, "in_tiling": {"[0, 4]": "point", "[1, 1]": "point", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[4, 3]": "Av(Perm((1, 0)))", "[5, 5]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 1]": "point", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[4, 3]": "Av(Perm((1, 0)))", "[5, 5]": "point", "[6, 6]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=5, j=5). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 8, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 14, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=3)}]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=3)]", "identifier": 155, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=3): Cell(i=2, j=4), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=3)}]", "relation": ""}], "formal_step": "Placing the leftmost point into column 2", "identifier": 150, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 30, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0))).", "identifier": 11, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[2, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[2, 4]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 550, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[3, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))", "[4, 5]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=2, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 14, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 12, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the leftmost point into column 1", "identifier": 8, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 7, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0))).", "identifier": 561, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))", "[1, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0))).", "identifier": 562, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": ""}}
