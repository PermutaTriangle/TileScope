0213_0231_1230

===========================================
Log created Thu, 25 May 2017 15:08:31

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 3055 inferral cache hits and 12491 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 18271 tilings in it right now.
There were 10199 tilings of which 1139 are verified.
There were 5191 SiblingNodes of which 227 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *13296* times, (6648 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Thu, 25 May 2017 15:18:33

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 601 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 2037 inferral cache hits and 982764 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 12929 tilings in it right now.
There were 7314 tilings of which 793 are verified.
There were 3930 SiblingNodes of which 307 are verified.

The function splittings called the partitioning cache *983380* times, (2479 originating)
There were 0 cache misses

No proof tree was found after 601 seconds

===========================================
Log created Thu, 25 May 2017 15:28:33

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 2977 inferral cache hits and 9045 partitioning cache hits.
The partitioning cache had 15 tilings in it right now.
The inferral cache has 9302 tilings in it right now.
There were 5881 tilings of which 639 are verified.
There were 1563 SiblingNodes of which 121 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *9644* times, (4822 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Thu, 25 May 2017 15:38:36

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 603 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 5439 inferral cache hits and 627252 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 16229 tilings in it right now.
There were 10385 tilings of which 1136 are verified.
There were 3045 SiblingNodes of which 300 are verified.

The function splittings called the partitioning cache *628263* times, (3749 originating)
There were 0 cache misses

No proof tree was found after 603 seconds

===========================================
Log created Thu, 25 May 2017 15:40:27

Maximum depth fully searched was 3

Maximum time set at 600 seconds

Total time taken was 110 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 14031 inferral cache hits and 3374 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 4777 tilings in it right now.
There were 2619 tilings of which 414 are verified.
There were 737 SiblingNodes of which 94 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3616* times, (1808 originating)
There were 0 cache misses

A proof tree was found in 110 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     └─────9
                  └─────10
                        ├─────11
                        └─────12

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
We use his sibling for the next strategy
+-+-+
|1|2|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: point

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+-+
|1|2|
+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+
|1|1|2|
+-+-+-+
1: point
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))

Label: 5

+-+-+-+
| |2|3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 6

+-+-+-+
| |1| |
+-+-+-+
|1| |2|
+-+-+-+
1: point
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))

Label: 7

+-+-+
|1|2|
+-+-+
1: point
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))

Label: 8

+-+
|1|
+-+
1: point

Label: 9

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 10

+-+-+-+
| | |3|
+-+-+-+
|1| | |
+-+-+-+
| |1|2|
+-+-+-+
1: point
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 11

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))

Label: 12

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 139, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 49, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1)]", "identifier": 140, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=0): Cell(i=2, j=0)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 141, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=3, j=3). | Isolating the point at Cell(i=3, j=4) in its column. | "}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 142, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=2) in its row. | The reverse of: Isolating the point at Cell(i=3, j=2) in its row. | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 49, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=0) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=2)]", "identifier": 143, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=2)}]", "relation": "| Isolating the point at Cell(i=2, j=2) in its row. | The reverse of: Isolating the point at Cell(i=2, j=2) in its row. | "}], "formal_step": "Isolated the point at Cell(i=0, j=0) in its row", "identifier": 144, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 0]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=0, j=0). | The reverse of: Separting the rightmost point from cell Cell(i=1, j=0). | Separting the leftmost point from cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0))).", "identifier": 49, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0))).", "identifier": 145, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": ""}}
