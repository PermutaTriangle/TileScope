0132_1320_2301

===========================================
Log created Wed, 31 May 2017 01:31:50

Maximum depth fully searched was 5

Maximum time set at 1800 seconds

Total time taken was 1802 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 20452 inferral cache hits and 48515 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 65655 tilings in it right now.
There were 31947 tilings of which 5870 are verified.
There were 13128 SiblingNodes of which 1057 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *51474* times, (25878 originating)
There were 17 cache misses

No proof tree was found after 1802 seconds

===========================================
Log created Wed, 31 May 2017 02:02:32

Maximum depth fully searched was 5

Maximum time set at 1800 seconds

Total time taken was 1840 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 12213 inferral cache hits and 2857821 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 37591 tilings in it right now.
There were 19071 tilings of which 3629 are verified.
There were 7869 SiblingNodes of which 776 are verified.

The function splittings called the partitioning cache *2859640* times, (8024 originating)
There were 0 cache misses

No proof tree was found after 1840 seconds

===========================================
Log created Wed, 31 May 2017 02:32:33

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1801 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 15243 inferral cache hits and 32811 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 40014 tilings in it right now.
There were 20252 tilings of which 2678 are verified.
There were 4834 SiblingNodes of which 364 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *34874* times, (17437 originating)
There were 0 cache misses

No proof tree was found after 1801 seconds

===========================================
Log created Wed, 31 May 2017 03:02:34

Maximum depth fully searched was 5

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 26833 inferral cache hits and 4734487 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 70280 tilings in it right now.
There were 35349 tilings of which 5448 are verified.
There were 8828 SiblingNodes of which 829 are verified.

The function splittings called the partitioning cache *4737795* times, (13738 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Wed, 31 May 2017 03:32:35

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 186756 inferral cache hits and 36267 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 58255 tilings in it right now.
There were 26237 tilings of which 4081 are verified.
There were 6164 SiblingNodes of which 521 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *38560* times, (19280 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Wed, 31 May 2017 04:02:36

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 213146 inferral cache hits and 1502460 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 69016 tilings in it right now.
There were 30316 tilings of which 4048 are verified.
There were 7403 SiblingNodes of which 679 are verified.

The function splittings called the partitioning cache *1505222* times, (10563 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Wed, 31 May 2017 04:32:40

Maximum depth fully searched was 10

Maximum time set at 1800 seconds

Total time taken was 1803 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1230 inferral cache hits and 8112 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 4603 tilings in it right now.
There were 3576 tilings of which 1831 are verified.
There were 1824 SiblingNodes of which 439 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *8548* times, (4350 originating)
There were 7 cache misses

No proof tree was found after 1803 seconds

===========================================
Log created Wed, 31 May 2017 05:05:37

Maximum depth fully searched was 10

Maximum time set at 1800 seconds

Total time taken was 1976 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1854 inferral cache hits and 5369802 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 6330 tilings in it right now.
There were 6040 tilings of which 3082 are verified.
There were 3524 SiblingNodes of which 1086 are verified.

The function splittings called the partitioning cache *5370385* times, (3507 originating)
There were 0 cache misses

No proof tree was found after 1976 seconds

===========================================
Log created Wed, 31 May 2017 05:36:05

Maximum depth fully searched was 5

Maximum time set at 1800 seconds

Total time taken was 1827 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 962 inferral cache hits and 5131 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2035 tilings in it right now.
There were 1478 tilings of which 387 are verified.
There were 312 SiblingNodes of which 79 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *5456* times, (2728 originating)
There were 0 cache misses

No proof tree was found after 1827 seconds

===========================================
Log created Wed, 31 May 2017 06:07:09

Maximum depth fully searched was 6

Maximum time set at 1800 seconds

Total time taken was 1863 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 3499 inferral cache hits and 78303 partitioning cache hits.
The partitioning cache had 27 tilings in it right now.
The inferral cache has 5939 tilings in it right now.
There were 3801 tilings of which 860 are verified.
There were 591 SiblingNodes of which 118 are verified.

The function splittings called the partitioning cache *79150* times, (2908 originating)
There were 0 cache misses

No proof tree was found after 1863 seconds

===========================================
Log created Wed, 31 May 2017 06:39:00

Maximum depth fully searched was 11

Maximum time set at 1800 seconds

Total time taken was 1910 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 121 inferral cache hits and 3400 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 658 tilings in it right now.
There were 683 tilings of which 243 are verified.
There were 571 SiblingNodes of which 132 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3570* times, (1785 originating)
There were 0 cache misses

No proof tree was found after 1910 seconds

===========================================
Log created Wed, 31 May 2017 07:21:27

Maximum depth fully searched was 11

Maximum time set at 1800 seconds

Total time taken was 2545 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 139 inferral cache hits and 102016 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 755 tilings in it right now.
There were 826 tilings of which 295 are verified.
There were 704 SiblingNodes of which 174 are verified.

The function splittings called the partitioning cache *102211* times, (1279 originating)
There were 0 cache misses

No proof tree was found after 2545 seconds

===========================================
Log created Wed, 31 May 2017 07:51:36

Maximum depth fully searched was 5

Maximum time set at 1800 seconds

Total time taken was 1808 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 704 inferral cache hits and 3617 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 955 tilings in it right now.
There were 777 tilings of which 90 are verified.
There were 129 SiblingNodes of which 27 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3840* times, (1920 originating)
There were 0 cache misses

No proof tree was found after 1808 seconds

===========================================
Log created Wed, 31 May 2017 08:23:05

Maximum depth fully searched was 6

Maximum time set at 1800 seconds

Total time taken was 1885 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 2590 inferral cache hits and 90940 partitioning cache hits.
The partitioning cache had 34 tilings in it right now.
The inferral cache has 2499 tilings in it right now.
There were 2144 tilings of which 176 are verified.
There were 307 SiblingNodes of which 52 are verified.

The function splittings called the partitioning cache *91605* times, (2454 originating)
There were 0 cache misses

No proof tree was found after 1885 seconds

===========================================
Log created Wed, 31 May 2017 08:38:14

Maximum depth fully searched was 9

Maximum time set at 1800 seconds

Total time taken was 907 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1733 inferral cache hits and 13879 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 6521 tilings in it right now.
There were 5526 tilings of which 1905 are verified.
There were 3196 SiblingNodes of which 529 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *14600* times, (7398 originating)
There were 10 cache misses

A proof tree was found in 907 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     └─────11
                        │           ├─────12
                        │           │     ├─────13
                        │           │     │     ├─────14
                        │           │     │     │     ├─────15
                        │           │     │     │     │     ├─────16
                        │           │     │     │     │     └─────17
                        │           │     │     │     └─────18
                        │           │     │     └─────19
                        │           │     └─────20
                        │           │           ├─────21
                        │           │           └─────22
                        │           └─────23
                        │                 ├─────24
                        │                 │     ├─────25
                        │                 │     │     ├─────26
                        │                 │     │     │     ├─────27
                        │                 │     │     │     └─────28
                        │                 │     │     └─────29
                        │                 │     └─────30
                        │                 └─────31
                        └─────32
                              ├─────33
                              │     ├─────34
                              │     └─────35
                              └─────36
                                    ├─────37
                                    │     ├─────38
                                    │     └─────39
                                    └─────40
                                          ├─────41
                                          ├─────42
                                          │     ├─────43
                                          │     │     ├─────44
                                          │     │     └─────45
                                          │     └─────46
                                          └─────47
                                                ├─────48
                                                │     ├─────49
                                                │     │     ├─────50
                                                │     │     │     ├─────51
                                                │     │     │     └─────52
                                                │     │     │           ├─────53
                                                │     │     │           └─────54
                                                │     │     │                 ├─────55
                                                │     │     │                 │     ├─────56
                                                │     │     │                 │     │     ├─────57
                                                │     │     │                 │     │     └─────58
                                                │     │     │                 │     │           ├─────59
                                                │     │     │                 │     │           └─────60
                                                │     │     │                 │     │                 ├─────61
                                                │     │     │                 │     │                 └─────62
                                                │     │     │                 │     └─────63
                                                │     │     │                 │           ├─────64
                                                │     │     │                 │           └─────65
                                                │     │     │                 │                 ├─────66
                                                │     │     │                 │                 │     ├─────67
                                                │     │     │                 │                 │     │     ├─────68
                                                │     │     │                 │                 │     │     └─────69
                                                │     │     │                 │                 │     └─────70
                                                │     │     │                 │                 └─────71
                                                │     │     │                 └─────72
                                                │     │     └─────73
                                                │     └─────74
                                                │           ├─────75
                                                │           │     ├─────76
                                                │           │     │     ├─────77
                                                │           │     │     │     ├─────78
                                                │           │     │     │     └─────79
                                                │           │     │     │           ├─────80
                                                │           │     │     │           └─────81
                                                │           │     │     └─────82
                                                │           │     └─────83
                                                │           │           ├─────84
                                                │           │           └─────85
                                                │           └─────86
                                                └─────87
                                                      ├─────88
                                                      └─────89

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 6

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 7

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 8

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 9

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 10

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
3: Av(Perm((0, 1)))

Label: 11

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 12

+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 13

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 14

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 15

+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 16

+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 17

+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 18

+-+
|1|
+-+
1: point

Label: 19

+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 20

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))

Label: 21

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 22

+-+
|1|
+-+
1: Av+(Perm((0, 1)))

Label: 23

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((0, 1)))

Label: 24

+-+-+-+-+-+-+-+-+
| | |5| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |4| | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
5: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |5| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
5: Av+(Perm((0, 1)))

Label: 25

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((0, 1)))

Label: 26

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |5| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((0, 1)))

Label: 27

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
3: Av(Perm((0, 1)))

Label: 28

+-+-+-+-+-+
| |5| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
| |4| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((0, 1)))

Label: 29

+-+
|1|
+-+
1: point

Label: 30

+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((1, 0)))

Label: 31

+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | |4| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 32

+-+-+-+
| |4| |
+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))

Label: 33

+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 0)))

Label: 34

+-+-+-+
|2| | |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 35

+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 36

+-+-+-+
| |4| |
+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))

Label: 37

+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 38

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 39

+-+
|1|
+-+
1: point

Label: 40

+-+-+-+
| |4| |
+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 41

+-+-+-+-+
| |1| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point

Label: 42

+-+-+-+-+
| |4| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 43

+-+-+-+
| |4| |
+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 44

+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((1, 0)))

Label: 45

+-+-+-+
| |4| |
+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 46

+-+
|1|
+-+
1: point

Label: 47

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |4| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))

Label: 48

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 49

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 50

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 51

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 52

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 53

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 54

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 55

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 56

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 57

+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 58

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 59

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 60

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 61

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 62

+-+
|1|
+-+
1: point

Label: 63

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((0, 1)))

Label: 64

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 65

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))

Label: 66

+-+-+-+-+-+-+-+
| | |5| | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | |4| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((0, 1)))

Label: 67

+-+-+-+-+-+-+-+
| |4| | | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((0, 1)))

Label: 68

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
3: Av(Perm((0, 1)))

Label: 69

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 70

+-+
|1|
+-+
1: point

Label: 71

+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | |5| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |4| | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))
5: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 72

+-+
|1|
+-+
1: point

Label: 73

+-+
|1|
+-+
1: point

Label: 74

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))

Label: 75

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |4| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))

Label: 76

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 77

+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 78

+-+-+-+
| |2| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 79

+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 80

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 81

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |4| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))

Label: 82

+-+
|1|
+-+
1: point

Label: 83

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |4| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 84

+-+-+-+
| |4| |
+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 85

+-+
|1|
+-+
1: point

Label: 86

+-+
|1|
+-+
1: point

Label: 87

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |4| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 88

+-+-+-+
| |4| |
+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 89

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1939, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1940, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1941, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1942, "in_tiling": {"[0, 0]": "point", "[1, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=1, j=2). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1943, "in_tiling": {"[0, 0]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1))).", "identifier": 1944, "in_tiling": {"[0, 0]": "point", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 5]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 4]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[5, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=1, j=3). | "}, {"children": [{"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 1942, "in_tiling": {"[0, 0]": "point", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=1, j=2). | "}, {"children": [], "formal_step": "recurse", "identifier": 1945, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0))).", "identifier": 791, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1)]", "identifier": 1946, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=3): Cell(i=2, j=4), Cell(i=2, j=2): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1947, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 2]": "Av+(Perm((0, 1)))", "[5, 4]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 3]": "point", "[5, 2]": "Av(Perm((0, 1)))", "[6, 5]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=2). | "}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 1948, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 5]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 2]": "Av(Perm((0, 1)))", "[4, 4]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 5]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 2]": "Av(Perm((0, 1)))", "[4, 4]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 1942, "in_tiling": {"[0, 0]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "Av(Perm((1, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=1, j=2). | Inserting the right most point in to the cell Cell(i=1, j=2). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 15, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0)]", "identifier": 1949, "in_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 5]": "Av(Perm((1, 0)))", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 5]": "Av(Perm((1, 0)))", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=1, j=3): Cell(i=1, j=4), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=2, j=4): Cell(i=3, j=5), Cell(i=3, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": ""}], "formal_step": "Placing the leftmost point into column 1", "identifier": 1945, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 1943, "in_tiling": {"[0, 0]": "point", "[1, 5]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "Av(Perm((1, 0)))", "[4, 4]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=2, j=1). | Inserting the bottom most point in to the cell Cell(i=1, j=3). | "}, {"children": [], "formal_step": "recurse", "identifier": 1950, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 6]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 4]": "Av(Perm((1, 0)))", "[4, 5]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=2, j=2). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0))).", "identifier": 328, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 6]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 4]": "Av(Perm((1, 0)))", "[4, 5]": "point"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=2, j=2). | "}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1)]", "identifier": 1951, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 5]": "Av+(Perm((0, 1)))", "[3, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 4]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 5]": "Av+(Perm((0, 1)))", "[3, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 4]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=4): Cell(i=2, j=5), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=3): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1952, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 2]": "Av+(Perm((0, 1)))", "[5, 4]": "Av+(Perm((1, 0)))", "[6, 5]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 7]": "point", "[4, 3]": "point", "[5, 2]": "Av(Perm((0, 1)))", "[6, 5]": "Av+(Perm((1, 0)))", "[7, 6]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=2). | "}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 1953, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 8]": "Av+(Perm((0, 1)))", "[3, 2]": "Av(Perm((0, 1)))", "[4, 6]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[5, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[6, 5]": "point", "[7, 7]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 6]": "Av+(Perm((0, 1)))", "[3, 2]": "Av(Perm((0, 1)))", "[4, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[5, 5]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=4, j=4). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1954, "in_tiling": {"[0, 1]": "point", "[1, 7]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 6]": "Av(Perm((0, 1)))", "[4, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[5, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[6, 3]": "point", "[7, 5]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 6]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 5]": "Av(Perm((0, 1)))", "[5, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[6, 4]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=4, j=2). | Inserting the top most point in to the cell Cell(i=2, j=0). | "}], "formal_step": "Placing the leftmost point into column 1", "identifier": 1950, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 6]": "Av+(Perm((0, 1)))", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 3]": "point", "[5, 5]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=2, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1))).", "identifier": 1955, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0))).", "identifier": 384, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1956, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[2, 1]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1957, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 3]": "Av+(Perm((1, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "Av(Perm((1, 0)))", "[4, 5]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=0). | Inserting the top most point in to the cell Cell(i=3, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((1, 0))).", "identifier": 1958, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[2, 3]": "Av(Perm((1, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[2, 3]": "Av(Perm((1, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 57, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 616, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=0, j=2): Cell(i=1, j=2), Cell(i=1, j=1): Cell(i=2, j=1)}, {Cell(i=0, j=0): Cell(i=0, j=3)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 1959, "in_tiling": {"[0, 3]": "point", "[1, 2]": "point", "[1, 4]": "point", "[2, 0]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "point", "[1, 4]": "point", "[2, 0]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 1957, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 3]": "Av+(Perm((1, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 3]": "Av+(Perm((1, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 516, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1))).", "identifier": 398, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=1)]", "identifier": 1457, "in_tiling": {"[0, 4]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 5]": "Av+(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 5]": "Av+(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=1, j=4): Cell(i=1, j=5), Cell(i=2, j=1): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1960, "in_tiling": {"[0, 0]": "point", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1961, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 4]": "point", "[2, 0]": "point", "[3, 5]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 4]": "point", "[2, 0]": "point", "[3, 5]": "point", "[4, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1962, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1963, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 5]": "point", "[2, 0]": "point", "[3, 4]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 5]": "point", "[2, 0]": "point", "[3, 4]": "point", "[4, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 1514, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 5]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 5]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=2)]", "identifier": 1964, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 6]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 5]": "point", "[3, 3]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 6]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 5]": "point", "[3, 3]": "point", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=3): Cell(i=1, j=4), Cell(i=1, j=5): Cell(i=1, j=6), Cell(i=2, j=4): Cell(i=2, j=5), Cell(i=3, j=2): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=4, j=2)}]", "relation": ""}], "formal_step": "Placing the rightmost point into column 1", "identifier": 1965, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1))).", "identifier": 1966, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 1967, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1968, "in_tiling": {"[0, 0]": "point", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 5]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 3]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=4). | "}, {"children": [], "formal_step": "recurse", "identifier": 1365, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 5]": "Av+(Perm((0, 1)))", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 5]": "Av+(Perm((0, 1)))", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 172, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 7]": "Av+(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 4]": "point", "[5, 6]": "point", "[6, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 5]": "Av+(Perm((0, 1)))", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=2, j=3). | "}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1)]", "identifier": 1969, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 8]": "Av+(Perm((0, 1)))", "[3, 5]": "point", "[4, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 6]": "Av(Perm((1, 0)))", "[5, 7]": "point", "[6, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 8]": "Av+(Perm((0, 1)))", "[3, 6]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[5, 5]": "point", "[6, 7]": "point", "[7, 3]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=7): Cell(i=2, j=8), Cell(i=2, j=5): Cell(i=3, j=6), Cell(i=3, j=3): Cell(i=4, j=4), Cell(i=4, j=4): Cell(i=5, j=5), Cell(i=5, j=6): Cell(i=6, j=7), Cell(i=6, j=2): Cell(i=7, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=3, j=4). | Inserting the right most point in to the cell Cell(i=3, j=4). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1970, "in_tiling": {"[0, 1]": "point", "[1, 8]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 7]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[5, 5]": "Av(Perm((1, 0)))", "[6, 6]": "point", "[7, 2]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 7]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 6]": "Av(Perm((0, 1)))", "[5, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[6, 5]": "point", "[7, 3]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=4, j=3). | Inserting the top most point in to the cell Cell(i=2, j=0). | "}], "formal_step": "Placing the leftmost point into column 1", "identifier": 1365, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 5]": "Av+(Perm((0, 1)))", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 7]": "Av+(Perm((0, 1)))", "[2, 4]": "point", "[3, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 5]": "Av(Perm((1, 0)))", "[4, 6]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=2, j=3). | "}], "formal_step": "We perform cell insertion into cell (1, 5); either it is empty or Av+(Perm((0, 1))).", "identifier": 1971, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 5]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 5]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 3); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1))).", "identifier": 1514, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 5]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 5]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 1972, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 5]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 6]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 5]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 6]": "point", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=3): Cell(i=1, j=3), Cell(i=1, j=5): Cell(i=1, j=5), Cell(i=2, j=4): Cell(i=2, j=4), Cell(i=3, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=6)}]", "relation": ""}], "formal_step": "Placing the rightmost point into column 1", "identifier": 1967, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 1461, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=4)]", "identifier": 1973, "in_tiling": {"[0, 4]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 5]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 5]": "point", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=3): Cell(i=2, j=3), Cell(i=2, j=4): Cell(i=3, j=5), Cell(i=3, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=4)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1974, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 1461, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1463, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the leftmost point into column 0", "identifier": 517, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1))).", "identifier": 515, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=3)]", "identifier": 1975, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=0, j=2): Cell(i=1, j=2), Cell(i=1, j=3): Cell(i=2, j=4), Cell(i=2, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=0, j=3)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 398, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 1469, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 5]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 5]": "point", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=2): Cell(i=1, j=2), Cell(i=1, j=4): Cell(i=1, j=4), Cell(i=2, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=5)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((1, 0))).", "identifier": 1463, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=5)]", "identifier": 1976, "in_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "Av(Perm((1, 0)))", "[3, 6]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "Av(Perm((1, 0)))", "[3, 6]": "point", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=3): Cell(i=1, j=3), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2), Cell(i=1, j=4): Cell(i=2, j=4), Cell(i=2, j=5): Cell(i=3, j=6), Cell(i=3, j=1): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=0, j=5)}]", "relation": ""}], "formal_step": "Placing the leftmost point into column 1", "identifier": 1977, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 516, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 1978, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 5]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 5]": "point", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=2): Cell(i=1, j=2), Cell(i=1, j=4): Cell(i=1, j=4), Cell(i=2, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=5)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((1, 0))).", "identifier": 1459, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the rightmost point into column 1", "identifier": 516, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((1, 0))).", "identifier": 506, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av(Perm((1, 0)))", "[2, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av(Perm((1, 0)))", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1))).", "identifier": 395, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av(Perm((1, 0)))", "[2, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "Av(Perm((1, 0)))", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the leftmost point into column 0", "identifier": 57, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1))).", "identifier": 10, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1))).", "identifier": 1979, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1))).", "identifier": 1980, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}}
