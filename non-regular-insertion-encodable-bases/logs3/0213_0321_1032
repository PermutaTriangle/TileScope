0213_0321_1032

===========================================
Log created Wed, 07 Jun 2017 23:22:20

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 97874 inferral cache hits and 15046 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 39643 tilings in it right now.
There were 13809 tilings of which 388 are verified.
There were 5604 SiblingNodes of which 281 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *16070* times, (8043 originating)
There were 1 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Wed, 07 Jun 2017 23:32:21

Maximum depth fully searched was 3

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 116360 inferral cache hits and 16507 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 43834 tilings in it right now.
There were 17007 tilings of which 483 are verified.
There were 8340 SiblingNodes of which 386 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *17636* times, (8834 originating)
There were 2 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Wed, 07 Jun 2017 23:42:21

Maximum depth fully searched was 3

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 120661 inferral cache hits and 15697 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 44400 tilings in it right now.
There were 17187 tilings of which 687 are verified.
There were 5356 SiblingNodes of which 315 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *16770* times, (8417 originating)
There were 4 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Wed, 07 Jun 2017 23:52:21

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 121301 inferral cache hits and 356447 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 48078 tilings in it right now.
There were 16461 tilings of which 409 are verified.
There were 6301 SiblingNodes of which 303 are verified.

The function splittings called the partitioning cache *357601* times, (4180 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Thu, 08 Jun 2017 00:02:22

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 132163 inferral cache hits and 231799 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 49769 tilings in it right now.
There were 19187 tilings of which 554 are verified.
There were 9518 SiblingNodes of which 442 are verified.

The function splittings called the partitioning cache *233084* times, (4315 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Thu, 08 Jun 2017 00:12:23

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 139262 inferral cache hits and 291747 partitioning cache hits.
The partitioning cache had 12 tilings in it right now.
The inferral cache has 50003 tilings in it right now.
There were 19702 tilings of which 827 are verified.
There were 6218 SiblingNodes of which 408 are verified.

The function splittings called the partitioning cache *292982* times, (4226 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Thu, 08 Jun 2017 00:23:13

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 649 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 2637 inferral cache hits and 8845 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 9975 tilings in it right now.
There were 6658 tilings of which 683 are verified.
There were 3715 SiblingNodes of which 401 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *9424* times, (4712 originating)
There were 0 cache misses

No proof tree was found after 649 seconds

===========================================
Log created Thu, 08 Jun 2017 00:33:14

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 2090 inferral cache hits and 1614721 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 7570 tilings in it right now.
There were 5380 tilings of which 577 are verified.
There were 3020 SiblingNodes of which 363 are verified.

The function splittings called the partitioning cache *1615143* times, (1696 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Thu, 08 Jun 2017 00:36:46

Maximum depth fully searched was 3

Maximum time set at 600 seconds

Total time taken was 210 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 841 inferral cache hits and 4399 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 12447 tilings in it right now.
There were 5399 tilings of which 211 are verified.
There were 1675 SiblingNodes of which 107 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4704* times, (2352 originating)
There were 0 cache misses

A proof tree was found in 210 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        │     ├─────10
                        │     │     ├─────11
                        │     │     └─────12
                        │     │           ├─────13
                        │     │           │     ├─────14
                        │     │           │     └─────15
                        │     │           └─────16
                        │     └─────17
                        └─────18

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
4: Av(Perm((1, 0)))

Label: 5

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 6

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 7

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)))
2: point

Label: 8

+-+-+-+-+-+-+
|4| | |5| | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((1, 0)))
3: point
4: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
5: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| | | |2| | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((1, 0)))
3: point
4: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 9

+-+-+-+-+-+-+
|4| | | |1| |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av(Perm((0, 2, 1)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|3| | |1| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av(Perm((0, 2, 1)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 10

+-+-+-+-+
|4| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 11

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 12

+-+-+-+-+
|4| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| |3| | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 13

+-+-+-+-+-+-+
|4| |3| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|4| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av+(Perm((0, 2, 1)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 14

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 15

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)))
2: point

Label: 16

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Label: 17

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 0)))
2: point

Label: 18

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 257, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 258, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 259, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=2, j=0), Cell(i=3, j=3)]", "identifier": 260, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 3]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 3]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=0, j=2): Cell(i=0, j=4), Cell(i=1, j=1): Cell(i=1, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0), Cell(i=1, j=1): Cell(i=3, j=3)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 261, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 169, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 259, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=0), Cell(i=2, j=1)]", "identifier": 244, "in_tiling": {"[0, 6]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 1)))", "[2, 4]": "Av(Perm((1, 0)))", "[2, 6]": "Av(Perm((1, 0)))", "[3, 0]": "Av(Perm((0, 2, 1)))", "[4, 1]": "point", "[5, 5]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 1]": "point", "[3, 3]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=0, j=2): Cell(i=0, j=4), Cell(i=1, j=1): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=1, j=1): Cell(i=2, j=1)}]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=2). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 9, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=5, j=5)]", "identifier": 262, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "out_tiling": {"[0, 7]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 1)))", "[2, 4]": "Av(Perm((1, 0)))", "[2, 7]": "Av(Perm((1, 0)))", "[3, 0]": "Av(Perm((0, 2, 1)))", "[4, 1]": "point", "[5, 5]": "Av(Perm((1, 0)))", "[6, 6]": "point"}, "recurse": "[{Cell(i=0, j=6): Cell(i=0, j=7), Cell(i=1, j=3): Cell(i=1, j=3), Cell(i=2, j=2): Cell(i=2, j=2), Cell(i=2, j=4): Cell(i=2, j=4), Cell(i=2, j=6): Cell(i=2, j=7), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=4, j=1): Cell(i=4, j=1), Cell(i=5, j=5): Cell(i=6, j=6)}, {Cell(i=0, j=0): Cell(i=5, j=5)}]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=1). | The reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=0). | Inserting the right most point in to the cell Cell(i=2, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 154, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=0), Cell(i=5, j=2)]", "identifier": 121, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[0, 5]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "Av(Perm((1, 0)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 5]": "Av(Perm((1, 0)))", "[5, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[0, 5]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "Av(Perm((1, 0)))", "[2, 1]": "point", "[3, 3]": "Av(Perm((1, 0)))", "[4, 4]": "point", "[5, 2]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=3), Cell(i=0, j=3): Cell(i=0, j=5), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=3), Cell(i=3, j=2): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=1, j=1): Cell(i=5, j=2)}]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=3, j=3). | Inserting the top most point in to the cell Cell(i=3, j=3). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=5, j=0)]", "identifier": 263, "in_tiling": {"[0, 4]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point", "[3, 4]": "Av+(Perm((1, 0)))", "[4, 0]": "Av(Perm((0, 2, 1)))", "[5, 3]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)))", "[0, 6]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point", "[3, 5]": "point", "[4, 6]": "Av(Perm((1, 0)))", "[5, 0]": "Av(Perm((0, 2, 1)))", "[6, 3]": "point"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=0, j=5): Cell(i=0, j=6), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=1): Cell(i=2, j=2), Cell(i=3, j=4): Cell(i=3, j=5), Cell(i=4, j=5): Cell(i=4, j=6), Cell(i=5, j=2): Cell(i=6, j=3)}, {Cell(i=0, j=0): Cell(i=5, j=0)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((1, 0))).", "identifier": 169, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((1, 0)))", "[3, 0]": "Av(Perm((0, 2, 1)))", "[4, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 5, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2))).", "identifier": 96, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}}
