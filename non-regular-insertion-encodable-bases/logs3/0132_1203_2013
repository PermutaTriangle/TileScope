0132_1203_2013

===========================================
Log created Sat, 27 May 2017 00:26:24

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4116 inferral cache hits and 13047 partitioning cache hits.
The partitioning cache had 13 tilings in it right now.
The inferral cache has 20138 tilings in it right now.
There were 10922 tilings of which 736 are verified.
There were 5386 SiblingNodes of which 218 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *13876* times, (6946 originating)
There were 1 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Sat, 27 May 2017 00:36:24

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 3496 inferral cache hits and 949203 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 15934 tilings in it right now.
There were 8757 tilings of which 925 are verified.
There were 4405 SiblingNodes of which 435 are verified.

The function splittings called the partitioning cache *949967* times, (3177 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Sat, 27 May 2017 00:46:26

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 601 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 2619 inferral cache hits and 9928 partitioning cache hits.
The partitioning cache had 15 tilings in it right now.
The inferral cache has 9535 tilings in it right now.
There were 6021 tilings of which 616 are verified.
There were 1809 SiblingNodes of which 146 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *10592* times, (5296 originating)
There were 0 cache misses

No proof tree was found after 601 seconds

===========================================
Log created Sat, 27 May 2017 00:56:26

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6089 inferral cache hits and 595798 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 16761 tilings in it right now.
There were 10246 tilings of which 1005 are verified.
There were 3055 SiblingNodes of which 325 are verified.

The function splittings called the partitioning cache *596690* times, (3435 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Sat, 27 May 2017 01:06:27

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 69456 inferral cache hits and 14693 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 22264 tilings in it right now.
There were 11276 tilings of which 993 are verified.
There were 3140 SiblingNodes of which 251 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *15674* times, (7845 originating)
There were 1 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Sat, 27 May 2017 01:14:10

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 463 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 89909 inferral cache hits and 303888 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 29289 tilings in it right now.
There were 14464 tilings of which 1584 are verified.
There were 3856 SiblingNodes of which 451 are verified.

The function splittings called the partitioning cache *305106* times, (4205 originating)
There were 0 cache misses

A proof tree was found in 463 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     │     ├─────8
                  │     │     │     └─────9
                  │     │     │           ├─────10
                  │     │     │           └─────11
                  │     │     │                 ├─────12
                  │     │     │                 └─────13
                  │     │     └─────14
                  │     │           ├─────15
                  │     │           └─────16
                  │     └─────17
                  │           ├─────18
                  │           └─────19
                  └─────20

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+
|1|2|
+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+-+
|1|2|
+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))

Label: 5

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |5| | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 6

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))

Label: 7

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
2: point

Label: 8

+-+-+
| |1|
+-+-+
|1| |
+-+-+
1: point

Label: 9

+-+-+
| |2|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
2: point

Label: 10

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
2: point

Label: 11

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))

Label: 14

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
4: Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |5| | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 15

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |5| | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))

Label: 16

+-+
|1|
+-+
1: point

Label: 17

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |5| | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
5: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | | |5| | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
5: Av(Perm((1, 0)))

Label: 18

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))

Label: 19

+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((1, 0)))
3: point

Label: 20

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))
2: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1014, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1015, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1016, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1017, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 1015, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 4, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 1005, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[4, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=3)}, {Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=3): Cell(i=3, j=4), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=2): Cell(i=4, j=2)}]", "relation": "| Separting the leftmost point from cell Cell(i=1, j=0). | Isolating the point at Cell(i=3, j=2) in its row. | "}], "formal_step": "Isolated the point at Cell(i=1, j=2) in its column", "identifier": 1018, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[1, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[1, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3))).", "identifier": 50, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[1, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=2) in its column. | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 242, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[4, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=3) in its column. | The reverse of: Separating the topmost point from cell Cell(i=1, j=2). | "}, {"children": [], "formal_step": "recurse", "identifier": 1015, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 20, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[3, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 5]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[4, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=3): Cell(i=2, j=3), Cell(i=3, j=4): Cell(i=3, j=4), Cell(i=4, j=0): Cell(i=4, j=0), Cell(i=4, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=5)}]", "relation": "| Separating the topmost point from cell Cell(i=3, j=2). | Isolating the point at Cell(i=2, j=4) in its column. | The reverse of: Isolating the point at Cell(i=1, j=5) in its column. | "}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3))).", "identifier": 4, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 4, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 68, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 1019, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[4, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[4, 5]": "Av(Perm((1, 0)))", "[5, 6]": "point", "[6, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[6, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=0): Cell(i=6, j=0), Cell(i=3, j=2): Cell(i=6, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=3), Cell(i=1, j=1): Cell(i=4, j=5), Cell(i=2, j=2): Cell(i=5, j=6)}]", "relation": "| Separting the leftmost point from cell Cell(i=2, j=3). | Isolating the point at Cell(i=4, j=4) in its row. | "}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 242, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))", "[4, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=1, j=2). | Isolating the point at Cell(i=1, j=3) in its column. | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1020, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Isolated the point at Cell(i=0, j=0) in its row", "identifier": 668, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3))).", "identifier": 36, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3))).", "identifier": 52, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}}
