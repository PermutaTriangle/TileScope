0132_1302_3120

===========================================
Log created Wed, 24 May 2017 22:29:49

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 912 inferral cache hits and 3823 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 7602 tilings in it right now.
There were 3451 tilings of which 181 are verified.
There were 1295 SiblingNodes of which 67 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4084* times, (2042 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Wed, 24 May 2017 22:31:49

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1098 inferral cache hits and 117403 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 6941 tilings in it right now.
There were 3405 tilings of which 347 are verified.
There were 1421 SiblingNodes of which 167 are verified.

The function splittings called the partitioning cache *117668* times, (964 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Wed, 24 May 2017 22:33:49

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1253 inferral cache hits and 3839 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 5788 tilings in it right now.
There were 3355 tilings of which 159 are verified.
There were 825 SiblingNodes of which 49 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4108* times, (2054 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Wed, 24 May 2017 22:35:49

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1653 inferral cache hits and 71704 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 7732 tilings in it right now.
There were 4395 tilings of which 269 are verified.
There were 1019 SiblingNodes of which 79 are verified.

The function splittings called the partitioning cache *72067* times, (1133 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Wed, 24 May 2017 22:37:50

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 19164 inferral cache hits and 3766 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 6377 tilings in it right now.
There were 3291 tilings of which 150 are verified.
There were 822 SiblingNodes of which 61 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4032* times, (2016 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Wed, 24 May 2017 22:39:50

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 26228 inferral cache hits and 61631 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 8604 tilings in it right now.
There were 4428 tilings of which 341 are verified.
There were 1064 SiblingNodes of which 105 are verified.

The function splittings called the partitioning cache *61990* times, (1117 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Wed, 24 May 2017 22:41:54

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 124 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 417 inferral cache hits and 2119 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1818 tilings in it right now.
There were 1215 tilings of which 401 are verified.
There were 613 SiblingNodes of which 83 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2244* times, (1122 originating)
There were 0 cache misses

No proof tree was found after 124 seconds

===========================================
Log created Wed, 24 May 2017 22:43:54

Maximum depth fully searched was 8

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 746 inferral cache hits and 231880 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 3144 tilings in it right now.
There were 2154 tilings of which 721 are verified.
There were 1080 SiblingNodes of which 243 are verified.

The function splittings called the partitioning cache *232095* times, (1060 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Wed, 24 May 2017 22:45:54

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 321 inferral cache hits and 1673 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 625 tilings in it right now.
There were 507 tilings of which 69 are verified.
There were 99 SiblingNodes of which 21 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1788* times, (894 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Wed, 24 May 2017 22:48:17

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 142 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1186 inferral cache hits and 17344 partitioning cache hits.
The partitioning cache had 24 tilings in it right now.
The inferral cache has 1967 tilings in it right now.
There were 1478 tilings of which 362 are verified.
There were 246 SiblingNodes of which 58 are verified.

The function splittings called the partitioning cache *17688* times, (958 originating)
There were 0 cache misses

No proof tree was found after 142 seconds

===========================================
Log created Wed, 24 May 2017 22:49:54

Maximum depth fully searched was 9

Maximum time set at 120 seconds

Total time taken was 97 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 256 inferral cache hits and 2046 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1236 tilings in it right now.
There were 1054 tilings of which 243 are verified.
There were 684 SiblingNodes of which 107 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2158* times, (1079 originating)
There were 0 cache misses

A proof tree was found in 97 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     └─────11
                        │           ├─────12
                        │           │     ├─────13
                        │           │     └─────14
                        │           └─────15
                        │                 ├─────16
                        │                 └─────17
                        └─────18
                              ├─────19
                              │     ├─────20
                              │     └─────21
                              │           ├─────22
                              │           │     ├─────23
                              │           │     │     ├─────24
                              │           │     │     └─────25
                              │           │     │           ├─────26
                              │           │     │           └─────27
                              │           │     └─────28
                              │           │           ├─────29
                              │           │           └─────30
                              │           └─────31
                              │                 ├─────32
                              │                 └─────33
                              └─────34
                                    ├─────35
                                    │     ├─────36
                                    │     │     ├─────37
                                    │     │     │     ├─────38
                                    │     │     │     └─────39
                                    │     │     └─────40
                                    │     │           ├─────41
                                    │     │           └─────42
                                    │     └─────43
                                    │           ├─────44
                                    │           │     ├─────45
                                    │           │     └─────46
                                    │           ├─────47
                                    │           └─────48
                                    └─────49
                                          ├─────50
                                          │     ├─────51
                                          │     ├─────52
                                          │     └─────53
                                          ├─────54
                                          │     ├─────55
                                          │     │     ├─────56
                                          │     │     │     ├─────57
                                          │     │     │     └─────58
                                          │     │     └─────59
                                          │     └─────60
                                          │           ├─────61
                                          │           ├─────62
                                          │           ├─────63
                                          │           ├─────64
                                          │           └─────65
                                          └─────66
                                                ├─────67
                                                └─────68

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 7

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 8

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 9

+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 10

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))

Label: 11

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 12

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 13

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 14

+-+
|1|
+-+
1: point

Label: 15

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 16

+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((1, 0)))

Label: 17

+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | | |5|
+-+-+-+-+-+-+-+-+
| | | | | |4| | |
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((1, 0)))

Label: 18

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 19

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((1, 0)))

Label: 20

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))

Label: 21

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((1, 0)))

Label: 22

+-+-+-+-+-+-+
|2| |3| | |4|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 23

+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((1, 0)))

Label: 24

+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 25

+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((1, 0)))

Label: 26

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((1, 0)))

Label: 27

+-+
|1|
+-+
1: point

Label: 28

+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | | |5|
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((1, 0)))

Label: 29

+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((1, 0)))

Label: 30

+-+-+-+-+-+-+-+-+
| | | | | | | |5|
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |5|
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |4| | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | |4| | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | |3| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((1, 0)))

Label: 31

+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((1, 0)))

Label: 32

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((1, 0)))

Label: 33

+-+
|1|
+-+
1: point

Label: 34

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 35

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 36

+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | |4| |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 37

+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 38

+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((1, 0)))

Label: 39

+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | | | | |4| |
+-+-+-+-+-+-+-+-+-+
| | | | | |4| | | |
+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 40

+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | | | | |4| |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
| | | | |4| | | | |
+-+-+-+-+-+-+-+-+-+
| | |3| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 41

+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((1, 0)))

Label: 42

+-+-+-+-+-+-+-+-+-+
| | | | | | | |4| |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
| | | | |4| | | | |
+-+-+-+-+-+-+-+-+-+
| | |3| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |5| |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |4| | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | |4| | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | |3| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((1, 0)))

Label: 43

+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
|2| |3| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 44

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 45

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))

Label: 46

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 47

+-+
|1|
+-+
1: point

Label: 48

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Label: 49

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 50

+-+-+-+-+-+-+-+
| | | | | | |5|
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
5: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | | |5|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
5: Av(Perm((1, 0)))

Label: 51

+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 52

+-+
|1|
+-+
1: point

Label: 53

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Label: 54

+-+-+-+-+-+-+-+
|2| |3| |4| |5|
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((1, 0)))

Label: 55

+-+-+-+-+-+-+
|2| |3| | |4|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 56

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 57

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((1, 0)))

Label: 58

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0)))

Label: 59

+-+
|1|
+-+
1: point

Label: 60

+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
|2| |3| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | | |5|
+-+-+-+-+-+-+-+-+
| | | | | |4| | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
|2| |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((1, 0)))

Label: 61

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 62

+-+
|1|
+-+
1: point

Label: 63

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Label: 64

+-+
|1|
+-+
1: point

Label: 65

+-+
|1|
+-+
1: Av+(Perm((1, 0)))

Label: 66

+-+-+-+-+-+-+
|2| |3| | |4|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 67

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 68

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 550, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 551, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 552, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 553, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 554, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[2, 0]": "point", "[3, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[2, 2]": "point", "[3, 4]": "Av(Perm((1, 0)))", "[4, 0]": "point", "[5, 5]": "point", "[6, 6]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=3). | Inserting the bottom most point in to the cell Cell(i=1, j=2). | "}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 555, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[2, 0]": "point", "[3, 3]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[2, 0]": "point", "[3, 3]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 61, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0)]", "identifier": 442, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 556, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 4]": "Av(Perm((1, 0)))", "[4, 0]": "point", "[5, 5]": "point", "[6, 6]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 4]": "Av(Perm((1, 0)))", "[4, 0]": "point", "[5, 5]": "point", "[6, 6]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 557, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 1]": "point", "[2, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 5]": "Av(Perm((1, 0)))", "[5, 0]": "point", "[6, 6]": "point", "[7, 7]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 5]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[4, 4]": "point", "[5, 6]": "Av(Perm((1, 0)))", "[6, 0]": "point", "[7, 7]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=6, j=6). | Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 558, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 1]": "point", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 5]": "Av(Perm((1, 0)))", "[5, 0]": "point", "[6, 6]": "point", "[7, 7]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=4). | Inserting the bottom most point in to the cell Cell(i=2, j=3). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 191, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2))).", "identifier": 171, "in_tiling": {"[0, 2]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 559, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 560, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "point", "[3, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "point", "[3, 3]": "point", "[4, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=3). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 220, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=2)]", "identifier": 561, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=1): Cell(i=3, j=1), Cell(i=3, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=2)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2))).", "identifier": 562, "in_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 563, "in_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 5]": "Av(Perm((1, 0)))", "[4, 0]": "point", "[5, 1]": "point", "[6, 6]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 5]": "Av(Perm((1, 0)))", "[4, 0]": "point", "[5, 1]": "point", "[6, 6]": "point", "[7, 7]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=6, j=6). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 564, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 5]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 6]": "Av(Perm((1, 0)))", "[5, 0]": "point", "[6, 1]": "point", "[7, 7]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 6]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 5]": "point", "[4, 7]": "Av(Perm((1, 0)))", "[5, 4]": "point", "[6, 8]": "Av(Perm((1, 0)))", "[7, 0]": "point", "[8, 1]": "point", "[9, 9]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=5). | "}], "formal_step": "We perform cell insertion into cell (2, 5); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 565, "in_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 1]": "point", "[5, 5]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 5]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 6]": "Av(Perm((1, 0)))", "[5, 0]": "point", "[6, 1]": "point", "[7, 7]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 497, "in_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 1]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 1]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 173, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0)]", "identifier": 496, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=2), Cell(i=3, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 2", "identifier": 220, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 173, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 566, "in_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 4]": "point", "[4, 5]": "Av(Perm((1, 0)))", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 4]": "point", "[4, 5]": "Av(Perm((1, 0)))", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 567, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 5]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[4, 4]": "point", "[5, 6]": "Av(Perm((1, 0)))", "[6, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 6]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[4, 5]": "point", "[5, 7]": "Av(Perm((1, 0)))", "[6, 4]": "point", "[7, 8]": "Av(Perm((1, 0)))", "[8, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=5). | "}], "formal_step": "We perform cell insertion into cell (3, 5); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 568, "in_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 5]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[4, 4]": "point", "[5, 6]": "Av(Perm((1, 0)))", "[6, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 5]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[4, 4]": "point", "[5, 6]": "Av(Perm((1, 0)))", "[6, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 569, "in_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 5]": "Av(Perm((1, 0)))", "[4, 0]": "point", "[5, 6]": "point", "[6, 7]": "Av(Perm((1, 0)))", "[7, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 5]": "Av(Perm((1, 0)))", "[4, 0]": "point", "[5, 6]": "point", "[6, 7]": "Av(Perm((1, 0)))", "[7, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 570, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 5]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 6]": "Av(Perm((1, 0)))", "[5, 0]": "point", "[6, 7]": "point", "[7, 8]": "Av(Perm((1, 0)))", "[8, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 6]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 5]": "point", "[4, 7]": "Av(Perm((1, 0)))", "[5, 4]": "point", "[6, 8]": "Av(Perm((1, 0)))", "[7, 0]": "point", "[8, 9]": "Av+(Perm((1, 0)))", "[9, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=6, j=7). | Inserting the bottom most point in to the cell Cell(i=2, j=5). | "}], "formal_step": "We perform cell insertion into cell (2, 5); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 571, "in_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 5]": "point", "[5, 6]": "Av(Perm((1, 0)))", "[6, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 5]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 6]": "Av(Perm((1, 0)))", "[5, 0]": "point", "[6, 7]": "point", "[7, 8]": "Av(Perm((1, 0)))", "[8, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 180, "in_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 5]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 6]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[5, 5]": "point", "[6, 7]": "Av(Perm((1, 0)))", "[7, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=5). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 559, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 572, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 179, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=2), Cell(i=4, j=4)]", "identifier": 573, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 2]": "point", "[4, 4]": "Av(Perm((1, 0)))", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 2]": "point", "[4, 4]": "Av(Perm((1, 0)))", "[5, 1]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=5, j=1)}, {Cell(i=0, j=0): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=4, j=4)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 2", "identifier": 572, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 180, "in_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 5]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 5]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=6, j=6), Cell(i=7, j=7)]", "identifier": 574, "in_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 5]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[5, 1]": "point", "[6, 6]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 5]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[5, 1]": "point", "[6, 6]": "point", "[7, 7]": "Av(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=3), Cell(i=1, j=2): Cell(i=1, j=2), Cell(i=2, j=4): Cell(i=2, j=4), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=4, j=5): Cell(i=4, j=5), Cell(i=5, j=1): Cell(i=5, j=1)}, {Cell(i=0, j=0): Cell(i=6, j=6)}, {Cell(i=0, j=0): Cell(i=7, j=7)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=6, j=6). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 220, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 385, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 219, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=1)]", "identifier": 575, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 2]": "point", "[4, 1]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 2]": "point", "[4, 1]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=3, j=2), Cell(i=4, j=2): Cell(i=5, j=3)}, {Cell(i=0, j=0): Cell(i=4, j=1)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 179, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 6, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=4), Cell(i=5, j=5), Cell(i=6, j=1), Cell(i=7, j=6)]", "identifier": 576, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 2]": "point", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 1]": "point", "[6, 5]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 2]": "point", "[4, 4]": "point", "[5, 5]": "Av(Perm((1, 0)))", "[6, 1]": "point", "[7, 6]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=5, j=5)}, {Cell(i=0, j=0): Cell(i=6, j=1)}, {Cell(i=0, j=0): Cell(i=7, j=6)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=4). | "}], "formal_step": "We perform cell insertion into cell (4, 3); either it is empty or Av+(Perm((1, 0))).", "identifier": 577, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0)))", "[5, 1]": "point", "[6, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0)))", "[5, 1]": "point", "[6, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 189, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=1)]", "identifier": 578, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=4, j=2), Cell(i=4, j=2): Cell(i=5, j=3)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 2", "identifier": 385, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 189, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 172, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 61, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0))).", "identifier": 579, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2))).", "identifier": 580, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0))).", "identifier": 581, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
