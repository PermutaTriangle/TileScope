0132_0231_2031

===========================================
Log created Mon, 22 May 2017 01:58:39

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 191 inferral cache hits and 1293 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1811 tilings in it right now.
There were 932 tilings of which 83 are verified.
There were 446 SiblingNodes of which 37 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1386* times, (693 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 01:59:10

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 257 inferral cache hits and 22663 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2081 tilings in it right now.
There were 1083 tilings of which 103 are verified.
There were 531 SiblingNodes of which 53 are verified.

The function splittings called the partitioning cache *22771* times, (354 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 01:59:40

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 266 inferral cache hits and 1395 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1333 tilings in it right now.
There were 905 tilings of which 72 are verified.
There were 259 SiblingNodes of which 24 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1498* times, (749 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:00:10

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 391 inferral cache hits and 15242 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1792 tilings in it right now.
There were 1173 tilings of which 74 are verified.
There were 343 SiblingNodes of which 26 are verified.

The function splittings called the partitioning cache *15371* times, (372 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:00:40

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5647 inferral cache hits and 1371 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1923 tilings in it right now.
There were 1122 tilings of which 138 are verified.
There were 329 SiblingNodes of which 39 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1474* times, (737 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:01:09

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 29 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6920 inferral cache hits and 15233 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2032 tilings in it right now.
There were 1289 tilings of which 164 are verified.
There were 378 SiblingNodes of which 55 are verified.

The function splittings called the partitioning cache *15348* times, (337 originating)
There were 0 cache misses

A proof tree was found in 29 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     ├─────7
                  │     └─────8
                  └─────9
                        ├─────10
                        └─────11

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))

Label: 5

+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 6

+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
2: point
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))

Label: 7

+-+
|1|
+-+
1: point

Label: 8

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))

Label: 9

+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))

Label: 10

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 11

+-+-+
| |3|
+-+-+
| |2|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 37, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 38, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 4, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=0) in its row. | The reverse of: Separting the rightmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 39, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 6, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 40, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=4)}, {Cell(i=0, j=0): Cell(i=3, j=0)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 14, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 15, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 2]": "point", "[1, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Separating the bottommost point from cell Cell(i=1, j=2). | "}], "formal_step": "A splitting of the tiling", "identifier": 41, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[3, 3]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 5]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[3, 3]": "point", "[3, 4]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=2, j=5)}, {Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=1, j=2): Cell(i=3, j=3), Cell(i=1, j=3): Cell(i=3, j=4)}]", "relation": "| Separating the bottommost point from cell Cell(i=3, j=3). | "}], "formal_step": "We perform cell insertion into cell (3, 4); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0))).", "identifier": 15, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 2]": "point", "[2, 5]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[3, 4]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=1, j=2). | Isolating the point at Cell(i=1, j=3) in its column. | The reverse of: Isolating the point at Cell(i=2, j=1) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | Separting the rightmost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=2, j=1) in its row. | "}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0))).", "identifier": 4, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=1, j=0) in its row. | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1))).", "identifier": 6, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}}
