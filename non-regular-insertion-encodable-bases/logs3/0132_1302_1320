0132_1302_1320

===========================================
Log created Thu, 25 May 2017 16:00:43

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 3311 inferral cache hits and 10714 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 16202 tilings in it right now.
There were 10517 tilings of which 674 are verified.
There were 5365 SiblingNodes of which 174 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *11402* times, (5709 originating)
There were 1 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Thu, 25 May 2017 16:10:44

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 881 inferral cache hits and 793352 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 6602 tilings in it right now.
There were 4415 tilings of which 531 are verified.
There were 2425 SiblingNodes of which 353 are verified.

The function splittings called the partitioning cache *793618* times, (1009 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Thu, 25 May 2017 16:20:45

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5459 inferral cache hits and 10863 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 16950 tilings in it right now.
There were 10312 tilings of which 587 are verified.
There were 2754 SiblingNodes of which 103 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *11574* times, (5787 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Thu, 25 May 2017 16:30:54

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 608 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 2982 inferral cache hits and 597738 partitioning cache hits.
The partitioning cache had 40 tilings in it right now.
The inferral cache has 9347 tilings in it right now.
There were 7161 tilings of which 839 are verified.
There were 2641 SiblingNodes of which 349 are verified.

The function splittings called the partitioning cache *598275* times, (1855 originating)
There were 0 cache misses

No proof tree was found after 608 seconds

===========================================
Log created Thu, 25 May 2017 16:34:11

Maximum depth fully searched was 3

Maximum time set at 600 seconds

Total time taken was 197 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 24604 inferral cache hits and 5099 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 7553 tilings in it right now.
There were 4392 tilings of which 513 are verified.
There were 1247 SiblingNodes of which 120 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *5458* times, (2736 originating)
There were 1 cache misses

A proof tree was found in 197 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     ├─────8
                  │     │     └─────9
                  │     └─────10
                  │           ├─────11
                  │           └─────12
                  └─────13

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+
|2|
+-+
|1|
+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point

Label: 5

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| |3| | |
+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |4| |
+-+-+-+-+
| | | |3|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
3: point
4: Av(Perm((0, 2, 1)))

Label: 6

+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)))

Label: 7

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))

Label: 8

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Label: 9

+-+
|1|
+-+
1: point

Label: 10

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 2, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
|3| | |3| | | | |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)))

Label: 11

+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
|2| |2| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))

Label: 12

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 13

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 338, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 339, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 161, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=0) in its row. | The reverse of: Separting the rightmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 22, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 339, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 340, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 4]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[2, 2]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 4]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[2, 2]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=2, j=0), Cell(i=0, j=2): Cell(i=2, j=2), Cell(i=1, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=0, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=4)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 281, "in_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 2, 1)))", "[3, 5]": "point", "[4, 3]": "Av(Perm((0, 2, 1)))", "[5, 1]": "Av(Perm((0, 2, 1)))", "[6, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 5]": "point", "[2, 3]": "Av(Perm((0, 2, 1)))", "[3, 1]": "Av(Perm((0, 2, 1)))", "[4, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=5) in its column. | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 85, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1)]", "identifier": 341, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 5]": "point", "[2, 3]": "Av(Perm((0, 2, 1)))", "[3, 1]": "Av(Perm((0, 2, 1)))", "[4, 2]": "point"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 2, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 5]": "Av(Perm((0, 2, 1)))", "[4, 6]": "point", "[5, 4]": "Av(Perm((0, 2, 1)))", "[6, 2]": "Av(Perm((0, 2, 1)))", "[7, 3]": "point"}, "recurse": "[{Cell(i=0, j=4): Cell(i=0, j=5), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=4): Cell(i=3, j=5), Cell(i=3, j=5): Cell(i=4, j=6), Cell(i=4, j=3): Cell(i=5, j=4), Cell(i=5, j=1): Cell(i=6, j=2), Cell(i=6, j=2): Cell(i=7, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=1, j=6) in its column. | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 342, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 5]": "point", "[2, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[2, 3]": "Av(Perm((0, 2, 1)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=2, j=0). | Isolating the point at Cell(i=1, j=1) in its row. | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 343, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Isolated the point at Cell(i=0, j=1) in its column", "identifier": 344, "in_tiling": {"[0, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[0, 1]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=0, j=1). | The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0))).", "identifier": 161, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0))).", "identifier": 345, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}}
