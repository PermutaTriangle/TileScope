0213_1302_2031

===========================================
Log created Mon, 22 May 2017 12:05:53

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 155 inferral cache hits and 951 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1776 tilings in it right now.
There were 1084 tilings of which 111 are verified.
There were 524 SiblingNodes of which 51 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1020* times, (510 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:06:23

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 63 inferral cache hits and 20764 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1563 tilings in it right now.
There were 902 tilings of which 238 are verified.
There were 388 SiblingNodes of which 74 are verified.

The function splittings called the partitioning cache *20816* times, (167 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:06:53

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 269 inferral cache hits and 1124 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1524 tilings in it right now.
There were 1078 tilings of which 124 are verified.
There were 320 SiblingNodes of which 36 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1208* times, (604 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:07:03

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 9 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 117 inferral cache hits and 2069 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 887 tilings in it right now.
There were 650 tilings of which 125 are verified.
There were 186 SiblingNodes of which 37 are verified.

The function splittings called the partitioning cache *2139* times, (155 originating)
There were 0 cache misses

A proof tree was found in 9 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((1, 0, 2)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| |1| | | |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
3: point
4: Av(Perm((1, 0, 2)))

Label: 5

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|1| | | |2|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
3: point
4: Av(Perm((1, 0, 2)))

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
3: point
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 7

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 0, 2)))
2: point

Label: 8

+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | |5| |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 2, 1)))
3: point
4: Av+(Perm((0, 2, 1)))
5: Av(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | | | |4| |
+-+-+-+-+-+-+-+-+
| |3| | | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 2, 1)))
3: point
4: Av(Perm((1, 0, 2)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 35, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 36, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 30, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 31, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 37, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 2]": "Av(Perm((1, 0, 2)))", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 2]": "Av(Perm((1, 0, 2)))", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=0): Cell(i=4, j=0)}, {Cell(i=0, j=1): Cell(i=2, j=3), Cell(i=1, j=0): Cell(i=3, j=2)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 38, "in_tiling": {"[0, 3]": "Av+(Perm((0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 2]": "point", "[3, 5]": "point", "[4, 4]": "Av(Perm((1, 0, 2)))", "[5, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 5]": "point", "[2, 3]": "Av(Perm((0, 2, 1)))", "[3, 1]": "Av(Perm((0, 2, 1)))", "[4, 2]": "point", "[5, 7]": "point", "[6, 6]": "Av(Perm((1, 0, 2)))", "[7, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=3). | "}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 39, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 3]": "Av(Perm((1, 0, 2)))", "[5, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=2). | The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((1, 0, 2))).", "identifier": 30, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1))).", "identifier": 9, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}}
