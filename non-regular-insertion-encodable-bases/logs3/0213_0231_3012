0213_0231_3012

===========================================
Log created Tue, 13 Jun 2017 05:01:22

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1844 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 214706 inferral cache hits and 27225 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 84950 tilings in it right now.
There were 28211 tilings of which 1086 are verified.
There were 11366 SiblingNodes of which 683 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *28980* times, (14498 originating)
There were 1 cache misses

No proof tree was found after 1844 seconds

===========================================
Log created Tue, 13 Jun 2017 05:31:25

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1801 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 274823 inferral cache hits and 32198 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 36553 tilings of which 1147 are verified.
There were 16962 SiblingNodes of which 796 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *34282* times, (17141 originating)
There were 0 cache misses

No proof tree was found after 1801 seconds

===========================================
Log created Tue, 13 Jun 2017 06:01:26

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 300023 inferral cache hits and 32882 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 38930 tilings of which 2219 are verified.
There were 11235 SiblingNodes of which 685 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *35000* times, (17508 originating)
There were 1 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Tue, 13 Jun 2017 06:41:35

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 2408 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 209636 inferral cache hits and 1685098 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 83596 tilings in it right now.
There were 27091 tilings of which 925 are verified.
There were 11101 SiblingNodes of which 640 are verified.

The function splittings called the partitioning cache *1686722* times, (6339 originating)
There were 0 cache misses

No proof tree was found after 2408 seconds

===========================================
Log created Tue, 13 Jun 2017 07:11:36

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 311734 inferral cache hits and 1804333 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 41536 tilings of which 1510 are verified.
There were 19663 SiblingNodes of which 1084 are verified.

The function splittings called the partitioning cache *1806674* times, (9110 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Tue, 13 Jun 2017 07:41:37

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 367732 inferral cache hits and 1384051 partitioning cache hits.
The partitioning cache had 13 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 46057 tilings of which 3047 are verified.
There were 11670 SiblingNodes of which 696 are verified.

The function splittings called the partitioning cache *1386506* times, (9774 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Tue, 13 Jun 2017 08:12:29

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1851 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5305 inferral cache hits and 18358 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 26292 tilings in it right now.
There were 13363 tilings of which 1152 are verified.
There were 6231 SiblingNodes of which 522 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *19528* times, (9764 originating)
There were 0 cache misses

No proof tree was found after 1851 seconds

===========================================
Log created Tue, 13 Jun 2017 08:44:19

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1909 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6470 inferral cache hits and 2848458 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 32121 tilings in it right now.
There were 16510 tilings of which 1749 are verified.
There were 7670 SiblingNodes of which 633 are verified.

The function splittings called the partitioning cache *2849828* times, (5884 originating)
There were 0 cache misses

No proof tree was found after 1909 seconds

===========================================
Log created Tue, 13 Jun 2017 09:00:55

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 995 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4207 inferral cache hits and 17142 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 50425 tilings in it right now.
There were 20894 tilings of which 1347 are verified.
There were 6803 SiblingNodes of which 431 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *18254* times, (9134 originating)
There were 1 cache misses

A proof tree was found in 995 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  │           ├─────8
                  │           │     ├─────9
                  │           │     │     ├─────10
                  │           │     │     │     ├─────11
                  │           │     │     │     │     ├─────12
                  │           │     │     │     │     └─────13
                  │           │     │     │     └─────14
                  │           │     │     │           ├─────15
                  │           │     │     │           └─────16
                  │           │     │     │                 ├─────17
                  │           │     │     │                 └─────18
                  │           │     │     └─────19
                  │           │     └─────20
                  │           └─────21
                  │                 ├─────22
                  │                 │     ├─────23
                  │                 │     └─────24
                  │                 └─────25
                  └─────26
                        ├─────27
                        └─────28

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|4| |5| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: Av(Perm((1, 0)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 1)))

Label: 5

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1)))

Label: 6

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 1)))

Label: 7

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| |5| |3| | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
|2| |3| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 8

+-+-+-+-+-+-+
|4| |5| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| |3| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 9

+-+-+-+-+-+
|4| |5| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 10

+-+-+-+-+
|4| |5| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+
| | |5| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |4| |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((0, 1, 2)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 11

+-+-+-+-+
| | |4| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
2: point
3: Av(Perm((0, 1, 2)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 12

+-+-+-+
| |3| |
+-+-+-+
|1| | |
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 13

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
2: point
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: point
4: Av(Perm((0, 1)))

Label: 14

+-+-+-+-+
| | |5| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |4| |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
2: Av+(Perm((0, 1)))
3: point
4: Av(Perm((0, 1, 2)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| | | |3| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|1| | | | |3| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|1| |3| | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 15

+-+-+-+-+-+-+-+
|4| | | |3| | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|2| | | | |3| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
|2| |3| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1)))

Label: 16

+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
2: point
3: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | |4| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |3| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |4| |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |3|
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |3| | |
+-+-+-+-+-+-+-+-+-+
| | |3| | | | | | |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: point
4: Av(Perm((0, 1)))

Label: 17

+-+-+-+-+-+-+-+-+
| | | |4| | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |4| |
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| |3| | | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: point
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | |5| | |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: point
4: Av+(Perm((0, 1)))
5: Av(Perm((0, 1)))

Label: 18

+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |5|
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
|4| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | |3| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
| | | |2| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
5: Av+(Perm((0, 1)))

Label: 19

+-+
|1|
+-+
1: point

Label: 20

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 21

+-+-+-+-+-+-+-+
|3| |4| |5| | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
5: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
|5| |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| | |4| | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | |3| | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((1, 0)))
5: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 22

+-+-+-+-+-+-+-+
|5| |2| | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | |3| | |2| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((1, 0)))
5: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| |2| | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | |2| | | |2|
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))

Label: 23

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
2: point
3: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 24

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 25

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 26

+-+-+-+-+
| | |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: Av+(Perm((1, 0)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |5| | | |
+-+-+-+-+-+-+-+
| | | | | |5| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 1)))

Label: 27

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |4| | | |
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
3: point
4: Av(Perm((0, 1)))

Label: 28

+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | |5| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |5| |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
|4| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2049, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2050, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2051, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2052, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1, 2)))", "[1, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[2, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2053, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[3, 5]": "point", "[4, 4]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2))).", "identifier": 2054, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1, 2)))", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1, 2)))", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 1426, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 3]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 5]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 5]": "Av(Perm((0, 1)))", "[5, 3]": "Av(Perm((0, 1)))", "[6, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 3]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=0, j=3). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2055, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[3, 7]": "Av(Perm((0, 1)))", "[4, 6]": "point", "[5, 3]": "point", "[6, 5]": "Av(Perm((0, 1)))", "[7, 4]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[3, 6]": "point", "[4, 5]": "Av(Perm((0, 1)))", "[5, 3]": "point", "[6, 4]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=4). | Inserting the top most point in to the cell Cell(i=1, j=4). | Inserting the right most point in to the cell Cell(i=0, j=0). | The reverse of: Inserting the bottom most point in to the cell Cell(i=6, j=4). | Inserting the top most point in to the cell Cell(i=6, j=4). | The reverse of: Inserting the right most point in to the cell Cell(i=0, j=0). | Inserting the left most point in to the cell Cell(i=0, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=5, j=4). | The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2056, "in_tiling": {"[0, 3]": "Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 7]": "Av(Perm((0, 1)))", "[4, 6]": "point", "[5, 2]": "point", "[6, 5]": "Av(Perm((0, 1)))", "[7, 4]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 5]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[3, 1]": "Av(Perm((0, 1)))", "[4, 0]": "point", "[5, 8]": "point", "[6, 7]": "Av(Perm((0, 1)))", "[7, 2]": "point", "[8, 6]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=1, j=0). | The reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=5). | Inserting the top most point in to the cell Cell(i=2, j=5). | Inserting the bottom most point in to the cell Cell(i=1, j=0). | The reverse of: Inserting the bottom most point in to the cell Cell(i=6, j=4). | Inserting the top most point in to the cell Cell(i=0, j=3). | "}], "formal_step": "We perform cell insertion into cell (0, 4); either it is empty or Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2))).", "identifier": 2057, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[2, 6]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 1]": "point", "[5, 4]": "Av(Perm((0, 1)))", "[6, 3]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[4, 8]": "Av(Perm((0, 1)))", "[5, 7]": "point", "[6, 3]": "point", "[7, 6]": "Av(Perm((0, 1)))", "[8, 5]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2))).", "identifier": 1285, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1, 2)))", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 4]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 6]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 5]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 6]": "Av(Perm((0, 1)))", "[5, 4]": "Av(Perm((0, 1)))", "[6, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=0). | The reverse of: Inserting the left most point in to the cell Cell(i=0, j=4). | Inserting the right most point in to the cell Cell(i=0, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 1729, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 3]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1, 2)))", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=2). | Inserting the left most point in to the cell Cell(i=0, j=2). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=3, j=0)]", "identifier": 1730, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 4]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 0]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 4]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 0]": "point", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=1), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=0)}]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 51, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=4, j=3)]", "identifier": 2058, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 5]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 0]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 5]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 0]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=0, j=4): Cell(i=0, j=5), Cell(i=1, j=3): Cell(i=1, j=4), Cell(i=2, j=1): Cell(i=2, j=1), Cell(i=2, j=4): Cell(i=2, j=5), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=4, j=2): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=4, j=3)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 304, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 4]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=0, j=0). | Inserting the bottom most point in to the cell Cell(i=0, j=0). | The reverse of: Inserting the right most point in to the cell Cell(i=2, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2021, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=2, j=1), Cell(i=3, j=0), Cell(i=5, j=2), Cell(i=6, j=1)]", "identifier": 1469, "in_tiling": {"[0, 7]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[2, 5]": "Av(Perm((1, 0)))", "[2, 7]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 6]": "point", "[5, 3]": "Av(Perm((0, 1)))", "[6, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 5]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 7]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 7]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 6]": "point", "[5, 2]": "point", "[6, 1]": "Av(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=3), Cell(i=0, j=2): Cell(i=0, j=5), Cell(i=0, j=4): Cell(i=0, j=7), Cell(i=1, j=1): Cell(i=1, j=4), Cell(i=2, j=4): Cell(i=2, j=7), Cell(i=3, j=3): Cell(i=4, j=6)}, {Cell(i=0, j=1): Cell(i=2, j=1), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=5, j=2), Cell(i=3, j=1): Cell(i=6, j=1)}]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=5, j=1). | Inserting the top most point in to the cell Cell(i=5, j=1). | The reverse of: Inserting the left most point in to the cell Cell(i=0, j=3). | Inserting the right most point in to the cell Cell(i=0, j=3). | "}, {"children": [], "formal_step": "recurse", "identifier": 51, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=5, j=6)]", "identifier": 2059, "in_tiling": {"[0, 5]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 0]": "point", "[4, 5]": "Av+(Perm((0, 1)))", "[5, 3]": "Av(Perm((0, 1)))", "[6, 2]": "point"}, "out_tiling": {"[0, 8]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[2, 5]": "Av(Perm((1, 0)))", "[2, 8]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 7]": "point", "[5, 6]": "Av(Perm((0, 1)))", "[6, 3]": "Av(Perm((0, 1)))", "[7, 2]": "point"}, "recurse": "[{Cell(i=0, j=7): Cell(i=0, j=8), Cell(i=1, j=4): Cell(i=1, j=4), Cell(i=2, j=1): Cell(i=2, j=1), Cell(i=2, j=3): Cell(i=2, j=3), Cell(i=2, j=5): Cell(i=2, j=5), Cell(i=2, j=7): Cell(i=2, j=8), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=4, j=6): Cell(i=4, j=7), Cell(i=5, j=3): Cell(i=6, j=3), Cell(i=6, j=2): Cell(i=7, j=2)}, {Cell(i=0, j=0): Cell(i=5, j=6)}]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=5). | The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=3). | Inserting the left most point in to the cell Cell(i=0, j=3). | "}], "formal_step": "We perform cell insertion into cell (4, 5); either it is empty or Av+(Perm((0, 1))).", "identifier": 1426, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 3]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 5]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 0]": "point", "[4, 5]": "Av(Perm((0, 1)))", "[5, 3]": "Av(Perm((0, 1)))", "[6, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=3). | "}], "formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2))).", "identifier": 2060, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 3]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 3]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2061, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 0)))", "[2, 6]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 5]": "Av(Perm((0, 1)))", "[5, 4]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[3, 6]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 5]": "Av(Perm((0, 1)))", "[6, 4]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2062, "in_tiling": {"[0, 3]": "Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 6]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 5]": "Av(Perm((0, 1)))", "[6, 4]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[3, 0]": "Av+(Perm((0, 1)))", "[4, 7]": "Av(Perm((0, 1)))", "[5, 1]": "point", "[6, 6]": "Av(Perm((0, 1)))", "[7, 5]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=1, j=0). | Inserting the top most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (0, 4); either it is empty or Av+(Perm((0, 2, 1)), Perm((3, 0, 1, 2))).", "identifier": 2063, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0)))", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[2, 2]": "Av(Perm((1, 0)))", "[3, 7]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 6]": "Av(Perm((0, 1)))", "[6, 5]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=1). | The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | Inserting the left most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0))).", "identifier": 304, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((3, 0, 1, 2)))", "[0, 3]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=2, j=1). | "}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2))).", "identifier": 191, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2))).", "identifier": 2064, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}}
