0213_1302_3120

===========================================
Log created Mon, 22 May 2017 12:19:42

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 168 inferral cache hits and 1138 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2296 tilings in it right now.
There were 1042 tilings of which 93 are verified.
There were 414 SiblingNodes of which 31 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1220* times, (610 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:20:12

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 203 inferral cache hits and 24153 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2436 tilings in it right now.
There were 1112 tilings of which 145 are verified.
There were 438 SiblingNodes of which 55 are verified.

The function splittings called the partitioning cache *24241* times, (290 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:20:42

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 313 inferral cache hits and 1289 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 1672 tilings in it right now.
There were 970 tilings of which 139 are verified.
There were 202 SiblingNodes of which 19 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1384* times, (692 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:21:13

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 410 inferral cache hits and 13629 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2358 tilings in it right now.
There were 1398 tilings of which 177 are verified.
There were 314 SiblingNodes of which 37 are verified.

The function splittings called the partitioning cache *13742* times, (319 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:21:43

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6467 inferral cache hits and 1236 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2145 tilings in it right now.
There were 1188 tilings of which 164 are verified.
There were 267 SiblingNodes of which 28 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1328* times, (664 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:22:13

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 8118 inferral cache hits and 13238 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2584 tilings in it right now.
There were 1447 tilings of which 194 are verified.
There were 328 SiblingNodes of which 41 are verified.

The function splittings called the partitioning cache *13335* times, (270 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:22:46

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 32 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 66 inferral cache hits and 910 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 715 tilings in it right now.
There were 418 tilings of which 181 are verified.
There were 242 SiblingNodes of which 45 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *968* times, (484 originating)
There were 0 cache misses

No proof tree was found after 32 seconds

===========================================
Log created Mon, 22 May 2017 12:23:16

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 72 inferral cache hits and 35382 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 769 tilings in it right now.
There were 616 tilings of which 282 are verified.
There were 434 SiblingNodes of which 146 are verified.

The function splittings called the partitioning cache *35445* times, (238 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:23:46

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 183 inferral cache hits and 1204 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 311 tilings in it right now.
There were 284 tilings of which 39 are verified.
There were 66 SiblingNodes of which 15 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1290* times, (645 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:24:17

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 458 inferral cache hits and 3788 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 1153 tilings in it right now.
There were 803 tilings of which 269 are verified.
There were 157 SiblingNodes of which 45 are verified.

The function splittings called the partitioning cache *3952* times, (402 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 12:24:29

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 12 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 13 inferral cache hits and 463 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 269 tilings in it right now.
There were 175 tilings of which 92 are verified.
There were 121 SiblingNodes of which 48 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *492* times, (246 originating)
There were 0 cache misses

A proof tree was found in 12 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        └─────14
                              ├─────15
                              │     ├─────16
                              │     └─────17
                              └─────18
                                    ├─────19
                                    └─────20
                                          ├─────21
                                          │     ├─────22
                                          │     └─────23
                                          └─────24
                                                ├─────25
                                                └─────26

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 7

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 8

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 9

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 10

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 11

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |5|
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
5: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 14

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0, 2)), Perm((2, 0, 1)))
4: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 15

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 16

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 17

+-+
|1|
+-+
1: point

Label: 18

+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 19

+-+-+-+-+-+-+-+
| | | | |5| | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 20

+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
|3| |4| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
4: Av(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 21

+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
4: Av(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 22

+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))

Label: 23

+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | |5| | |
+-+-+-+-+-+-+-+-+
| | |4| | | | | |
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 24

+-+-+-+-+-+-+
|3| |4| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 25

+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 26

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 63, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 64, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 65, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 66, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0)]", "identifier": 67, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 68, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 3]": "Av+(Perm((1, 0)))", "[3, 0]": "point", "[4, 4]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 5]": "Av+(Perm((1, 0)))", "[5, 0]": "point", "[6, 6]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 69, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3))).", "identifier": 20, "in_tiling": {"[0, 2]": "Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0)]", "identifier": 70, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 71, "in_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 5]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 6]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 5]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 6]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 72, "in_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 73, "in_tiling": {"[0, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 5]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 6]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 7]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[6, 1]": "point", "[7, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=4). | "}], "formal_step": "We perform cell insertion into cell (3, 5); either it is empty or Av+(Perm((1, 0, 2)), Perm((2, 0, 1))).", "identifier": 74, "in_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 5]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 5]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 13, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=3)]", "identifier": 75, "in_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=4, j=1), Cell(i=4, j=2): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=3)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((1, 0, 2)), Perm((2, 0, 1))).", "identifier": 28, "in_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 5]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 5]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 3", "identifier": 13, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 0, 2)), Perm((2, 0, 1))).", "identifier": 21, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 5, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0))).", "identifier": 2, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3))).", "identifier": 76, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0))).", "identifier": 77, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
