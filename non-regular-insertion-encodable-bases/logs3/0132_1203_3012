0132_1203_3012

===========================================
Log created Wed, 07 Jun 2017 10:37:27

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 601 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 104956 inferral cache hits and 16064 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 45245 tilings in it right now.
There were 14604 tilings of which 471 are verified.
There were 6025 SiblingNodes of which 303 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *17156* times, (8578 originating)
There were 0 cache misses

No proof tree was found after 601 seconds

===========================================
Log created Wed, 07 Jun 2017 10:47:27

Maximum depth fully searched was 3

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 119744 inferral cache hits and 16724 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 48854 tilings in it right now.
There were 17331 tilings of which 570 are verified.
There were 8502 SiblingNodes of which 402 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *17866* times, (8933 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Wed, 07 Jun 2017 10:57:28

Maximum depth fully searched was 3

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 125003 inferral cache hits and 15756 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 49628 tilings in it right now.
There were 17669 tilings of which 905 are verified.
There were 5338 SiblingNodes of which 316 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *16830* times, (8422 originating)
There were 1 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Wed, 07 Jun 2017 11:07:30

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 601 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 130336 inferral cache hits and 434484 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 54448 tilings in it right now.
There were 17386 tilings of which 472 are verified.
There were 7057 SiblingNodes of which 316 are verified.

The function splittings called the partitioning cache *435645* times, (4115 originating)
There were 0 cache misses

No proof tree was found after 601 seconds

===========================================
Log created Wed, 07 Jun 2017 11:17:32

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 601 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 142541 inferral cache hits and 219366 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 57980 tilings in it right now.
There were 20307 tilings of which 709 are verified.
There were 9933 SiblingNodes of which 481 are verified.

The function splittings called the partitioning cache *220684* times, (4400 originating)
There were 0 cache misses

No proof tree was found after 601 seconds

===========================================
Log created Wed, 07 Jun 2017 11:27:33

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 146762 inferral cache hits and 205603 partitioning cache hits.
The partitioning cache had 20 tilings in it right now.
The inferral cache has 58067 tilings in it right now.
There were 20612 tilings of which 1063 are verified.
There were 6385 SiblingNodes of which 392 are verified.

The function splittings called the partitioning cache *206924* times, (4492 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Wed, 07 Jun 2017 11:37:33

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6064 inferral cache hits and 19794 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 26187 tilings in it right now.
There were 12725 tilings of which 1474 are verified.
There were 5782 SiblingNodes of which 507 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *21060* times, (10545 originating)
There were 2 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Wed, 07 Jun 2017 11:47:38

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 603 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 3855 inferral cache hits and 1100491 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 18330 tilings in it right now.
There were 9025 tilings of which 763 are verified.
There were 4154 SiblingNodes of which 361 are verified.

The function splittings called the partitioning cache *1101322* times, (3480 originating)
There were 0 cache misses

No proof tree was found after 603 seconds

===========================================
Log created Wed, 07 Jun 2017 11:57:39

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 601 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 2372 inferral cache hits and 11630 partitioning cache hits.
The partitioning cache had 19 tilings in it right now.
The inferral cache has 34360 tilings in it right now.
There were 13140 tilings of which 499 are verified.
There were 4099 SiblingNodes of which 272 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *12406* times, (6217 originating)
There were 2 cache misses

No proof tree was found after 601 seconds

===========================================
Log created Wed, 07 Jun 2017 12:07:40

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 2175 inferral cache hits and 2103118 partitioning cache hits.
The partitioning cache had 19 tilings in it right now.
The inferral cache has 33272 tilings in it right now.
There were 12778 tilings of which 377 are verified.
There were 4024 SiblingNodes of which 146 are verified.

The function splittings called the partitioning cache *2103869* times, (2878 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Wed, 07 Jun 2017 12:17:41

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_lrm_and_rlm_placements
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 2026 inferral cache hits and 10252 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 33539 tilings in it right now.
There were 12469 tilings of which 257 are verified.
There were 3700 SiblingNodes of which 98 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *10944* times, (5486 originating)
There were 2 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Wed, 07 Jun 2017 12:27:42

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 601 seconds

The strategies applied were:
Batch: all_cell_insertions, all_lrm_and_rlm_placements
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 2141 inferral cache hits and 1217940 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 36944 tilings in it right now.
There were 13644 tilings of which 372 are verified.
There were 3987 SiblingNodes of which 131 are verified.

The function splittings called the partitioning cache *1218696* times, (2918 originating)
There were 0 cache misses

No proof tree was found after 601 seconds

===========================================
Log created Wed, 07 Jun 2017 12:38:16

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 633 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_lrm_and_rlm_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6104 inferral cache hits and 18785 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 25026 tilings in it right now.
There were 12295 tilings of which 1496 are verified.
There were 5544 SiblingNodes of which 509 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *19986* times, (10008 originating)
There were 2 cache misses

No proof tree was found after 633 seconds

===========================================
Log created Wed, 07 Jun 2017 12:48:16

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_lrm_and_rlm_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 5531 inferral cache hits and 1476494 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 24406 tilings in it right now.
There were 12012 tilings of which 1313 are verified.
There were 5488 SiblingNodes of which 465 are verified.

The function splittings called the partitioning cache *1477607* times, (4688 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Wed, 07 Jun 2017 12:58:05

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 588 seconds

The strategies applied were:
Batch: all_cell_insertions
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 2915 inferral cache hits and 12939 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 35536 tilings in it right now.
There were 13730 tilings of which 770 are verified.
There were 4181 SiblingNodes of which 184 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *13794* times, (6911 originating)
There were 2 cache misses

A proof tree was found in 588 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     ├─────7
                  │     └─────8
                  └─────9
                        ├─────10
                        │     ├─────11
                        │     │     ├─────12
                        │     │     │     ├─────13
                        │     │     │     │     ├─────14
                        │     │     │     │     └─────15
                        │     │     │     └─────16
                        │     │     │           ├─────17
                        │     │     │           └─────18
                        │     │     └─────19
                        │     └─────20
                        │           ├─────21
                        │           │     ├─────22
                        │           │     │     ├─────23
                        │           │     │     └─────24
                        │           │     └─────25
                        │           └─────26
                        └─────27

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))
2: Av(Perm((0, 1, 2)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))
2: Av+(Perm((0, 1, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
|4| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| |1| |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 5

+-+-+-+-+
|4| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 6

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 7

+-+
|1|
+-+
1: point

Label: 8

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 9

+-+-+-+-+
|5| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
|4| | | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| |5| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
|1| | |3| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | |1| |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 10

+-+-+-+-+-+-+-+
|4| |5| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
|1| | |3| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | |1| |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | |5| |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|1| | | |3| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((1, 0)))

Label: 11

+-+-+-+-+-+-+
| | | | |5| |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|1| | | |3| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((1, 0)))

Label: 12

+-+-+-+-+
| | | |5|
+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| |5| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 13

+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 14

+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))
2: point

Label: 15

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 16

+-+-+-+-+-+
|4| |5| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
|4| |5| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
|1| | |3| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | |1| | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 17

+-+-+-+-+-+-+-+
|4| |5| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
|1| | |3| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | |1| |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 18

+-+-+-+-+-+-+-+
| | |5| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | |4| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | |5| | | | |
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 19

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 20

+-+-+-+-+-+-+
| | | | |6| |
+-+-+-+-+-+-+
|5| | | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|1| | | |4| |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | |1| |2| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1)))
3: point
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
5: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
6: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+
|4| | |5| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |2| | | | |
+-+-+-+-+-+-+-+-+-+-+
|1| | | |3| | | |1| |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+-+
|1| | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 21

+-+-+-+-+-+-+-+-+-+
|4| |5| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
|2| | |3| | | |2| |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
|5| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
|2| | |3| |4| |2| |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
5: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Label: 22

+-+-+-+-+-+-+-+-+
|5| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
|2| |3| |4| |2| |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
5: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
|3| |4| |5| | | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
|1| | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((1, 0)))

Label: 23

+-+-+-+-+-+
|3| |4| |5|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | | |5|
+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
5: Av(Perm((1, 0)))

Label: 24

+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 25

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 26

+-+-+-+-+-+-+-+-+-+
| | | |5| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+
| | | | |4| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
|3| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |3| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
| | | |5| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |4| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+
|3| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 27

+-+-+-+-+-+-+-+
| | |5| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | |4| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
5: Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 574, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 575, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 136, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "The components of the tiling", "identifier": 576, "in_tiling": {"[0, 2]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))", "[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))", "[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=2, j=0)}, {Cell(i=0, j=0): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=0, j=2): Cell(i=0, j=4), Cell(i=1, j=1): Cell(i=1, j=3)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 577, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 578, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 4); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2))).", "identifier": 579, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 3]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 580, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 581, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 6]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 4]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 5]": "point", "[5, 2]": "Av+(Perm((0, 1)))", "[6, 3]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 6]": "point", "[4, 4]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[5, 2]": "Av+(Perm((0, 1)))", "[6, 3]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=2, j=4). | Inserting the top most point in to the cell Cell(i=2, j=4). | "}], "formal_step": "We perform cell insertion into cell (6, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 582, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 2]": "Av(Perm((0, 1)))", "[4, 3]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[0, 6]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 6]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 4]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 5]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 2]": "Av(Perm((0, 1)))", "[7, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=2, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2))).", "identifier": 147, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[3, 4]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 3]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=2, j=1). | Inserting the right most point in to the cell Cell(i=2, j=1). | The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | Inserting the left most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 24, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=2, j=0), Cell(i=5, j=2)]", "identifier": 583, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[4, 6]": "Av(Perm((1, 0)))", "[5, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[4, 6]": "Av(Perm((1, 0)))", "[5, 2]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=3), Cell(i=0, j=3): Cell(i=0, j=5), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=2): Cell(i=3, j=4), Cell(i=3, j=1): Cell(i=4, j=3), Cell(i=3, j=4): Cell(i=4, j=6)}, {Cell(i=0, j=0): Cell(i=2, j=0), Cell(i=1, j=1): Cell(i=5, j=2)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 147, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[3, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=1). | Inserting the left most point in to the cell Cell(i=2, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 536, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 1)))", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 1)))", "[2, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=5, j=1), Cell(i=6, j=0), Cell(i=6, j=4), Cell(i=7, j=3)]", "identifier": 491, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[0, 6]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[3, 5]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[4, 4]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[5, 0]": "point", "[6, 4]": "Av(Perm((0, 1)))", "[7, 3]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[0, 6]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 6]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 5]": "point", "[4, 6]": "Av(Perm((1, 0)))", "[5, 1]": "point", "[6, 0]": "Av(Perm((0, 1)))", "[6, 4]": "Av(Perm((0, 1)))", "[7, 3]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=4), Cell(i=0, j=3): Cell(i=0, j=6), Cell(i=1, j=0): Cell(i=1, j=2), Cell(i=2, j=3): Cell(i=2, j=6), Cell(i=3, j=2): Cell(i=3, j=5), Cell(i=4, j=3): Cell(i=4, j=6)}, {Cell(i=0, j=1): Cell(i=5, j=1), Cell(i=1, j=0): Cell(i=6, j=0), Cell(i=1, j=3): Cell(i=6, j=4), Cell(i=2, j=2): Cell(i=7, j=3)}]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=4, j=0). | Inserting the top most point in to the cell Cell(i=4, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=2, j=4). | Inserting the bottom most point in to the cell Cell(i=2, j=4). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=2, j=2)]", "identifier": 584, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1)))", "[0, 7]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 7]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 5]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 6]": "point", "[5, 1]": "Av(Perm((0, 1)))", "[6, 0]": "point", "[7, 5]": "Av(Perm((0, 1)))", "[8, 4]": "point"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 1)))", "[0, 7]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 5]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 6]": "point", "[5, 1]": "Av(Perm((0, 1)))", "[5, 5]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[6, 0]": "point", "[7, 5]": "Av(Perm((0, 1)))", "[8, 4]": "point"}, "recurse": "[{Cell(i=0, j=4): Cell(i=0, j=5), Cell(i=0, j=6): Cell(i=0, j=7), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=4): Cell(i=3, j=5), Cell(i=3, j=5): Cell(i=4, j=6), Cell(i=4, j=1): Cell(i=5, j=1), Cell(i=4, j=4): Cell(i=5, j=5), Cell(i=5, j=0): Cell(i=6, j=0), Cell(i=6, j=4): Cell(i=7, j=5), Cell(i=7, j=3): Cell(i=8, j=4)}, {Cell(i=0, j=0): Cell(i=2, j=2)}]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=2). | Inserting the top most point in to the cell Cell(i=0, j=2). | The reverse of: Inserting the right most point in to the cell Cell(i=2, j=4). | Inserting the top most point in to the cell Cell(i=2, j=4). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 585, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 8]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[4, 6]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[5, 7]": "point", "[6, 2]": "Av(Perm((0, 1)))", "[7, 1]": "point", "[8, 5]": "point"}, "out_tiling": {"[0, 4]": "Av+(Perm((0, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 7]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 8]": "point", "[5, 6]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[6, 3]": "point", "[7, 2]": "Av(Perm((0, 1)))", "[8, 5]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=0). | The reverse of: Inserting the right most point in to the cell Cell(i=4, j=7). | The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=4). | Inserting the top most point in to the cell Cell(i=0, j=4). | The reverse of: Inserting the bottom most point in to the cell Cell(i=4, j=1). | Inserting the top most point in to the cell Cell(i=4, j=1). | The reverse of: Inserting the top most point in to the cell Cell(i=0, j=4). | Inserting the top most point in to the cell Cell(i=3, j=6). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 586, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av+(Perm((0, 1)))", "[4, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[4, 6]": "Av(Perm((1, 0)))", "[5, 2]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[0, 6]": "Av(Perm((0, 1)))", "[0, 8]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 8]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[4, 6]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[5, 7]": "point", "[6, 2]": "Av(Perm((0, 1)))", "[7, 1]": "point", "[8, 6]": "Av(Perm((0, 1)))", "[9, 5]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=0). | The reverse of: Inserting the left most point in to the cell Cell(i=2, j=5). | Inserting the right most point in to the cell Cell(i=2, j=5). | The reverse of: Inserting the top most point in to the cell Cell(i=0, j=3). | Inserting the bottom most point in to the cell Cell(i=0, j=3). | "}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 580, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[4, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[4, 6]": "Av(Perm((1, 0)))", "[5, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=2, j=3). | Inserting the left most point in to the cell Cell(i=2, j=3). | "}, {"children": [], "formal_step": "recurse", "identifier": 581, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 6]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 4]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 5]": "point", "[5, 2]": "Av+(Perm((0, 1)))", "[6, 3]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 6]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 4]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 5]": "point", "[5, 2]": "Av+(Perm((0, 1)))", "[6, 3]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (5, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 587, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))", "[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[0, 6]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 6]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[3, 4]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))", "[4, 5]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[5, 2]": "Av(Perm((0, 1)))", "[6, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 588, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))", "[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=2, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=0, j=2). | Inserting the right most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2))).", "identifier": 136, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2))).", "identifier": 589, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}}
