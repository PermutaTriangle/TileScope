0321_1032_1302

===========================================
Log created Thu, 25 May 2017 06:18:56

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1034 inferral cache hits and 3939 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 5318 tilings in it right now.
There were 2952 tilings of which 270 are verified.
There were 1413 SiblingNodes of which 108 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4208* times, (2104 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:20:57

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 121 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 891 inferral cache hits and 160792 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 4331 tilings in it right now.
There were 2804 tilings of which 306 are verified.
There were 1481 SiblingNodes of which 162 are verified.

The function splittings called the partitioning cache *161021* times, (842 originating)
There were 0 cache misses

No proof tree was found after 121 seconds

===========================================
Log created Thu, 25 May 2017 06:22:58

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1323 inferral cache hits and 4239 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 4225 tilings in it right now.
There were 2707 tilings of which 204 are verified.
There were 815 SiblingNodes of which 66 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4536* times, (2268 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:24:58

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 2015 inferral cache hits and 79800 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 6381 tilings in it right now.
There were 4272 tilings of which 387 are verified.
There were 1296 SiblingNodes of which 147 are verified.

The function splittings called the partitioning cache *80220* times, (1332 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:26:58

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 15611 inferral cache hits and 4251 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 4973 tilings in it right now.
There were 2836 tilings of which 177 are verified.
There were 838 SiblingNodes of which 77 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4550* times, (2275 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:28:58

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 24759 inferral cache hits and 73224 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 7708 tilings in it right now.
There were 4455 tilings of which 384 are verified.
There were 1340 SiblingNodes of which 150 are verified.

The function splittings called the partitioning cache *73654* times, (1325 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:31:02

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 123 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 46 inferral cache hits and 1085 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 460 tilings in it right now.
There were 326 tilings of which 162 are verified.
There were 202 SiblingNodes of which 48 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1152* times, (576 originating)
There were 0 cache misses

No proof tree was found after 123 seconds

===========================================
Log created Thu, 25 May 2017 06:33:05

Maximum depth fully searched was 8

Maximum time set at 120 seconds

Total time taken was 122 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 168 inferral cache hits and 46482 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 899 tilings in it right now.
There were 814 tilings of which 380 are verified.
There were 496 SiblingNodes of which 120 are verified.

The function splittings called the partitioning cache *46611* times, (602 originating)
There were 0 cache misses

No proof tree was found after 122 seconds

===========================================
Log created Thu, 25 May 2017 06:35:07

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 122 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 287 inferral cache hits and 1950 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 633 tilings in it right now.
There were 532 tilings of which 167 are verified.
There were 132 SiblingNodes of which 45 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2084* times, (1042 originating)
There were 0 cache misses

No proof tree was found after 122 seconds

===========================================
Log created Thu, 25 May 2017 06:37:12

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 124 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 993 inferral cache hits and 11334 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 1961 tilings in it right now.
There were 1514 tilings of which 375 are verified.
There were 320 SiblingNodes of which 73 are verified.

The function splittings called the partitioning cache *11669* times, (967 originating)
There were 0 cache misses

No proof tree was found after 124 seconds

===========================================
Log created Thu, 25 May 2017 06:39:26

Maximum depth fully searched was 8

Maximum time set at 120 seconds

Total time taken was 133 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 19 inferral cache hits and 642 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 152 tilings in it right now.
There were 130 tilings of which 49 are verified.
There were 100 SiblingNodes of which 20 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *680* times, (340 originating)
There were 0 cache misses

No proof tree was found after 133 seconds

===========================================
Log created Thu, 25 May 2017 06:41:27

Maximum depth fully searched was 9

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 44 inferral cache hits and 8682 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 255 tilings in it right now.
There were 214 tilings of which 91 are verified.
There were 159 SiblingNodes of which 37 are verified.

The function splittings called the partitioning cache *8747* times, (345 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:43:28

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 121 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 139 inferral cache hits and 1183 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 236 tilings in it right now.
There were 217 tilings of which 26 are verified.
There were 50 SiblingNodes of which 14 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1264* times, (632 originating)
There were 0 cache misses

No proof tree was found after 121 seconds

===========================================
Log created Thu, 25 May 2017 06:45:31

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 122 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 472 inferral cache hits and 8636 partitioning cache hits.
The partitioning cache had 21 tilings in it right now.
The inferral cache has 833 tilings in it right now.
There were 672 tilings of which 104 are verified.
There were 143 SiblingNodes of which 32 are verified.

The function splittings called the partitioning cache *8851* times, (609 originating)
There were 0 cache misses

No proof tree was found after 122 seconds

===========================================
Log created Thu, 25 May 2017 06:47:31

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 121 inferral cache hits and 2250 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 822 tilings in it right now.
There were 699 tilings of which 221 are verified.
There were 475 SiblingNodes of which 71 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2382* times, (1191 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Thu, 25 May 2017 06:48:42

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 70 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 126 inferral cache hits and 41684 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 739 tilings in it right now.
There were 659 tilings of which 236 are verified.
There were 459 SiblingNodes of which 116 are verified.

The function splittings called the partitioning cache *41789* times, (508 originating)
There were 0 cache misses

A proof tree was found in 70 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        │                 ├─────14
                        │                 └─────15
                        └─────16
                              ├─────17
                              └─────18
                                    ├─────19
                                    │     ├─────20
                                    │     └─────21
                                    │           ├─────22
                                    │           └─────23
                                    └─────24
                                          ├─────25
                                          ├─────26
                                          └─────27

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point

Label: 6

+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point

Label: 7

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 8

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 9

+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 10

+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point

Label: 11

+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point

Label: 14

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 15

+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point

Label: 16

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 17

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 18

+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
4: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 19

+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
4: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 20

+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
3: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 21

+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
4: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 22

+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
4: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 23

+-+
|1|
+-+
1: point

Label: 24

+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 25

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 26

+-+
|1|
+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 27

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 203, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 204, "in_tiling": {"[0, 1]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 205, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 206, "in_tiling": {"[0, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 80, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 207, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=2)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 208, "in_tiling": {"[0, 1]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 80, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 209, "in_tiling": {"[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 1]": "point", "[3, 3]": "point"}, "out_tiling": {"[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 1]": "point", "[3, 3]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=0, j=2): Cell(i=1, j=2), Cell(i=1, j=1): Cell(i=2, j=1)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2))).", "identifier": 210, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2))).", "identifier": 211, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 212, "in_tiling": {"[0, 3]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av(Perm((1, 0)))", "[2, 1]": "point", "[3, 3]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 213, "in_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 151, "in_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 214, "in_tiling": {"[0, 5]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=4): Cell(i=0, j=5), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=3): Cell(i=3, j=4), Cell(i=3, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((1, 0))).", "identifier": 215, "in_tiling": {"[0, 5]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av(Perm((1, 0)))", "[1, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av(Perm((1, 0)))", "[1, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 34, "in_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 216, "in_tiling": {"[0, 6]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "Av+(Perm((1, 0)))", "[2, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[3, 3]": "point", "[4, 5]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "Av+(Perm((1, 0)))", "[2, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[3, 3]": "point", "[4, 5]": "point", "[5, 1]": "point"}, "recurse": "[{Cell(i=0, j=4): Cell(i=0, j=6), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2), Cell(i=2, j=3): Cell(i=4, j=5), Cell(i=3, j=1): Cell(i=5, j=1)}, {Cell(i=0, j=0): Cell(i=1, j=4)}, {Cell(i=0, j=0): Cell(i=3, j=3)}]", "relation": ""}], "formal_step": "Placing the rightmost point into column 1", "identifier": 151, "in_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2))).", "identifier": 34, "in_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the rightmost point into column 0", "identifier": 80, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2))).", "identifier": 19, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2))).", "identifier": 10, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2))).", "identifier": 0, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}}
