0123_0132_1203

===========================================
Log created Sat, 24 Jun 2017 14:15:24

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 1921 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_point_placements, all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty
The 1 symmetries of the basis were used

There were 417440 inferral cache hits and 994875 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 54326 tilings of which 1523 are verified.
There were 14982 SiblingNodes of which 602 are verified.

The function splittings called the partitioning cache *997157* times, (8584 originating)
There were 0 cache misses

A proof tree was found in 1921 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  │           ├─────8
                  │           └─────9
                  │                 ├─────10
                  │                 │     ├─────11
                  │                 │     └─────12
                  │                 │           ├─────13
                  │                 │           └─────14
                  │                 ├─────15
                  │                 │     ├─────16
                  │                 │     │     ├─────17
                  │                 │     │     └─────18
                  │                 │     └─────19
                  │                 └─────20
                  │                       ├─────21
                  │                       └─────22
                  └─────23
                        ├─────24
                        └─────25

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))

Label: 1

+-+
| |
+-+


Label: 2

+-+-+
|1|2|
+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|3| |3| |4|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))

Label: 5

+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | |4|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))

Label: 6

+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
2: point
3: Av(Perm((0, 1)))

Label: 7

+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | |4|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| |1|2| |3| |4|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))

Label: 8

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 9

+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|1|2| |3| |4|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
4: point

Label: 10

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| |1| |2| |3|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
4: point
We use his sibling for the next strategy
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
3: point

Label: 11

+-+
|1|
+-+
1: point

Label: 12

+-+-+-+
|3| | |
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
4: point

Label: 13

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
2: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
3: point
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
2: point

Label: 14

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1|2| |3| |4|
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|1|2| |3| |4|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))

Label: 15

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |5| | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
3: point
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
5: Av+(Perm((0, 1)))

Label: 16

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |5| | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
3: point
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
5: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|3| | | | |4|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))

Label: 17

+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | |4|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))

Label: 18

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 19

+-+
|1|
+-+
1: point

Label: 20

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
4: point
We use his sibling for the next strategy
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|1|2| |3|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))

Label: 21

+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|1|2| |3|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|1|2| |3| |4|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))

Label: 22

+-+
|1|
+-+
1: point

Label: 23

+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|3| |3|2| |4|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| |3| | | | |4|
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))

Label: 24

+-+-+-+
|2| | |
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 25

+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | |4|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1130, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1131, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1132, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 61, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1133, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1134, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=1, j=0). | ", "strategy_verified": true}, {"children": [], "formal_step": "recurse", "identifier": 185, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=3, j=1) in its column. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | Inserting the bottom most point in to the cell Cell(i=0, j=0). | The reverse of: Isolating the point at Cell(i=1, j=0) in its row. | Isolating the point at Cell(i=3, j=1) in its column. | ", "strategy_verified": false}], "formal_step": "insert leftmost point into col 0", "identifier": 50, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=0, j=2) in its column. | ", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 1049, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[4, 2]": "point", "[5, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1)}, {Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=0, j=2): Cell(i=1, j=3), Cell(i=1, j=1): Cell(i=2, j=2), Cell(i=2, j=0): Cell(i=3, j=0)}]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=3) in its column. | ", "strategy_verified": false}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 87, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 65, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "A splitting of the tiling", "identifier": 66, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[4, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[4, 5]": "point", "[5, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[5, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=0): Cell(i=5, j=0), Cell(i=3, j=2): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=3), Cell(i=1, j=1): Cell(i=4, j=5)}]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=3). | The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 1133, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 1135, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 1]": "point", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 5]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[4, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=3): Cell(i=2, j=3), Cell(i=3, j=4): Cell(i=3, j=4), Cell(i=4, j=0): Cell(i=4, j=0), Cell(i=4, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=5)}]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | The reverse of: Isolating the point at Cell(i=1, j=6) in its column. | The reverse of: Inserting the top most point in to the cell Cell(i=2, j=3). | ", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 185, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | Inserting the bottom most point in to the cell Cell(i=0, j=0). | The reverse of: Isolating the point at Cell(i=1, j=0) in its row. | Isolating the point at Cell(i=3, j=1) in its column. | ", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 1133, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 1136, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[4, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=2), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=3, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=1, j=3)}]", "relation": "| Separting the leftmost point from cell Cell(i=0, j=0). | The reverse of: Isolating the point at Cell(i=1, j=3) in its column. | ", "strategy_verified": false}], "formal_step": "insert topmost point into row 0", "identifier": 185, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=3, j=1) in its column. | Isolating the point at Cell(i=1, j=0) in its row. | The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | Isolating the point at Cell(i=2, j=1) in its column. | ", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 1137, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[3, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[5, 1]": "point", "[6, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=4, j=1): Cell(i=5, j=1), Cell(i=5, j=0): Cell(i=6, j=0)}]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=2). | The reverse of: Isolating the point at Cell(i=2, j=0) in its row. | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1))).", "identifier": 87, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 73, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [], "formal_step": "recurse", "identifier": 87, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "A splitting of the tiling", "identifier": 1067, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[5, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 6]": "point", "[6, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[6, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=5), Cell(i=1, j=1): Cell(i=3, j=4), Cell(i=2, j=0): Cell(i=4, j=3)}, {Cell(i=0, j=2): Cell(i=1, j=2), Cell(i=1, j=1): Cell(i=2, j=1), Cell(i=2, j=3): Cell(i=5, j=6), Cell(i=3, j=0): Cell(i=6, j=0), Cell(i=3, j=2): Cell(i=6, j=2)}]", "relation": "| The reverse of: Separting the rightmost point from cell Cell(i=2, j=2). | Inserting the bottom most point in to the cell Cell(i=2, j=2). | ", "strategy_verified": false}], "formal_step": "insert rightmost point into col 2", "identifier": 184, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))", "[4, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 2, 0))).", "identifier": 176, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | Inserting the top most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": false}], "formal_step": "insert leftmost point into col 0", "identifier": 104, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((1, 2, 0, 3)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}}
