0213_1032

===========================================
Log created Fri, 02 Jun 2017 09:10:52

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 606 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 2385 inferral cache hits and 10194 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 13091 tilings in it right now.
There were 7477 tilings of which 659 are verified.
There were 3637 SiblingNodes of which 359 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *10856* times, (5428 originating)
There were 0 cache misses

No proof tree was found after 606 seconds

===========================================
Log created Fri, 02 Jun 2017 09:20:52

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1880 inferral cache hits and 1496626 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 10484 tilings in it right now.
There were 6037 tilings of which 538 are verified.
There were 2787 SiblingNodes of which 312 are verified.

The function splittings called the partitioning cache *1497114* times, (2038 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Fri, 02 Jun 2017 09:25:58

Maximum depth fully searched was 3

Maximum time set at 600 seconds

Total time taken was 305 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 776 inferral cache hits and 4589 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 15031 tilings in it right now.
There were 6437 tilings of which 170 are verified.
There were 1859 SiblingNodes of which 72 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4906* times, (2453 originating)
There were 0 cache misses

A proof tree was found in 305 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  │           ├─────8
                  │           │     ├─────9
                  │           │     ├─────10
                  │           │     └─────11
                  │           └─────12
                  └─────13
                        ├─────14
                        └─────15

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point
3: Av(Perm((1, 0, 2)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point
3: Av+(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |4| |5|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point
4: Av(Perm((1, 0)))
5: Av(Perm((1, 0, 2)))

Label: 5

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| |4|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)))

Label: 6

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point
3: Av(Perm((1, 0)))

Label: 7

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| |4|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| | |4| |5| | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |5|
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| |4| | | | | | |
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| |2|
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point
4: Av(Perm((1, 0)))
5: Av(Perm((1, 0, 2)))

Label: 8

+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| |5| |4| | | |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | | |1| |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point
4: Av(Perm((1, 0, 2)))
5: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |5| | | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | |5| | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point
4: Av(Perm((1, 0)))
5: Av(Perm((1, 0, 2)))

Label: 9

+-+-+-+-+
| |5| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |4| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point
4: Av(Perm((1, 0)))
5: Av(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point
3: Av+(Perm((1, 0, 2)))

Label: 10

+-+
|1|
+-+
1: point

Label: 11

+-+
|1|
+-+
1: Av(Perm((1, 0, 2)))

Label: 12

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Label: 13

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |4| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |4| | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |3| |4| | |5|
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point
3: Av(Perm((0, 2, 1)))
4: Av(Perm((1, 0)))
5: Av(Perm((1, 0, 2)))

Label: 14

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|3| |4| |5|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point
3: Av(Perm((0, 2, 1)))
4: Av(Perm((1, 0)))
5: Av(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point
3: Av+(Perm((1, 0, 2)))

Label: 15

+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 180, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 181, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 182, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 137, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 0)))", "[1, 4]": "Av(Perm((1, 0, 2)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[1, 2]": "Av+(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=1, j=2). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 7, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 179, "in_tiling": {"[0, 1]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 4]": "Av(Perm((1, 0, 2)))", "[4, 0]": "Av(Perm((0, 2, 1)))", "[5, 2]": "point", "[6, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[6, 3]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 5]": "point", "[2, 6]": "Av(Perm((1, 0, 2)))", "[3, 0]": "Av(Perm((0, 2, 1)))", "[3, 2]": "Av(Perm((1, 0)))", "[3, 4]": "Av(Perm((1, 0, 2)))", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=1, j=2): Cell(i=3, j=2), Cell(i=1, j=4): Cell(i=3, j=4), Cell(i=2, j=3): Cell(i=4, j=3), Cell(i=3, j=0): Cell(i=5, j=0)}, {Cell(i=0, j=0): Cell(i=1, j=5)}, {Cell(i=0, j=0): Cell(i=2, j=6)}]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=1, j=4). | Inserting the left most point in to the cell Cell(i=1, j=4). | The reverse of: Inserting the bottom most point in to the cell Cell(i=3, j=2). | Inserting the right most point in to the cell Cell(i=3, j=2). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 21, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=2)]", "identifier": 183, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[3, 2]": "Av+(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 5]": "Av(Perm((1, 0)))", "[3, 6]": "point", "[4, 5]": "Av(Perm((1, 0, 2)))", "[5, 0]": "Av(Perm((0, 2, 1)))", "[6, 3]": "point", "[7, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[7, 4]": "Av(Perm((1, 0, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=4): Cell(i=2, j=5), Cell(i=2, j=5): Cell(i=3, j=6), Cell(i=3, j=4): Cell(i=4, j=5), Cell(i=4, j=0): Cell(i=5, j=0), Cell(i=5, j=2): Cell(i=6, j=3), Cell(i=6, j=0): Cell(i=7, j=0), Cell(i=6, j=3): Cell(i=7, j=4)}, {Cell(i=0, j=0): Cell(i=1, j=2)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=2). | "}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((1, 0, 2))).", "identifier": 184, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[3, 2]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[3, 2]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 137, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[4, 2]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[1, 2]": "Av+(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | Inserting the left most point in to the cell Cell(i=0, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=1, j=2). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 14, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=3), Cell(i=1, j=4), Cell(i=5, j=5)]", "identifier": 185, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))", "[5, 5]": "Av(Perm((1, 0)))", "[6, 6]": "point", "[7, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[7, 2]": "Av(Perm((1, 0, 2)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=2, j=2), Cell(i=1, j=1): Cell(i=3, j=1), Cell(i=2, j=2): Cell(i=4, j=2), Cell(i=3, j=3): Cell(i=6, j=6), Cell(i=4, j=0): Cell(i=7, j=0), Cell(i=4, j=2): Cell(i=7, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=4), Cell(i=2, j=2): Cell(i=5, j=5)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=0). | The reverse of: Inserting the left most point in to the cell Cell(i=0, j=2). | Inserting the top most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 137, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[1, 2]": "Av+(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[3, 2]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=2). | "}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((1, 0, 2))).", "identifier": 67, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))", "[1, 2]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2))).", "identifier": 82, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}}
