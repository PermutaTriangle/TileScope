0231_2013

===========================================
Log created Sun, 11 Jun 2017 19:36:34

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3611 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 429289 inferral cache hits and 45324 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 53169 tilings of which 1173 are verified.
There were 18838 SiblingNodes of which 675 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *48172* times, (24135 originating)
There were 6 cache misses

No proof tree was found after 3611 seconds

===========================================
Log created Sun, 11 Jun 2017 20:40:02

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3807 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 266815 inferral cache hits and 28909 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 91663 tilings in it right now.
There were 36552 tilings of which 1018 are verified.
There were 16917 SiblingNodes of which 703 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *30802* times, (15417 originating)
There were 2 cache misses

No proof tree was found after 3807 seconds

===========================================
Log created Sun, 11 Jun 2017 21:40:06

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3602 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 433932 inferral cache hits and 43410 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 55381 tilings of which 5110 are verified.
There were 14665 SiblingNodes of which 1164 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *46162* times, (23121 originating)
There were 5 cache misses

No proof tree was found after 3602 seconds

===========================================
Log created Mon, 12 Jun 2017 01:29:22

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 13755 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 424852 inferral cache hits and 4381940 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 54336 tilings of which 2083 are verified.
There were 21343 SiblingNodes of which 1122 are verified.

The function splittings called the partitioning cache *4384821* times, (12097 originating)
There were 0 cache misses

No proof tree was found after 13755 seconds

===========================================
Log created Mon, 12 Jun 2017 02:29:23

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 551510 inferral cache hits and 3601839 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 70499 tilings of which 2769 are verified.
There were 30250 SiblingNodes of which 1452 are verified.

The function splittings called the partitioning cache *3605438* times, (14663 originating)
There were 0 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Mon, 12 Jun 2017 03:32:12

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3768 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 315046 inferral cache hits and 1557585 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 40369 tilings of which 1539 are verified.
There were 11480 SiblingNodes of which 500 are verified.

The function splittings called the partitioning cache *1559632* times, (7828 originating)
There were 0 cache misses

No proof tree was found after 3768 seconds

===========================================
Log created Mon, 12 Jun 2017 04:32:13

Maximum depth fully searched was 5

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 11525 inferral cache hits and 37008 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 60199 tilings in it right now.
There were 36099 tilings of which 3048 are verified.
There were 19188 SiblingNodes of which 1648 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *39294* times, (19663 originating)
There were 2 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Mon, 12 Jun 2017 05:37:28

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3914 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6908 inferral cache hits and 6581849 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 32916 tilings in it right now.
There were 22069 tilings of which 1894 are verified.
There were 12907 SiblingNodes of which 1236 are verified.

The function splittings called the partitioning cache *6583259* times, (6039 originating)
There were 0 cache misses

No proof tree was found after 3914 seconds

===========================================
Log created Mon, 12 Jun 2017 06:38:49

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3680 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 7464 inferral cache hits and 26319 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 43182 tilings of which 1555 are verified.
There were 14601 SiblingNodes of which 1074 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *27978* times, (13989 originating)
There were 0 cache misses

No proof tree was found after 3680 seconds

===========================================
Log created Mon, 12 Jun 2017 07:38:55

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3605 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6068 inferral cache hits and 18890075 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 95998 tilings in it right now.
There were 38053 tilings of which 941 are verified.
There were 12050 SiblingNodes of which 597 are verified.

The function splittings called the partitioning cache *18891563* times, (6412 originating)
There were 0 cache misses

No proof tree was found after 3605 seconds

===========================================
Log created Mon, 12 Jun 2017 08:38:57

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_lrm_and_rlm_placements
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6874 inferral cache hits and 28200 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 45983 tilings of which 1288 are verified.
There were 13705 SiblingNodes of which 579 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *29978* times, (14989 originating)
There were 0 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Mon, 12 Jun 2017 09:38:59

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3601 seconds

The strategies applied were:
Batch: all_cell_insertions, all_lrm_and_rlm_placements
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6649 inferral cache hits and 17835742 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 43042 tilings of which 688 are verified.
There were 12021 SiblingNodes of which 306 are verified.

The function splittings called the partitioning cache *17837473* times, (7496 originating)
There were 0 cache misses

No proof tree was found after 3601 seconds

===========================================
Log created Mon, 12 Jun 2017 10:57:45

Maximum depth fully searched was 5

Maximum time set at 3600 seconds

Total time taken was 4726 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_lrm_and_rlm_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 10900 inferral cache hits and 34505 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 55354 tilings in it right now.
There were 32198 tilings of which 2077 are verified.
There were 17160 SiblingNodes of which 1319 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *36624* times, (18320 originating)
There were 1 cache misses

No proof tree was found after 4726 seconds

===========================================
Log created Mon, 12 Jun 2017 11:58:02

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3616 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_lrm_and_rlm_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6871 inferral cache hits and 6835492 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 34550 tilings in it right now.
There were 22787 tilings of which 1848 are verified.
There were 13241 SiblingNodes of which 1194 are verified.

The function splittings called the partitioning cache *6836949* times, (6244 originating)
There were 0 cache misses

No proof tree was found after 3616 seconds

===========================================
Log created Mon, 12 Jun 2017 12:58:15

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3612 seconds

The strategies applied were:
Batch: all_cell_insertions
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 8963 inferral cache hits and 30198 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 48259 tilings of which 1851 are verified.
There were 16537 SiblingNodes of which 1100 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *32094* times, (16047 originating)
There were 0 cache misses

No proof tree was found after 3612 seconds

===========================================
Log created Mon, 12 Jun 2017 13:58:16

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3601 seconds

The strategies applied were:
Batch: all_cell_insertions
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 7838 inferral cache hits and 14094968 partitioning cache hits.
The partitioning cache had 20 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 42630 tilings of which 982 are verified.
There were 12893 SiblingNodes of which 448 are verified.

The function splittings called the partitioning cache *14096787* times, (7974 originating)
There were 0 cache misses

No proof tree was found after 3601 seconds

===========================================
Log created Mon, 12 Jun 2017 14:58:19

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3602 seconds

The strategies applied were:
Batch: all_cell_insertions
Equivalent: all_point_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 15036 inferral cache hits and 33889 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 52011 tilings of which 826 are verified.
There were 9745 SiblingNodes of which 266 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *36042* times, (18021 originating)
There were 0 cache misses

No proof tree was found after 3602 seconds

===========================================
Log created Mon, 12 Jun 2017 15:59:37

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3677 seconds

The strategies applied were:
Batch: all_cell_insertions
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 3537 inferral cache hits and 4368832 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 52210 tilings in it right now.
There were 23652 tilings of which 911 are verified.
There were 8788 SiblingNodes of which 605 are verified.

The function splittings called the partitioning cache *4369762* times, (3723 originating)
There were 0 cache misses

No proof tree was found after 3677 seconds

===========================================
Log created Mon, 12 Jun 2017 16:32:19

Maximum depth fully searched was 5

Maximum time set at 3600 seconds

Total time taken was 1960 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 7741 inferral cache hits and 25335 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 36603 tilings in it right now.
There were 22979 tilings of which 2296 are verified.
There were 12849 SiblingNodes of which 1384 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *26936* times, (13468 originating)
There were 0 cache misses

A proof tree was found in 1960 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     └─────9
                  │           ├─────10
                  │           │     ├─────11
                  │           │     └─────12
                  │           └─────13
                  │                 ├─────14
                  │                 │     ├─────15
                  │                 │     │     ├─────16
                  │                 │     │     │     ├─────17
                  │                 │     │     │     └─────18
                  │                 │     │     │           ├─────19
                  │                 │     │     │           │     ├─────20
                  │                 │     │     │           │     └─────21
                  │                 │     │     │           └─────22
                  │                 │     │     └─────23
                  │                 │     └─────24
                  │                 │           ├─────25
                  │                 │           │     ├─────26
                  │                 │           │     │     ├─────27
                  │                 │           │     │     │     ├─────28
                  │                 │           │     │     │     └─────29
                  │                 │           │     │     └─────30
                  │                 │           │     │           ├─────31
                  │                 │           │     │           │     ├─────32
                  │                 │           │     │           │     └─────33
                  │                 │           │     │           │           ├─────34
                  │                 │           │     │           │           └─────35
                  │                 │           │     │           │                 ├─────36
                  │                 │           │     │           │                 │     ├─────37
                  │                 │           │     │           │                 │     └─────38
                  │                 │           │     │           │                 └─────39
                  │                 │           │     │           └─────40
                  │                 │           │     └─────41
                  │                 │           └─────42
                  │                 └─────43
                  └─────44

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((2, 0, 1)), Perm((0, 2, 3, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| |1| |4|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 5

+-+-+-+-+
| | | |4|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 6

+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 7

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))

Label: 8

+-+
|1|
+-+
1: point

Label: 9

+-+-+-+-+
| | | |4|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 10

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 11

+-+-+-+-+
| | | |4|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | | |1| |4|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | |1| |1| |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 14

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | |1| |4|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 15

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av+(Perm((0, 1)))

Label: 16

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point

Label: 17

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
2: point

Label: 18

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 19

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 20

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point

Label: 21

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | |1| |4|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 22

+-+
|1|
+-+
1: point

Label: 23

+-+
|1|
+-+
1: Av+(Perm((0, 1)))

Label: 24

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | |2| |4|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
2: Av(Perm((0, 1)))
3: point
4: Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 25

+-+-+-+-+
| |2| |4|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
2: Av(Perm((0, 1)))
3: point
4: Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 26

+-+-+-+-+
| | | |4|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
2: Av(Perm((0, 1)))
3: point
4: Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |1| |4|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 27

+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 28

+-+-+-+-+
| | | |4|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 29

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 30

+-+-+-+-+-+-+
| | | |4| |5|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av+(Perm((0, 1)))
5: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 31

+-+-+-+-+
| |4| |5|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av+(Perm((0, 1)))
5: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 32

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point

Label: 33

+-+-+-+-+
| |4| |5|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
2: Av(Perm((0, 1)))
3: point
4: Av+(Perm((0, 1)))
5: Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 34

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | |2| |4|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
2: Av(Perm((0, 1)))
3: point
4: Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 35

+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | | | | |6|
+-+-+-+-+-+-+-+
| | | | |5| | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av+(Perm((0, 1)))
5: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
6: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| | | | | | | |5|
+-+-+-+-+-+-+-+-+
| | | | | |4| | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| |2|
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
5: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 36

+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |5|
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
5: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 37

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |5|
+-+-+-+-+
| |4| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
5: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point

Label: 38

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 39

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 40

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 41

+-+-+-+-+
| |4| |5|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
2: Av(Perm((0, 1)))
3: point
4: Av+(Perm((0, 1)))
5: Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 42

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 43

+-+
|1|
+-+
1: point

Label: 44

+-+-+-+-+
| |4| |5|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))
3: point
4: Av+(Perm((0, 1)))
5: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 7575, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 7576, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 4, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=1)]", "identifier": 67, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[2, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[2, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=3)}, {Cell(i=0, j=0): Cell(i=0, j=1)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 7443, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=1)]", "identifier": 7577, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[4, 4]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[4, 4]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=3): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 7578, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 17, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 7444, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=2). | "}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3))).", "identifier": 2416, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=3)]", "identifier": 1001, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[4, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=3): Cell(i=3, j=4), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=3)}]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 17, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 573, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=3)]", "identifier": 7579, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=2), Cell(i=3, j=0): Cell(i=3, j=0)}, {Cell(i=0, j=0): Cell(i=1, j=3)}]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=1, j=3). | "}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 7443, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 130, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=2), Cell(i=1, j=1)]", "identifier": 7580, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 5]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 5]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=2, j=3), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=4, j=4), Cell(i=3, j=0): Cell(i=5, j=0), Cell(i=3, j=3): Cell(i=5, j=5)}, {Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 7579, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=3). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 7581, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 5]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 5]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 126, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 14, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=1), Cell(i=1, j=3)]", "identifier": 122, "in_tiling": {"[0, 1]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 4]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[4, 6]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 5]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 4]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[4, 6]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 5]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=2, j=2), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=1, j=2): Cell(i=3, j=4), Cell(i=2, j=4): Cell(i=4, j=6), Cell(i=3, j=0): Cell(i=5, j=0), Cell(i=3, j=3): Cell(i=5, j=5)}, {Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=1, j=1): Cell(i=1, j=3)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 29, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=1), Cell(i=3, j=4)]", "identifier": 7582, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 4]": "Av+(Perm((0, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[4, 5]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[5, 7]": "point", "[6, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[6, 6]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[5, 6]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[6, 8]": "point", "[7, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[7, 7]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=3): Cell(i=2, j=5), Cell(i=2, j=2): Cell(i=4, j=3), Cell(i=3, j=0): Cell(i=5, j=0), Cell(i=3, j=4): Cell(i=5, j=6), Cell(i=4, j=6): Cell(i=6, j=8), Cell(i=5, j=0): Cell(i=7, j=0), Cell(i=5, j=5): Cell(i=7, j=7)}, {Cell(i=0, j=0): Cell(i=1, j=1), Cell(i=1, j=1): Cell(i=3, j=4)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=4). | "}], "formal_step": "Placing the maximum point into row 4", "identifier": 7583, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 4]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 4]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 3); either it is empty or Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3))).", "identifier": 7455, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 130, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=2), Cell(i=1, j=1)]", "identifier": 7584, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 5]": "Av+(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 5]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 5]": "Av+(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 5]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=2, j=3), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=1, j=3): Cell(i=3, j=5), Cell(i=2, j=2): Cell(i=4, j=4), Cell(i=3, j=0): Cell(i=5, j=0), Cell(i=3, j=3): Cell(i=5, j=5)}, {Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=1)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 5); either it is empty or Av+(Perm((0, 1))).", "identifier": 134, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 4]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 5]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=4). | "}, {"children": [], "formal_step": "recurse", "identifier": 7583, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 4]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 4]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((0, 1))).", "identifier": 307, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 4]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 4]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 29, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=2), Cell(i=2, j=6)]", "identifier": 7581, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 5]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 5]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=3, j=1), Cell(i=1, j=4): Cell(i=3, j=5), Cell(i=2, j=3): Cell(i=4, j=4), Cell(i=3, j=0): Cell(i=5, j=0), Cell(i=3, j=4): Cell(i=5, j=5)}, {Cell(i=0, j=0): Cell(i=1, j=2), Cell(i=1, j=1): Cell(i=2, j=6)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (5, 3); either it is empty or Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3))).", "identifier": 7444, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[5, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=4)]", "identifier": 7585, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[4, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 4]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point", "[6, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[6, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=4): Cell(i=3, j=5), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=3): Cell(i=4, j=3), Cell(i=4, j=2): Cell(i=5, j=2), Cell(i=5, j=0): Cell(i=6, j=0), Cell(i=5, j=3): Cell(i=6, j=3)}, {Cell(i=0, j=0): Cell(i=0, j=4)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=2). | "}], "formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((1, 2, 0)), Perm((2, 0, 1, 3))).", "identifier": 7586, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[4, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))", "[4, 5]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 7443, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 7455, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 3); either it is empty or Av+(Perm((0, 1))).", "identifier": 126, "in_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=1, j=2). | Inserting the bottom most point in to the cell Cell(i=1, j=2). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1))).", "identifier": 4, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3))).", "identifier": 151, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}}
