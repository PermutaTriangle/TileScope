0231_0312

===========================================
Log created Fri, 09 Jun 2017 06:19:00

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 247639 inferral cache hits and 27196 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 81917 tilings in it right now.
There were 31644 tilings of which 493 are verified.
There were 11385 SiblingNodes of which 332 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *28946* times, (14473 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Fri, 09 Jun 2017 06:49:01

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 267682 inferral cache hits and 27429 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 82924 tilings in it right now.
There were 35339 tilings of which 621 are verified.
There were 14847 SiblingNodes of which 435 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *29218* times, (14609 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Fri, 09 Jun 2017 07:00:23

Maximum depth fully searched was 3

Maximum time set at 1800 seconds

Total time taken was 681 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 140992 inferral cache hits and 16377 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 41964 tilings in it right now.
There were 19636 tilings of which 864 are verified.
There were 5976 SiblingNodes of which 292 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *17496* times, (8780 originating)
There were 4 cache misses

A proof tree was found in 681 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     └─────9
                  │           ├─────10
                  │           │     ├─────11
                  │           │     │     ├─────12
                  │           │     │     └─────13
                  │           │     └─────14
                  │           └─────15
                  └─────16
                        ├─────17
                        └─────18

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
2: point

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+
|2|
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
2: point
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
|1|
+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))

Label: 5

+-+-+-+
|2| |3|
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 6

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 7

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))

Label: 8

+-+
|1|
+-+
1: point

Label: 9

+-+-+-+-+-+-+
|2| |1|3| |4|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|2| | | | |4|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|2| | |3| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 10

+-+-+-+-+-+
|2| | | |4|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 11

+-+-+-+
|2| |3|
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
|2| |3|1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 12

+-+-+-+-+
|2| |3|1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
|2| | | |4|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 13

+-+
|1|
+-+
1: point

Label: 14

+-+-+-+
|2| |3|
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 15

+-+
|1|
+-+
1: point

Label: 16

+-+-+-+
|2| |3|
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
|2| |3| |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 17

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))

Label: 18

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
4: Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 466, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 34, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=1) in its column. | The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=2, j=1)]", "identifier": 281, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 67, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[0, 3]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Separting the rightmost point from cell Cell(i=2, j=1). | Separting the leftmost point from cell Cell(i=2, j=1). | Isolating the point at Cell(i=3, j=1) in its row. | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=2, j=0)]", "identifier": 467, "in_tiling": {"[0, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 2]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=1): Cell(i=2, j=2), Cell(i=3, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": "| Separting the rightmost point from cell Cell(i=2, j=2). | Isolating the point at Cell(i=3, j=2) in its column. | The reverse of: Isolating the point at Cell(i=3, j=2) in its column. | "}, {"children": [], "formal_step": "recurse", "identifier": 456, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "insert bottommost point into row 1", "identifier": 67, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[0, 3]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=3, j=1) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=2, j=1). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=4, j=1)]", "identifier": 468, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[0, 4]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 4]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=3, j=2), Cell(i=4, j=3): Cell(i=5, j=4)}, {Cell(i=0, j=0): Cell(i=4, j=1)}]", "relation": "| The reverse of: Isolating the point at Cell(i=3, j=2) in its column. | Isolating the point at Cell(i=3, j=2) in its row. | "}], "formal_step": "insert leftmost point into col 2", "identifier": 456, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=2) in its column. | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 469, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=2) in its column. | The reverse of: Separating the bottommost point from cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "recurse", "identifier": 467, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=2) in its column. | "}], "formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 470, "in_tiling": {"[0, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 0]": "point", "[4, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=2) in its column. | "}], "formal_step": "Isolated the point at Cell(i=0, j=0) in its column", "identifier": 471, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[0, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | The reverse of: Separating the topmost point from cell Cell(i=0, j=1). | Separating the bottommost point from cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2))).", "identifier": 34, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[0, 1]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2))).", "identifier": 24, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "recurse": "[]", "relation": ""}}
