0132_1023

===========================================
Log created Sat, 03 Jun 2017 14:37:09

Maximum depth fully searched was 5

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5615 inferral cache hits and 23606 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 32811 tilings in it right now.
There were 15312 tilings of which 1529 are verified.
There were 7621 SiblingNodes of which 601 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *25102* times, (12551 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Sat, 03 Jun 2017 15:19:38

Maximum depth fully searched was 5

Maximum time set at 1800 seconds

Total time taken was 2548 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 4205 inferral cache hits and 4850310 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 23645 tilings in it right now.
There were 10600 tilings of which 834 are verified.
There were 4952 SiblingNodes of which 366 are verified.

The function splittings called the partitioning cache *4851289* times, (4087 originating)
There were 0 cache misses

No proof tree was found after 2548 seconds

===========================================
Log created Sat, 03 Jun 2017 15:47:11

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1652 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 3499 inferral cache hits and 17784 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 68625 tilings in it right now.
There were 25702 tilings of which 885 are verified.
There were 7748 SiblingNodes of which 371 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *18934* times, (9467 originating)
There were 0 cache misses

A proof tree was found in 1652 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     ├─────7
                  │     └─────8
                  └─────9
                        ├─────10
                        │     ├─────11
                        │     │     ├─────12
                        │     │     │     ├─────13
                        │     │     │     │     ├─────14
                        │     │     │     │     │     ├─────15
                        │     │     │     │     │     └─────16
                        │     │     │     │     └─────17
                        │     │     │     └─────18
                        │     │     └─────19
                        │     └─────20
                        │           ├─────21
                        │           │     ├─────22
                        │           │     │     ├─────23
                        │           │     │     └─────24
                        │           │     └─────25
                        │           └─────26
                        └─────27

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| |2| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
3: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
4: Av(Perm((0, 1)))

Label: 5

+-+-+-+-+-+
|3| |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
3: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))

Label: 6

+-+
|1|
+-+
1: point

Label: 7

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 8

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))

Label: 9

+-+-+-+-+-+
|3| |2| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
3: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
|5| |2| | |6| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
|4| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |3| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
5: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
6: Av(Perm((0, 1)))

Label: 10

+-+-+-+-+-+-+-+
|4| |5| | |6| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
5: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
6: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|5| |6| | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
|2| | |3| | |4|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((0, 1)))
5: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
6: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 11

+-+-+-+-+-+-+
|4| |5| | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
5: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| |5| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
5: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 12

+-+-+-+-+
|4| |5| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
5: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| |5| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
5: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 13

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
4: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 14

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 15

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))

Label: 16

+-+
|1|
+-+
1: point

Label: 17

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| |5| | |6| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
5: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
6: Av(Perm((0, 1)))

Label: 18

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))

Label: 19

+-+
|1|
+-+
1: point

Label: 20

+-+-+-+-+-+-+-+
|5| |6| | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
|2| | |3| | |4|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av+(Perm((0, 1)))
5: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
6: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
|5| |6| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
|4| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
|2| | | | | | |2|
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
5: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
6: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 21

+-+-+-+-+-+-+
|5| |6| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
5: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
6: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
We use his sibling for the next strategy
+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
4: Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 22

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| | |5| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
5: Av(Perm((1, 0)))

Label: 23

+-+-+-+-+
|4| | |5|
+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
5: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
|4| |5| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
5: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 24

+-+
|1|
+-+
1: point

Label: 25

+-+-+-+-+
|3| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|5| |6| | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
|2| | |3| | |4|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av+(Perm((0, 1)))
5: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))
6: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))

Label: 26

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 27

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1140, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1141, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 4, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 46, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 42, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "The components of the tiling", "identifier": 1142, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=3, j=0)}, {Cell(i=0, j=0): Cell(i=4, j=1)}, {Cell(i=0, j=1): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=2), Cell(i=2, j=1): Cell(i=2, j=3)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 42, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 4, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 43, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=1): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 227, "in_tiling": {"[0, 1]": "Av+(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 1]": "point", "[2, 5]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 0]": "point", "[5, 5]": "Av(Perm((0, 1)))", "[6, 4]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((0, 1, 3, 2))).", "identifier": 0, "in_tiling": {"[0, 1]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=3, j=1)]", "identifier": 6, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 3]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 4, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=3, j=0)]", "identifier": 906, "in_tiling": {"[0, 3]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 1]": "point", "[2, 5]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 0]": "point", "[5, 4]": "point"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[2, 5]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 0]": "point", "[4, 4]": "point"}, "recurse": "[{Cell(i=0, j=4): Cell(i=0, j=5), Cell(i=1, j=1): Cell(i=1, j=2), Cell(i=2, j=0): Cell(i=2, j=1), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=2, j=4): Cell(i=2, j=5), Cell(i=3, j=3): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=3, j=0)}]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=1). | Inserting the left most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 6, "in_tiling": {"[0, 1]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 3]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=2, j=1). | Inserting the right most point in to the cell Cell(i=2, j=1). | The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | Inserting the left most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 4, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 1074, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 4]": "Av(Perm((1, 0)))", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=3, j=2), Cell(i=3, j=3): Cell(i=3, j=4)}, {Cell(i=0, j=0): Cell(i=4, j=1)}]", "relation": "| Inserting the left most point in to the cell Cell(i=2, j=2). | "}, {"children": [], "formal_step": "recurse", "identifier": 848, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 0]": "point", "[5, 3]": "point", "[6, 2]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=3). | Inserting the bottom most point in to the cell Cell(i=0, j=1). | The reverse of: Inserting the bottom most point in to the cell Cell(i=6, j=2). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 30, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 6]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 6]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 3]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 5]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=2, j=3). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1134, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=4, j=0), Cell(i=7, j=2)]", "identifier": 848, "in_tiling": {"[0, 2]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 0]": "point", "[5, 3]": "point", "[6, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 7]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 1]": "point", "[2, 7]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 0]": "point", "[5, 6]": "point", "[6, 3]": "point", "[7, 2]": "Av(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=4): Cell(i=0, j=5), Cell(i=0, j=6): Cell(i=0, j=7), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=6): Cell(i=2, j=7), Cell(i=3, j=3): Cell(i=3, j=4), Cell(i=4, j=5): Cell(i=5, j=6), Cell(i=5, j=2): Cell(i=6, j=3)}, {Cell(i=0, j=0): Cell(i=4, j=0), Cell(i=1, j=1): Cell(i=7, j=2)}]", "relation": "| Inserting the top most point in to the cell Cell(i=6, j=2). | "}], "formal_step": "We perform cell insertion into cell (6, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 227, "in_tiling": {"[0, 3]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 1]": "point", "[2, 5]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 0]": "point", "[5, 5]": "Av(Perm((0, 1)))", "[6, 4]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 0]": "point", "[5, 3]": "point", "[6, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=4, j=2). | Inserting the top most point in to the cell Cell(i=4, j=2). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 78, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=6, j=2), Cell(i=8, j=1)]", "identifier": 1143, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[4, 3]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 5]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)))", "[0, 7]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 3]": "point", "[2, 7]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 0]": "point", "[5, 7]": "Av(Perm((0, 1)))", "[6, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[7, 6]": "point", "[8, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=5), Cell(i=0, j=5): Cell(i=0, j=7), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=5): Cell(i=2, j=7), Cell(i=3, j=2): Cell(i=3, j=4), Cell(i=4, j=0): Cell(i=4, j=0), Cell(i=5, j=5): Cell(i=5, j=7), Cell(i=6, j=4): Cell(i=7, j=6)}, {Cell(i=0, j=1): Cell(i=6, j=2), Cell(i=1, j=0): Cell(i=8, j=1)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=3). | "}], "formal_step": "We perform cell insertion into cell (4, 3); either it is empty or Av+(Perm((0, 1))).", "identifier": 1144, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))", "[4, 3]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3))).", "identifier": 42, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2, 3)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3))).", "identifier": 897, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 2, 3)))"}, "recurse": "[]", "relation": ""}}
