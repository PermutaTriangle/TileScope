0123_0213

===========================================
Log created Sun, 11 Jun 2017 19:38:35

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3732 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 305601 inferral cache hits and 34129 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 37698 tilings of which 502 are verified.
There were 11683 SiblingNodes of which 347 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *36282* times, (18159 originating)
There were 2 cache misses

No proof tree was found after 3732 seconds

===========================================
Log created Mon, 12 Jun 2017 08:15:49

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 45433 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 333628 inferral cache hits and 35094 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 44173 tilings of which 1059 are verified.
There were 18145 SiblingNodes of which 747 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *37356* times, (18703 originating)
There were 3 cache misses

No proof tree was found after 45433 seconds

===========================================
Log created Mon, 12 Jun 2017 09:15:50

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 486688 inferral cache hits and 51938 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 60117 tilings of which 2127 are verified.
There were 17727 SiblingNodes of which 942 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *55192* times, (27656 originating)
There were 7 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Mon, 12 Jun 2017 10:15:51

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 388716 inferral cache hits and 4565175 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 47996 tilings of which 1119 are verified.
There were 17136 SiblingNodes of which 819 are verified.

The function splittings called the partitioning cache *4567681* times, (10993 originating)
There were 0 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Mon, 12 Jun 2017 11:15:52

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 401507 inferral cache hits and 3551564 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 52221 tilings of which 1426 are verified.
There were 23574 SiblingNodes of which 1029 are verified.

The function splittings called the partitioning cache *3554078* times, (10577 originating)
There were 0 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Mon, 12 Jun 2017 12:15:54

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3601 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 511818 inferral cache hits and 2989645 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 64623 tilings of which 2263 are verified.
There were 19685 SiblingNodes of which 926 are verified.

The function splittings called the partitioning cache *2992623* times, (12655 originating)
There were 0 cache misses

No proof tree was found after 3601 seconds

===========================================
Log created Mon, 12 Jun 2017 13:15:56

Maximum depth fully searched was 2

Maximum time set at 3600 seconds

Total time taken was 3601 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5768 inferral cache hits and 9978 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 18233 tilings in it right now.
There were 54864 tilings of which 7035 are verified.
There were 49974 SiblingNodes of which 6501 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *10462* times, (5231 originating)
There were 0 cache misses

No proof tree was found after 3601 seconds

===========================================
Log created Mon, 12 Jun 2017 14:17:05

Maximum depth fully searched was 1

Maximum time set at 3600 seconds

Total time taken was 3668 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 77 inferral cache hits and 10593904 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 924 tilings in it right now.
There were 2416 tilings of which 480 are verified.
There were 2216 SiblingNodes of which 468 are verified.

The function splittings called the partitioning cache *10593922* times, (108 originating)
There were 0 cache misses

No proof tree was found after 3668 seconds

===========================================
Log created Mon, 12 Jun 2017 15:17:06

Maximum depth fully searched was 2

Maximum time set at 3600 seconds

Total time taken was 3601 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 3325 inferral cache hits and 10683 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 36187 tilings in it right now.
There were 69543 tilings of which 12039 are verified.
There were 59885 SiblingNodes of which 11560 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *11220* times, (5610 originating)
There were 0 cache misses

No proof tree was found after 3601 seconds

===========================================
Log created Mon, 12 Jun 2017 16:26:47

Maximum depth fully searched was 1

Maximum time set at 3600 seconds

Total time taken was 4180 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 5 inferral cache hits and 10175766 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1735 tilings in it right now.
There were 2799 tilings of which 493 are verified.
There were 2343 SiblingNodes of which 471 are verified.

The function splittings called the partitioning cache *10175793* times, (142 originating)
There were 0 cache misses

No proof tree was found after 4180 seconds

===========================================
Log created Mon, 12 Jun 2017 17:26:51

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3603 seconds

The strategies applied were:
Batch: all_cell_insertions, all_lrm_and_rlm_placements
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6413 inferral cache hits and 26343 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 98062 tilings in it right now.
There were 39611 tilings of which 465 are verified.
There were 12439 SiblingNodes of which 182 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *28016* times, (14008 originating)
There were 0 cache misses

No proof tree was found after 3603 seconds

===========================================
Log created Mon, 12 Jun 2017 18:27:02

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3610 seconds

The strategies applied were:
Batch: all_cell_insertions, all_lrm_and_rlm_placements
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 5922 inferral cache hits and 28079815 partitioning cache hits.
The partitioning cache had 9 tilings in it right now.
The inferral cache has 91625 tilings in it right now.
There were 37660 tilings of which 408 are verified.
There were 11907 SiblingNodes of which 183 are verified.

The function splittings called the partitioning cache *28081387* times, (6829 originating)
There were 0 cache misses

No proof tree was found after 3610 seconds

===========================================
Log created Mon, 12 Jun 2017 19:44:13

Maximum depth fully searched was 5

Maximum time set at 3600 seconds

Total time taken was 4629 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_lrm_and_rlm_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6499 inferral cache hits and 24718 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 25759 tilings in it right now.
There were 16663 tilings of which 898 are verified.
There were 10314 SiblingNodes of which 459 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *26238* times, (13119 originating)
There were 0 cache misses

No proof tree was found after 4629 seconds

===========================================
Log created Mon, 12 Jun 2017 20:46:34

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3740 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_lrm_and_rlm_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 5580 inferral cache hits and 5355341 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 21709 tilings in it right now.
There were 14401 tilings of which 824 are verified.
There were 8978 SiblingNodes of which 441 are verified.

The function splittings called the partitioning cache *5356641* times, (5962 originating)
There were 0 cache misses

No proof tree was found after 3740 seconds

===========================================
Log created Mon, 12 Jun 2017 21:46:40

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3605 seconds

The strategies applied were:
Batch: all_cell_insertions
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5135 inferral cache hits and 22067 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 99843 tilings in it right now.
There were 38521 tilings of which 308 are verified.
There were 11652 SiblingNodes of which 168 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *23474* times, (11737 originating)
There were 0 cache misses

No proof tree was found after 3605 seconds

===========================================
Log created Mon, 12 Jun 2017 22:46:44

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3603 seconds

The strategies applied were:
Batch: all_cell_insertions
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 5395 inferral cache hits and 35525572 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 90300 tilings in it right now.
There were 35918 tilings of which 209 are verified.
There were 11039 SiblingNodes of which 113 are verified.

The function splittings called the partitioning cache *35527015* times, (6185 originating)
There were 0 cache misses

No proof tree was found after 3603 seconds

===========================================
Log created Mon, 12 Jun 2017 23:46:46

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3601 seconds

The strategies applied were:
Batch: all_cell_insertions
Equivalent: all_point_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 9885 inferral cache hits and 28680 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 95547 tilings in it right now.
There were 42324 tilings of which 362 are verified.
There were 10864 SiblingNodes of which 170 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *30512* times, (15256 originating)
There were 0 cache misses

No proof tree was found after 3601 seconds

===========================================
Log created Tue, 13 Jun 2017 00:46:48

Maximum depth fully searched was 4

Maximum time set at 3600 seconds

Total time taken was 3601 seconds

The strategies applied were:
Batch: all_cell_insertions
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 5387 inferral cache hits and 38210220 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 85439 tilings in it right now.
There were 34705 tilings of which 257 are verified.
There were 10720 SiblingNodes of which 143 are verified.

The function splittings called the partitioning cache *38211597* times, (5960 originating)
There were 0 cache misses

No proof tree was found after 3601 seconds

===========================================
Log created Tue, 13 Jun 2017 01:46:58

Maximum depth fully searched was 5

Maximum time set at 3600 seconds

Total time taken was 3608 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5922 inferral cache hits and 23214 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 21979 tilings in it right now.
There were 16155 tilings of which 1276 are verified.
There were 10708 SiblingNodes of which 629 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *24660* times, (12330 originating)
There were 0 cache misses

No proof tree was found after 3608 seconds

===========================================
Log created Tue, 13 Jun 2017 02:46:59

Maximum depth fully searched was 5

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 4826 inferral cache hits and 3692356 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 18866 tilings in it right now.
There were 14071 tilings of which 1286 are verified.
There were 9221 SiblingNodes of which 629 are verified.

The function splittings called the partitioning cache *3693573* times, (5360 originating)
There were 0 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Tue, 13 Jun 2017 03:46:59

Maximum depth fully searched was 5

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 10635 inferral cache hits and 35382 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 26539 tilings in it right now.
There were 19524 tilings of which 1267 are verified.
There were 8039 SiblingNodes of which 438 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *37618* times, (18818 originating)
There were 1 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Tue, 13 Jun 2017 04:47:17

Maximum depth fully searched was 5

Maximum time set at 3600 seconds

Total time taken was 3618 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 12584 inferral cache hits and 1889854 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 30432 tilings in it right now.
There were 23685 tilings of which 1934 are verified.
There were 9966 SiblingNodes of which 699 are verified.

The function splittings called the partitioning cache *1892306* times, (10360 originating)
There were 0 cache misses

No proof tree was found after 3618 seconds

===========================================
Log created Tue, 13 Jun 2017 05:47:18

Maximum depth fully searched was 5

Maximum time set at 3600 seconds

Total time taken was 3600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 240533 inferral cache hits and 53891 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 69418 tilings in it right now.
There were 37594 tilings of which 2209 are verified.
There were 13165 SiblingNodes of which 674 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *57328* times, (28688 originating)
There were 3 cache misses

No proof tree was found after 3600 seconds

===========================================
Log created Tue, 13 Jun 2017 06:41:32

Maximum depth fully searched was 5

Maximum time set at 3600 seconds

Total time taken was 3253 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 268102 inferral cache hits and 2439125 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 76623 tilings in it right now.
There were 41454 tilings of which 3289 are verified.
There were 14449 SiblingNodes of which 915 are verified.

The function splittings called the partitioning cache *2443001* times, (16297 originating)
There were 0 cache misses

A proof tree was found in 3253 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  │           ├─────8
                  │           │     ├─────9
                  │           │     └─────10
                  │           │           ├─────11
                  │           │           │     ├─────12
                  │           │           │     │     ├─────13
                  │           │           │     │     │     ├─────14
                  │           │           │     │     │     └─────15
                  │           │           │     │     │           ├─────16
                  │           │           │     │     │           │     ├─────17
                  │           │           │     │     │           │     └─────18
                  │           │           │     │     │           │           ├─────19
                  │           │           │     │     │           │           │     ├─────20
                  │           │           │     │     │           │           │     └─────21
                  │           │           │     │     │           │           └─────22
                  │           │           │     │     │           │                 ├─────23
                  │           │           │     │     │           │                 │     ├─────24
                  │           │           │     │     │           │                 │     │     ├─────25
                  │           │           │     │     │           │                 │     │     │     ├─────26
                  │           │           │     │     │           │                 │     │     │     │     ├─────27
                  │           │           │     │     │           │                 │     │     │     │     └─────28
                  │           │           │     │     │           │                 │     │     │     └─────29
                  │           │           │     │     │           │                 │     │     └─────30
                  │           │           │     │     │           │                 │     └─────31
                  │           │           │     │     │           │                 │           ├─────32
                  │           │           │     │     │           │                 │           │     ├─────33
                  │           │           │     │     │           │                 │           │     │     ├─────34
                  │           │           │     │     │           │                 │           │     │     └─────35
                  │           │           │     │     │           │                 │           │     │           ├─────36
                  │           │           │     │     │           │                 │           │     │           │     ├─────37
                  │           │           │     │     │           │                 │           │     │           │     │     ├─────38
                  │           │           │     │     │           │                 │           │     │           │     │     │     ├─────39
                  │           │           │     │     │           │                 │           │     │           │     │     │     └─────40
                  │           │           │     │     │           │                 │           │     │           │     │     │           ├─────41
                  │           │           │     │     │           │                 │           │     │           │     │     │           └─────42
                  │           │           │     │     │           │                 │           │     │           │     │     └─────43
                  │           │           │     │     │           │                 │           │     │           │     └─────44
                  │           │           │     │     │           │                 │           │     │           │           ├─────45
                  │           │           │     │     │           │                 │           │     │           │           │     ├─────46
                  │           │           │     │     │           │                 │           │     │           │           │     └─────47
                  │           │           │     │     │           │                 │           │     │           │           └─────48
                  │           │           │     │     │           │                 │           │     │           │                 ├─────49
                  │           │           │     │     │           │                 │           │     │           │                 └─────50
                  │           │           │     │     │           │                 │           │     │           └─────51
                  │           │           │     │     │           │                 │           │     └─────52
                  │           │           │     │     │           │                 │           │           ├─────53
                  │           │           │     │     │           │                 │           │           └─────54
                  │           │           │     │     │           │                 │           │                 ├─────55
                  │           │           │     │     │           │                 │           │                 └─────56
                  │           │           │     │     │           │                 │           └─────57
                  │           │           │     │     │           │                 └─────58
                  │           │           │     │     │           └─────59
                  │           │           │     │     │                 ├─────60
                  │           │           │     │     │                 └─────61
                  │           │           │     │     │                       ├─────62
                  │           │           │     │     │                       └─────63
                  │           │           │     │     └─────64
                  │           │           │     └─────65
                  │           │           └─────66
                  │           │                 ├─────67
                  │           │                 └─────68
                  │           └─────69
                  └─────70
                        ├─────71
                        └─────72
                              ├─────73
                              │     ├─────74
                              │     └─────75
                              └─────76
                                    ├─────77
                                    │     ├─────78
                                    │     └─────79
                                    └─────80

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+
|1|2|
+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+-+
|1|2|
+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+-+
|1|2|2|
+-+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
2: point

Label: 5

+-+-+-+
|3|2| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 6

+-+-+-+
|3| | |
+-+-+-+
| |1| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 7

+-+-+-+
|4| | |
+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| |5| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 8

+-+-+-+-+
|4| |5| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|2| |3|1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 9

+-+-+-+
| |2|1|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((0, 1)))

Label: 10

+-+-+-+-+
|2| |3|1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 11

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|5| | |4| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|3| | |4| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
5: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 12

+-+-+-+-+-+
|4| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |3| |3| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| |3| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 13

+-+-+-+-+
| |3| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |2|
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 14

+-+-+
| |2|
+-+-+
|1| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 15

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |2|
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|1| |
+-+-+
| |2|
+-+-+
| |1|
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 16

+-+-+-+-+
| |3| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av(Perm((0, 1)))

Label: 17

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 18

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|2| |3| |4|1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av(Perm((0, 1)))

Label: 19

+-+-+-+-+-+-+
|2| |3| |4| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |4| |3| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| | |3| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 20

+-+-+-+-+-+
| |4| |3| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
| |3| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 21

+-+
|1|
+-+
1: point

Label: 22

+-+-+-+-+-+-+
|3| |4| |5| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
5: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|4| |5| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|2| | | | |3|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 23

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|4| |5| |5| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| |3| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 24

+-+-+-+-+-+-+
|3| |4| |4| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 25

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 26

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 27

+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 28

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 29

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 30

+-+
|1|
+-+
1: point

Label: 31

+-+-+-+-+-+-+
|3| |4| |5| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| |1| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
5: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|4| |5| |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 32

+-+-+-+-+-+-+
|4| |5| |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|3| |4| |5| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
5: Av(Perm((0, 1)))

Label: 33

+-+-+-+-+-+-+
|2| |3| |4| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 34

+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 35

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 36

+-+-+-+
|2| |3|
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 37

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 38

+-+-+-+
|3| | |
+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+-+
|2| |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 39

+-+-+
| |1|
+-+-+
|1| |
+-+-+
1: point

Label: 40

+-+-+-+
|2| |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+
|2|1| |1|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 41

+-+-+-+
|1|2|2|
+-+-+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
2: point
We use his sibling for the next strategy
+-+-+
|1|2|
+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 42

+-+
|1|
+-+
1: point

Label: 43

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 44

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|5| |6| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| |3| | |4|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((0, 1)))
5: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
6: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 45

+-+-+-+-+-+-+
|4| |5| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | | |3|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 46

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 47

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 48

+-+-+-+-+-+-+
|4| |5| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| |1| | |3|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
|4| |5| |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 49

+-+-+-+-+-+-+
|4| |5| |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 50

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 51

+-+
|1|
+-+
1: point

Label: 52

+-+-+-+-+-+-+
|3| |4| |5| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
5: Av(Perm((0, 1)))

Label: 53

+-+-+-+-+-+-+
|3| |4| |5| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
5: Av(Perm((0, 1)))

Label: 54

+-+-+-+-+-+-+
|4| |5| |6| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
6: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|3| |4| |5| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
5: Av(Perm((0, 1)))

Label: 55

+-+-+-+-+-+-+
|3| |4| |5| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
5: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|4| |5| |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 56

+-+
|1|
+-+
1: point

Label: 57

+-+
|1|
+-+
1: point

Label: 58

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 59

+-+-+-+-+
| |3| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 60

+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 61

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|2|1| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 62

+-+-+-+-+
|2|1| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|2| |3|1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 63

+-+
|1|
+-+
1: point

Label: 64

+-+
|1|
+-+
1: point

Label: 65

+-+-+-+-+-+
|4| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|2| |3| |4| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av(Perm((0, 1)))

Label: 66

+-+-+-+-+
|4| |5| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 67

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 68

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|3| |4| |5| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
5: Av(Perm((0, 1)))

Label: 69

+-+
|1|
+-+
1: point

Label: 70

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1|2| |
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 71

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 72

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1|2| |
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 73

+-+-+-+
|3| | |
+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+-+
|3| | |
+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))

Label: 74

+-+-+
|3| |
+-+-+
| |1|
+-+-+
|2| |
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+
|4| |5| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 75

+-+
|1|
+-+
1: point

Label: 76

+-+-+-+
|4| | |
+-+-+-+
| | |2|
+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| |4| |2|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 77

+-+-+-+-+-+
|2| |3| |1|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 78

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 79

+-+
|1|
+-+
1: point

Label: 80

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 4176, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 4177, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 2]": "point", "[2, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=1) in its row. | The reverse of: Separting the rightmost point from cell Cell(i=0, j=1). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 4178, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Separting the rightmost point from cell Cell(i=1, j=1). | Separting the leftmost point from cell Cell(i=1, j=1). | Isolating the point at Cell(i=2, j=1) in its row. | "}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 4179, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[1, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[1, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 4180, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[4, 1]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=0, j=2). | Isolating the point at Cell(i=3, j=2) in its row. | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 2889, "in_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[1, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[2, 1]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[2, 0]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=3, j=4) in its column. | The reverse of: Isolating the point at Cell(i=3, j=4) in its column. | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 2890, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 0]": "point", "[1, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[2, 1]": "point", "[3, 5]": "Av(Perm((0, 1)))", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=1, j=4): Cell(i=1, j=5), Cell(i=2, j=1): Cell(i=2, j=1), Cell(i=3, j=4): Cell(i=3, j=5), Cell(i=4, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=5, j=2)}]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=3) in its column. | Separting the leftmost point from cell Cell(i=0, j=3). | Isolating the point at Cell(i=3, j=3) in its column. | Isolating the point at Cell(i=5, j=3) in its row. | The reverse of: Isolating the point at Cell(i=3, j=5) in its column. | "}, {"children": [{"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 4181, "in_tiling": {"[0, 0]": "point", "[1, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 4180, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[4, 1]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=0, j=2). | Isolating the point at Cell(i=3, j=2) in its row. | "}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3))).", "identifier": 2771, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 3351, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 3]": "point"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1))).", "identifier": 260, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4182, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 0]": "point", "[4, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[5, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 3]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=2): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=4) in its column. | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 4183, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 111, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 613, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 0]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Separting the rightmost point from cell Cell(i=0, j=0). | Separting the leftmost point from cell Cell(i=0, j=0). | The reverse of: Separting the rightmost point from cell Cell(i=1, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4184, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=0): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": "| Separting the rightmost point from cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3))).", "identifier": 2273, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=1) in its row. | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 151, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 2287, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=2, j=1), Cell(i=1, j=1): Cell(i=4, j=2)}]", "relation": "| Separting the leftmost point from cell Cell(i=3, j=2). | Isolating the point at Cell(i=4, j=2) in its row. | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 260, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 151, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4185, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=2): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=4, j=1), Cell(i=1, j=1): Cell(i=5, j=2)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 3444, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point", "[4, 5]": "Av(Perm((0, 1)))", "[5, 4]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point", "[4, 5]": "Av(Perm((0, 1)))", "[5, 4]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 151, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4186, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 6]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 6]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 3]": "point", "[4, 6]": "Av(Perm((0, 1)))", "[5, 5]": "point", "[6, 1]": "point", "[7, 2]": "Av(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=0, j=5): Cell(i=0, j=6), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=5): Cell(i=2, j=6), Cell(i=3, j=2): Cell(i=3, j=3), Cell(i=4, j=5): Cell(i=4, j=6), Cell(i=5, j=4): Cell(i=5, j=5)}, {Cell(i=0, j=0): Cell(i=6, j=1), Cell(i=1, j=1): Cell(i=7, j=2)}]", "relation": "| Isolating the point at Cell(i=2, j=4) in its column. | Isolating the point at Cell(i=4, j=4) in its row. | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 2810, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=2, j=2). | Isolating the point at Cell(i=5, j=2) in its row. | "}], "formal_step": "Isolated the point at Cell(i=2, j=1) in its column", "identifier": 4054, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4187, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=1): Cell(i=2, j=1), Cell(i=2, j=2): Cell(i=2, j=3)}, {Cell(i=0, j=0): Cell(i=3, j=2)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 0, 2))).", "identifier": 226, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=3) in its column. | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 4188, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 4]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 4]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 3444, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point", "[4, 5]": "Av(Perm((0, 1)))", "[5, 4]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=3) in its column. | Isolating the point at Cell(i=2, j=3) in its row. | Isolating the point at Cell(i=2, j=5) in its column. | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4189, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point", "[4, 5]": "Av(Perm((0, 1)))", "[5, 4]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point", "[4, 4]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=3, j=2), Cell(i=4, j=3): Cell(i=4, j=4), Cell(i=5, j=2): Cell(i=5, j=3)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=5) in its column. | Separating the bottommost point from cell Cell(i=0, j=1). | Isolating the point at Cell(i=2, j=6) in its column. | The reverse of: Isolating the point at Cell(i=4, j=4) in its row. | Isolating the point at Cell(i=4, j=4) in its column. | The reverse of: Isolating the point at Cell(i=4, j=4) in its column. | "}], "formal_step": "Isolated the point at Cell(i=3, j=1) in its row", "identifier": 4190, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1))).", "identifier": 3444, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point", "[4, 5]": "Av(Perm((0, 1)))", "[5, 4]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=5) in its column. | The reverse of: Isolating the point at Cell(i=2, j=3) in its row. | Isolating the point at Cell(i=2, j=3) in its column. | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4191, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 2]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 0]": "point", "[4, 4]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 6]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 6]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 3]": "point", "[4, 0]": "point", "[4, 6]": "Av(Perm((0, 1)))", "[5, 5]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=0, j=5): Cell(i=0, j=6), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=5): Cell(i=2, j=6), Cell(i=3, j=2): Cell(i=3, j=3), Cell(i=4, j=5): Cell(i=4, j=6), Cell(i=5, j=4): Cell(i=5, j=5)}, {Cell(i=0, j=0): Cell(i=4, j=0)}]", "relation": "| Isolating the point at Cell(i=4, j=4) in its row. | Isolating the point at Cell(i=4, j=6) in its column. | The reverse of: Isolating the point at Cell(i=4, j=6) in its column. | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 3351, "in_tiling": {"[0, 1]": "point", "[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 0]": "point", "[4, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[5, 3]": "point"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=4) in its column. | "}, {"children": [], "formal_step": "recurse", "identifier": 151, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4188, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 4]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 4]": "point", "[5, 3]": "Av(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=0, j=4): Cell(i=0, j=5), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=4): Cell(i=2, j=5), Cell(i=3, j=3): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=3, j=1), Cell(i=1, j=1): Cell(i=5, j=3)}]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=2). | Isolating the point at Cell(i=4, j=5) in its column. | The reverse of: Isolating the point at Cell(i=7, j=3) in its row. | The reverse of: Separting the rightmost point from cell Cell(i=6, j=3). | The reverse of: Isolating the point at Cell(i=4, j=3) in its column. | Separting the leftmost point from cell Cell(i=4, j=3). | Isolating the point at Cell(i=5, j=3) in its row. | "}], "formal_step": "Isolated the point at Cell(i=5, j=2) in its row", "identifier": 4192, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=4, j=2). | "}], "formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 2889, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[2, 0]": "point", "[3, 1]": "point", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=3, j=2) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=2). | Isolating the point at Cell(i=2, j=2) in its column. | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 4193, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 3951, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Separting the rightmost point from cell Cell(i=0, j=1). | Separting the rightmost point from cell Cell(i=2, j=1). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4194, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[2, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "point", "[3, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=2), Cell(i=2, j=0): Cell(i=2, j=1), Cell(i=3, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=0)}]", "relation": "| Separting the rightmost point from cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 0, 2))).", "identifier": 4195, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[1, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[2, 0]": "point", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=3, j=4) in its column. | The reverse of: Isolating the point at Cell(i=5, j=2) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=2). | The reverse of: Isolating the point at Cell(i=2, j=2) in its column. | "}], "formal_step": "Isolated the point at Cell(i=1, j=0) in its column", "identifier": 4196, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[1, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[1, 1]": "point", "[1, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=1, j=0). | The reverse of: Separating the topmost point from cell Cell(i=1, j=1). | Separating the bottommost point from cell Cell(i=1, j=1). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3))).", "identifier": 314, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[1, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=3) in its column. | The reverse of: Separating the bottommost point from cell Cell(i=1, j=0). | Separating the topmost point from cell Cell(i=1, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4180, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[2, 0]": "point", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=2), Cell(i=1, j=3): Cell(i=1, j=4), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=1): Cell(i=3, j=2), Cell(i=3, j=3): Cell(i=3, j=4)}, {Cell(i=0, j=0): Cell(i=4, j=1)}]", "relation": "| The reverse of: Isolating the point at Cell(i=3, j=2) in its row. | The reverse of: Separting the rightmost point from cell Cell(i=0, j=2). | Separting the leftmost point from cell Cell(i=0, j=2). | Isolating the point at Cell(i=3, j=2) in its row. | "}, {"children": [], "formal_step": "recurse", "identifier": 2890, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 4]": "point", "[2, 0]": "point", "[3, 1]": "point", "[3, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=3, j=3) in its row. | The reverse of: Separting the rightmost point from cell Cell(i=0, j=3). | Isolating the point at Cell(i=2, j=3) in its column. | "}], "formal_step": "We perform cell insertion into cell (3, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 4197, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 5]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 4]": "point", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=0, j=3). | Isolating the point at Cell(i=3, j=3) in its row. | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 3351, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 3]": "point"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "recurse", "identifier": 4190, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=3) in its column. | "}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 3742, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Isolated the point at Cell(i=3, j=1) in its row", "identifier": 3951, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3))).", "identifier": 305, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=3, j=1) in its row. | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4198, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=0, j=3): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=1): Cell(i=2, j=1), Cell(i=2, j=3): Cell(i=2, j=3), Cell(i=3, j=2): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=4, j=1)}]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=0, j=5) in its column. | The reverse of: Isolating the point at Cell(i=2, j=3) in its row. | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1))).", "identifier": 1021, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 2]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=1, j=2) in its row. | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 4199, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 305, "in_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=0, j=3) in its column. | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 4200, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=2): Cell(i=2, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=1). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 260, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 263, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 3]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": "| Isolating the point at Cell(i=4, j=2) in its row. | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 133, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 2093, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[3, 2]": "point", "[4, 3]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=3, j=2), Cell(i=4, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=2) in its row. | Separating the topmost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=2, j=3) in its column. | "}], "formal_step": "Isolated the point at Cell(i=1, j=0) in its row", "identifier": 4201, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1))).", "identifier": 196, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Isolated the point at Cell(i=2, j=0) in its row", "identifier": 613, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 0]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=1, j=0). | The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | Separting the rightmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3))).", "identifier": 34, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3))).", "identifier": 4202, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)))"}, "recurse": "[]", "relation": ""}}
