0321_1302

===========================================
Log created Mon, 22 May 2017 02:36:32

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 179 inferral cache hits and 1183 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1636 tilings in it right now.
There were 908 tilings of which 69 are verified.
There were 454 SiblingNodes of which 29 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1268* times, (634 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:37:02

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 240 inferral cache hits and 23282 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1795 tilings in it right now.
There were 982 tilings of which 82 are verified.
There were 474 SiblingNodes of which 46 are verified.

The function splittings called the partitioning cache *23373* times, (295 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:37:33

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 271 inferral cache hits and 1369 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1383 tilings in it right now.
There were 932 tilings of which 53 are verified.
There were 294 SiblingNodes of which 21 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1470* times, (735 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:38:03

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 468 inferral cache hits and 14462 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 1885 tilings in it right now.
There were 1231 tilings of which 87 are verified.
There were 351 SiblingNodes of which 37 are verified.

The function splittings called the partitioning cache *14599* times, (390 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:38:33

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5038 inferral cache hits and 1344 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1678 tilings in it right now.
There were 1001 tilings of which 78 are verified.
There were 294 SiblingNodes of which 33 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1444* times, (722 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:39:03

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6122 inferral cache hits and 16058 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 1863 tilings in it right now.
There were 1165 tilings of which 62 are verified.
There were 365 SiblingNodes of which 27 are verified.

The function splittings called the partitioning cache *16190* times, (384 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:39:48

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 45 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 28 inferral cache hits and 704 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 243 tilings in it right now.
There were 159 tilings of which 87 are verified.
There were 99 SiblingNodes of which 29 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *750* times, (375 originating)
There were 0 cache misses

No proof tree was found after 45 seconds

===========================================
Log created Mon, 22 May 2017 02:40:19

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 53 inferral cache hits and 15504 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 644 tilings in it right now.
There were 494 tilings of which 209 are verified.
There were 332 SiblingNodes of which 73 are verified.

The function splittings called the partitioning cache *15591* times, (364 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:40:49

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 192 inferral cache hits and 1204 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 310 tilings in it right now.
There were 289 tilings of which 47 are verified.
There were 65 SiblingNodes of which 17 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1290* times, (645 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:41:19

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 440 inferral cache hits and 3678 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 800 tilings in it right now.
There were 677 tilings of which 217 are verified.
There were 113 SiblingNodes of which 29 are verified.

The function splittings called the partitioning cache *3811* times, (352 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:41:52

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 32 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 7 inferral cache hits and 357 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 86 tilings in it right now.
There were 61 tilings of which 21 are verified.
There were 51 SiblingNodes of which 12 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *380* times, (190 originating)
There were 0 cache misses

No proof tree was found after 32 seconds

===========================================
Log created Mon, 22 May 2017 02:42:24

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 24 inferral cache hits and 5471 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 215 tilings in it right now.
There were 156 tilings of which 65 are verified.
There were 117 SiblingNodes of which 27 are verified.

The function splittings called the partitioning cache *5521* times, (237 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Mon, 22 May 2017 02:42:58

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 34 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 110 inferral cache hits and 855 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 179 tilings in it right now.
There were 167 tilings of which 22 are verified.
There were 40 SiblingNodes of which 12 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *916* times, (458 originating)
There were 0 cache misses

No proof tree was found after 34 seconds

===========================================
Log created Mon, 22 May 2017 02:43:29

Maximum depth fully searched was 6

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 386 inferral cache hits and 4967 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 617 tilings in it right now.
There were 541 tilings of which 117 are verified.
There were 107 SiblingNodes of which 28 are verified.

The function splittings called the partitioning cache *5126* times, (423 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 02:43:46

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 17 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 25 inferral cache hits and 533 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 164 tilings in it right now.
There were 130 tilings of which 82 are verified.
There were 78 SiblingNodes of which 32 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *570* times, (294 originating)
There were 1 cache misses

A proof tree was found in 17 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     │     ├─────10
                        │     │     │     └─────11
                        │     │     └─────12
                        │     └─────13
                        │           ├─────14
                        │           ├─────15
                        │           └─────16
                        └─────17
                              ├─────18
                              ├─────19
                              └─────20

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point

Label: 6

+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point

Label: 7

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 8

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 9

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 10

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 11

+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
4: Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)))

Label: 14

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 15

+-+
|1|
+-+
1: point

Label: 16

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 17

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 18

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 19

+-+
|1|
+-+
1: point

Label: 20

+-+
|1|
+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 10, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 11, "in_tiling": {"[0, 1]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 12, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13, "in_tiling": {"[0, 1]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 14, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1)]", "identifier": 15, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 8, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "The components of the tiling", "identifier": 16, "in_tiling": {"[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 1]": "point", "[3, 3]": "point"}, "out_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 6]": "Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[2, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[3, 1]": "point", "[4, 3]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=2, j=0), Cell(i=0, j=2): Cell(i=2, j=2), Cell(i=1, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=4, j=3)}, {Cell(i=0, j=1): Cell(i=0, j=5), Cell(i=1, j=0): Cell(i=1, j=4), Cell(i=1, j=2): Cell(i=1, j=6)}]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=4). | "}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 17, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 18, "in_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=0, j=2): Cell(i=1, j=2), Cell(i=1, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=3)}, {Cell(i=0, j=0): Cell(i=0, j=4)}]", "relation": ""}], "formal_step": "Placing the rightmost point into column 0", "identifier": 14, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 0, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 8, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}}
