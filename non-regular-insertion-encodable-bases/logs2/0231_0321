0231_0321

===========================================
Log created Sun, 04 Jun 2017 06:52:23

Maximum depth fully searched was 5

Maximum time set at 1800 seconds

Total time taken was 1801 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 11286 inferral cache hits and 40922 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 39157 tilings in it right now.
There were 25075 tilings of which 1724 are verified.
There were 14206 SiblingNodes of which 646 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *43478* times, (21829 originating)
There were 11 cache misses

No proof tree was found after 1801 seconds

===========================================
Log created Sun, 04 Jun 2017 07:28:16

Maximum depth fully searched was 5

Maximum time set at 1800 seconds

Total time taken was 2153 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 7130 inferral cache hits and 3236794 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 25321 tilings in it right now.
There were 16862 tilings of which 945 are verified.
There were 9624 SiblingNodes of which 389 are verified.

The function splittings called the partitioning cache *3238483* times, (7532 originating)
There were 0 cache misses

No proof tree was found after 2153 seconds

===========================================
Log created Sun, 04 Jun 2017 07:44:27

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 970 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 2660 inferral cache hits and 11634 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 42039 tilings in it right now.
There were 17288 tilings of which 334 are verified.
There were 4680 SiblingNodes of which 124 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *12410* times, (6214 originating)
There were 1 cache misses

A proof tree was found in 970 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        │     ├─────10
                        │     │     ├─────11
                        │     │     │     ├─────12
                        │     │     │     └─────13
                        │     │     │           ├─────14
                        │     │     │           │     ├─────15
                        │     │     │           │     │     ├─────16
                        │     │     │           │     │     │     ├─────17
                        │     │     │           │     │     │     └─────18
                        │     │     │           │     │     └─────19
                        │     │     │           │     └─────20
                        │     │     │           └─────21
                        │     │     │                 ├─────22
                        │     │     │                 └─────23
                        │     │     └─────24
                        │     └─────25
                        └─────26

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| |3| |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 5

+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 6

+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point

Label: 7

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Label: 8

+-+-+-+-+
| |3| |4|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av+(Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |4| |
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| |3| | | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| | |1| |1| | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av(Perm((1, 0)))

Label: 9

+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |1| |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|1| |1| | |1| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | |1| |1| |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 0)))

Label: 10

+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|1| |1| | |1| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | |1| |1| |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
|1| |1| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | |1| |1| |1|
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point

Label: 11

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| |1| |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point

Label: 12

+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point

Label: 13

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|1| |2| |2|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|1| |1| |1| |1|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 0)))

Label: 14

+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| |1| |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av(Perm((1, 0)))

Label: 15

+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| |1| |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 0)))

Label: 16

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| |1| |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point

Label: 17

+-+-+-+-+
| | | |2|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point

Label: 18

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|1| |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|1| |1| | |1| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | |1| |1| |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point

Label: 19

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| |1| |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|1| |2| |2|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
3: point

Label: 20

+-+
|1|
+-+
1: point

Label: 21

+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
|1| |1| |1| |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
3: point
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+
| | | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
|1| |1| |1| | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |1| |1| |1|
+-+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 0)))

Label: 22

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| |1| |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point

Label: 23

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| |1| |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av(Perm((1, 0)))

Label: 24

+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))

Label: 25

+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| |1| |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: point
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
|1| |1| |1| |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))
3: point
4: Av(Perm((1, 0)))

Label: 26

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 0)))
2: Av(Perm((1, 2, 0)), Perm((2, 1, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 363, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 364, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 365, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[2, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=1, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 138, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=3, j=4)]", "identifier": 366, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[2, 1]": "point", "[3, 4]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[2, 1]": "point", "[3, 4]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=2): Cell(i=1, j=2), Cell(i=2, j=1): Cell(i=2, j=1)}, {Cell(i=0, j=0): Cell(i=3, j=4)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 365, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[2, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=1, j=0). | Inserting the right most point in to the cell Cell(i=1, j=0). | "}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 367, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 368, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[5, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[6, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=4, j=0). | "}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1))).", "identifier": 369, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 76, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=2). | The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 52, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=4, j=4)]", "identifier": 87, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 2]": "Av(Perm((1, 0)))", "[5, 3]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 5]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 3]": "Av(Perm((1, 0)))", "[4, 4]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=2): Cell(i=1, j=2), Cell(i=2, j=4): Cell(i=2, j=5), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=3, j=3): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=4, j=4)}]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | Inserting the left most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 52, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 3]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "The components of the tiling", "identifier": 370, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 2]": "Av(Perm((1, 0)))", "[5, 3]": "point", "[6, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 6]": "point", "[4, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 4]": "Av(Perm((1, 0)))", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[6, 5]": "point", "[7, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[8, 1]": "point", "[9, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=5, j=0), Cell(i=1, j=2): Cell(i=6, j=5), Cell(i=2, j=0): Cell(i=7, j=0), Cell(i=3, j=1): Cell(i=8, j=1), Cell(i=4, j=0): Cell(i=9, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=2), Cell(i=3, j=3): Cell(i=3, j=6), Cell(i=4, j=0): Cell(i=4, j=2), Cell(i=4, j=2): Cell(i=4, j=4)}]", "relation": "| Inserting the top most point in to the cell Cell(i=6, j=0). | "}], "formal_step": "We perform cell insertion into cell (6, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1))).", "identifier": 76, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 2]": "Av(Perm((1, 0)))", "[5, 3]": "point", "[6, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1))).", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 18, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "The components of the tiling", "identifier": 368, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[5, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[6, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[6, 1]": "point", "[7, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=3, j=0), Cell(i=1, j=2): Cell(i=4, j=4), Cell(i=2, j=0): Cell(i=5, j=0), Cell(i=3, j=1): Cell(i=6, j=1), Cell(i=4, j=0): Cell(i=7, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=2)}]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=4, j=0). | Inserting the top most point in to the cell Cell(i=4, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 370, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 5]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 2]": "Av(Perm((1, 0)))", "[5, 3]": "point", "[6, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=4). | The reverse of: Inserting the right most point in to the cell Cell(i=6, j=0). | "}], "formal_step": "We perform cell insertion into cell (5, 4); either it is empty or Av+(Perm((1, 0))).", "identifier": 30, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 4]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 6]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 5]": "Av(Perm((1, 0)))", "[5, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 5]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[5, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[5, 4]": "Av(Perm((1, 0)))", "[6, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=2). | Inserting the top most point in to the cell Cell(i=0, j=2). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 230, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=6, j=6), Cell(i=7, j=8)]", "identifier": 371, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 4]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 1]": "point", "[3, 4]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 4]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[3, 7]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[4, 5]": "Av(Perm((1, 0)))", "[5, 1]": "point", "[6, 6]": "Av(Perm((1, 0)))", "[7, 8]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=3), Cell(i=1, j=2): Cell(i=1, j=2), Cell(i=1, j=4): Cell(i=1, j=4), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=6): Cell(i=3, j=7), Cell(i=4, j=0): Cell(i=4, j=0), Cell(i=4, j=2): Cell(i=4, j=2), Cell(i=4, j=5): Cell(i=4, j=5), Cell(i=5, j=1): Cell(i=5, j=1)}, {Cell(i=0, j=0): Cell(i=6, j=6), Cell(i=1, j=1): Cell(i=7, j=8)}]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=4). | "}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((1, 2, 0)), Perm((2, 1, 0))).", "identifier": 372, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 4]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))", "[2, 1]": "point", "[3, 4]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=1). | The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | Inserting the right most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1))).", "identifier": 18, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1))).", "identifier": 6, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": ""}}
