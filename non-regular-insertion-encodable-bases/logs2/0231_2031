0231_2031

===========================================
Log created Fri, 26 May 2017 15:27:30

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1810 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6375 inferral cache hits and 22876 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 32209 tilings in it right now.
There were 18048 tilings of which 607 are verified.
There were 8645 SiblingNodes of which 187 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *24320* times, (12168 originating)
There were 1 cache misses

No proof tree was found after 1810 seconds

===========================================
Log created Fri, 26 May 2017 15:57:31

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 3545 inferral cache hits and 1633027 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 17689 tilings in it right now.
There were 11163 tilings of which 719 are verified.
There were 5690 SiblingNodes of which 361 are verified.

The function splittings called the partitioning cache *1633841* times, (3483 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Fri, 26 May 2017 16:27:31

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 11744 inferral cache hits and 26530 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 31463 tilings in it right now.
There were 22180 tilings of which 1283 are verified.
There were 6459 SiblingNodes of which 205 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *28206* times, (14119 originating)
There were 2 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Fri, 26 May 2017 16:57:32

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 1800 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 14901 inferral cache hits and 2695160 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 38766 tilings in it right now.
There were 26763 tilings of which 1556 are verified.
There were 7559 SiblingNodes of which 312 are verified.

The function splittings called the partitioning cache *2697124* times, (8194 originating)
There were 0 cache misses

No proof tree was found after 1800 seconds

===========================================
Log created Fri, 26 May 2017 17:01:30

Maximum depth fully searched was 4

Maximum time set at 1800 seconds

Total time taken was 238 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 37748 inferral cache hits and 8110 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 10309 tilings in it right now.
There were 6486 tilings of which 506 are verified.
There were 1761 SiblingNodes of which 144 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *8672* times, (4336 originating)
There were 0 cache misses

A proof tree was found in 238 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     └─────9
                  │           ├─────10
                  │           │     ├─────11
                  │           │     └─────12
                  │           ├─────13
                  │           └─────14
                  └─────15
                        ├─────16
                        └─────17

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+
|2|
+-+
|1|
+-+
1: point
2: Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
|1|
+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))

Label: 5

+-+-+-+
|2| |3|
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 2, 0)))

Label: 6

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
3: Av(Perm((1, 2, 0)))

Label: 7

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))

Label: 8

+-+
|1|
+-+
1: point

Label: 9

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
3: Av+(Perm((0, 1)))
4: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|3| | | | | |2|
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 2, 0)))
3: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))

Label: 10

+-+-+-+-+-+
|3| | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 2, 0)))
3: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))

Label: 11

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
3: Av(Perm((1, 2, 0)))

Label: 12

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)))

Label: 13

+-+
|1|
+-+
1: point

Label: 14

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)))

Label: 15

+-+-+-+
|2| |3|
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
3: Av(Perm((1, 2, 0)))

Label: 16

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))

Label: 17

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 405, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 406, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 9, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=1) in its column. | The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 406, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0)]", "identifier": 159, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 159, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=1)]", "identifier": 387, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((1, 2, 0)))", "[4, 3]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((1, 2, 0)))", "[4, 3]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=1): Cell(i=2, j=2), Cell(i=3, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 406, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=3), Cell(i=5, j=2)]", "identifier": 407, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 4]": "point", "[3, 1]": "Av(Perm((1, 2, 0)))", "[4, 3]": "point", "[5, 2]": "Av(Perm((1, 2, 0)))", "[6, 5]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=5), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=3, j=1), Cell(i=4, j=3): Cell(i=6, j=5)}, {Cell(i=0, j=0): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=5, j=2)}]", "relation": "| Separting the leftmost point from cell Cell(i=2, j=2). | Isolating the point at Cell(i=5, j=2) in its row. | The reverse of: Isolating the point at Cell(i=4, j=4) in its column. | The reverse of: Separating the bottommost point from cell Cell(i=3, j=1). | Separating the topmost point from cell Cell(i=3, j=1). | Isolating the point at Cell(i=4, j=4) in its column. | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 376, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[2, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=2) in its column. | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 9, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=1) in its column. | The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 406, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0)]", "identifier": 408, "in_tiling": {"[0, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[2, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=1): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": "| Isolating the point at Cell(i=2, j=2) in its column. | The reverse of: Isolating the point at Cell(i=2, j=2) in its column. | "}], "formal_step": "Isolated the point at Cell(i=0, j=0) in its column", "identifier": 329, "in_tiling": {"[0, 0]": "point", "[0, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "point", "[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1))).", "identifier": 9, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1))).", "identifier": 8, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}}
