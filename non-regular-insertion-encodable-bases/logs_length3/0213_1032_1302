0213_1032_1302
Log created  Tue, 16 May 2017 16:56:36
Finding the proof tree took 355 seconds
The depth searched was 5

Strategies applied: standard_strategies_w_all_rows_cols-prop_fixed
Maximum depth set at 5

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     ├─────9
                        │     └─────10
                        └─────11
                              ├─────12
                              ├─────13
                              ├─────14
                              ├─────15
                              └─────16

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| |1| | | |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
3: point
4: Av(Perm((1, 0, 2)))

Label: 5

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((1, 0, 2)))
4: Av(Perm((0, 2, 1)))

Label: 6

+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|5| | | | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| |1| | | |2|
+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
3: point
4: Av(Perm((1, 0, 2)))
5: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |5| | |
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| | |4| | | |5| |
+-+-+-+-+-+-+-+-+
| |3| | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | |2|
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
3: point
4: Av(Perm((1, 0)))
5: Av(Perm((1, 0, 2)))

Label: 7

+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | |4| | |5| |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
3: point
4: Av(Perm((1, 0)))
5: Av(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
3: point
4: Av(Perm((0, 2, 1)))

Label: 8

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
3: point

Label: 9

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Label: 10

+-+
|1|
+-+
1: point

Label: 11

+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
|6| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |5| | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | |3| | | |4| |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)))
5: Av+(Perm((1, 0, 2)))
6: Av(Perm((0, 2, 1)))

Label: 12

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)))

Label: 13

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Label: 14

+-+
|1|
+-+
1: point

Label: 15

+-+
|1|
+-+
1: Av+(Perm((1, 0, 2)))

Label: 16

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1702, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1703, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1704, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "Av(Perm((1, 0, 2)))", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "Av(Perm((1, 0, 2)))", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 459, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 6, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 3, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=2), Cell(i=2, j=1)]", "identifier": 1705, "in_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 5]": "point", "[5, 2]": "Av(Perm((1, 0, 2)))", "[6, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[2, 1]": "point", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=1, j=1): Cell(i=3, j=3), Cell(i=2, j=0): Cell(i=4, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=1, j=0). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1706, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0, 2)))", "[3, 1]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=1, j=1). | Inserting the left most point in to the cell Cell(i=1, j=1). | "}, {"children": [], "formal_step": "recurse", "identifier": 6, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 3, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 79, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 187, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=5), Cell(i=4, j=6), Cell(i=5, j=4), Cell(i=7, j=0)]", "identifier": 1707, "in_tiling": {"[0, 5]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 6]": "point", "[5, 4]": "Av+(Perm((1, 0, 2)))", "[6, 2]": "Av(Perm((1, 0, 2)))", "[7, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 6]": "point", "[5, 4]": "Av+(Perm((1, 0, 2)))", "[6, 2]": "Av(Perm((1, 0, 2)))", "[7, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=1, j=1), Cell(i=1, j=1): Cell(i=2, j=2), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=1): Cell(i=6, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=5)}, {Cell(i=0, j=0): Cell(i=4, j=6)}, {Cell(i=0, j=0): Cell(i=5, j=4)}, {Cell(i=0, j=0): Cell(i=7, j=0)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (5, 4); either it is empty or Av+(Perm((1, 0, 2))).", "identifier": 1708, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "Av(Perm((1, 0, 2)))", "[5, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 6]": "point", "[5, 4]": "Av(Perm((1, 0, 2)))", "[6, 2]": "Av(Perm((1, 0, 2)))", "[7, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 459, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "Av(Perm((1, 0, 2)))", "[5, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 32, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2))).", "identifier": 187, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}}
