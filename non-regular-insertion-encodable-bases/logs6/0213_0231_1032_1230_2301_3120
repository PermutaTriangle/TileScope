0213_0231_1032_1230_2301_3120

===========================================
Log created Mon, 22 May 2017 22:37:23

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 662 inferral cache hits and 1839 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2597 tilings in it right now.
There were 1279 tilings of which 236 are verified.
There were 485 SiblingNodes of which 58 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1970* times, (985 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 22:37:53

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 778 inferral cache hits and 31578 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 3112 tilings in it right now.
There were 1508 tilings of which 304 are verified.
There were 582 SiblingNodes of which 76 are verified.

The function splittings called the partitioning cache *31740* times, (514 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 22:38:24

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 310 inferral cache hits and 1343 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 1558 tilings in it right now.
There were 875 tilings of which 83 are verified.
There were 249 SiblingNodes of which 29 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1442* times, (721 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 22:38:54

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 820 inferral cache hits and 21879 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 3534 tilings in it right now.
There were 1792 tilings of which 257 are verified.
There were 436 SiblingNodes of which 49 are verified.

The function splittings called the partitioning cache *22077* times, (517 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 22:39:24

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4007 inferral cache hits and 1223 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 1576 tilings in it right now.
There were 814 tilings of which 77 are verified.
There were 228 SiblingNodes of which 25 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1314* times, (657 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 22:39:54

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 8472 inferral cache hits and 16184 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 3248 tilings in it right now.
There were 1508 tilings of which 209 are verified.
There were 372 SiblingNodes of which 48 are verified.

The function splittings called the partitioning cache *16343* times, (437 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 22:40:06

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 11 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 113 inferral cache hits and 994 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 700 tilings in it right now.
There were 416 tilings of which 277 are verified.
There were 204 SiblingNodes of which 93 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1058* times, (529 originating)
There were 0 cache misses

A proof tree was found in 11 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        └─────10
                              ├─────11
                              │     ├─────12
                              │     └─────13
                              └─────14
                                    ├─────15
                                    │     ├─────16
                                    │     └─────17
                                    └─────18
                                          ├─────19
                                          │     ├─────20
                                          │     │     ├─────21
                                          │     │     └─────22
                                          │     └─────23
                                          ├─────24
                                          │     ├─────25
                                          │     │     ├─────26
                                          │     │     └─────27
                                          │     └─────28
                                          └─────29

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
2: Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point

Label: 7

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 8

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 9

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
| | | |4| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 10

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 11

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 12

+-+-+-+
| |1| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 13

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 14

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 15

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 16

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 17

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 18

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 19

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |2| |3|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 20

+-+-+-+-+
| |2| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 21

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 22

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 23

+-+
|1|
+-+
1: point

Label: 24

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|1| |2| | |3|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 25

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 26

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))

Label: 27

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 28

+-+
|1|
+-+
1: point

Label: 29

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|1| |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 50, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 51, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 52, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 53, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 5]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 5]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 54, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 7]": "point", "[3, 6]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0)))", "[6, 5]": "point", "[7, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=5, j=3). | "}], "formal_step": "We perform cell insertion into cell (6, 3); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 55, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 4]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 6]": "point", "[4, 4]": "Av(Perm((0, 1)))", "[5, 2]": "point", "[6, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=2). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 56, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 57, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 0)))", "[4, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=2). | "}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 58, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 59, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "Av+(Perm((0, 1)))", "[4, 0]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 5]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 0]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 60, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 0]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 1", "identifier": 61, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 62, "in_tiling": {"[0, 1]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 5]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "Av(Perm((1, 0)))", "[5, 4]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=3). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 63, "in_tiling": {"[0, 1]": "point", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 5]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=4). | "}], "formal_step": "Placing the minimum point into row 2", "identifier": 64, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av+(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av+(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=3)]", "identifier": 65, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=2): Cell(i=2, j=2), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=3)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 57, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 66, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 49, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=0)]", "identifier": 67, "in_tiling": {"[0, 2]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=1): Cell(i=2, j=2), Cell(i=3, j=0): Cell(i=3, j=1), Cell(i=4, j=1): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=4, j=0)}]", "relation": ""}, {"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 68, "in_tiling": {"[0, 2]": "point", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 66, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((1, 0))).", "identifier": 69, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 70, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 0", "identifier": 71, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2))).", "identifier": 72, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 73, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 74, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
