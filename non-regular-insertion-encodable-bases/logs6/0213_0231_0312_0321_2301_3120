0213_0231_0312_0321_2301_3120

===========================================
Log created Mon, 22 May 2017 20:22:47

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 349 inferral cache hits and 1889 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2740 tilings in it right now.
There were 1262 tilings of which 182 are verified.
There were 518 SiblingNodes of which 58 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2024* times, (1012 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 20:23:17

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 455 inferral cache hits and 31081 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 3233 tilings in it right now.
There were 1473 tilings of which 349 are verified.
There were 551 SiblingNodes of which 91 are verified.

The function splittings called the partitioning cache *31226* times, (465 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 20:23:48

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 300 inferral cache hits and 1288 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1780 tilings in it right now.
There were 1024 tilings of which 114 are verified.
There were 250 SiblingNodes of which 28 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1384* times, (692 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 20:24:19

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 520 inferral cache hits and 16547 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 2722 tilings in it right now.
There were 1562 tilings of which 258 are verified.
There were 370 SiblingNodes of which 52 are verified.

The function splittings called the partitioning cache *16704* times, (433 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 20:24:49

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5239 inferral cache hits and 1266 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1965 tilings in it right now.
There were 1025 tilings of which 155 are verified.
There were 259 SiblingNodes of which 21 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1360* times, (680 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 20:25:19

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 8115 inferral cache hits and 18985 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2924 tilings in it right now.
There were 1500 tilings of which 296 are verified.
There were 396 SiblingNodes of which 58 are verified.

The function splittings called the partitioning cache *19124* times, (369 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 20:25:31

Maximum depth fully searched was 6

Maximum time set at 30 seconds

Total time taken was 11 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 60 inferral cache hits and 962 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 652 tilings in it right now.
There were 377 tilings of which 221 are verified.
There were 225 SiblingNodes of which 87 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1024* times, (512 originating)
There were 0 cache misses

A proof tree was found in 11 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        └─────14
                              ├─────15
                              │     ├─────16
                              │     └─────17
                              └─────18

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 7

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: point

Label: 8

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 9

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: point

Label: 10

+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: Av+(Perm((0, 1)))
3: point
4: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 11

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: point

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |2| |3| | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 14

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|1| |2| |2|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 1)))
3: point

Label: 15

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
4: point

Label: 16

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: point

Label: 17

+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 18

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 73, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 74, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 75, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 76, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 4]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 72, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=1)]", "identifier": 77, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 4]": "point", "[5, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 4]": "point", "[5, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=3): Cell(i=4, j=4), Cell(i=4, j=0): Cell(i=5, j=0)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 78, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 4]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "Placing the maximum point into row 0", "identifier": 79, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0))).", "identifier": 72, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 80, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[3, 4]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 2]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 81, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 4]": "point", "[5, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=1). | Inserting the top most point in to the cell Cell(i=3, j=0). | "}], "formal_step": "We perform cell insertion into cell (5, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 82, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[3, 5]": "point", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 83, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 0]": "point", "[6, 5]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=0). | Inserting the top most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 84, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 85, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 86, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 87, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 88, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((0, 3, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
