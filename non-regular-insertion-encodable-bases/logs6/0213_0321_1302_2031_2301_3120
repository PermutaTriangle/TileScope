0213_0321_1302_2031_2301_3120

===========================================
Log created Mon, 22 May 2017 23:56:07

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 499 inferral cache hits and 1445 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2497 tilings in it right now.
There were 1191 tilings of which 277 are verified.
There were 411 SiblingNodes of which 65 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1548* times, (774 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 23:56:38

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 598 inferral cache hits and 21758 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2610 tilings in it right now.
There were 1259 tilings of which 286 are verified.
There were 422 SiblingNodes of which 72 are verified.

The function splittings called the partitioning cache *21865* times, (360 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 23:57:08

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 532 inferral cache hits and 1386 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2435 tilings in it right now.
There were 1251 tilings of which 283 are verified.
There were 251 SiblingNodes of which 25 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1488* times, (744 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 23:57:38

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 601 inferral cache hits and 13695 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2725 tilings in it right now.
There were 1426 tilings of which 198 are verified.
There were 340 SiblingNodes of which 54 are verified.

The function splittings called the partitioning cache *13822* times, (334 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 23:58:08

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5769 inferral cache hits and 1204 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2182 tilings in it right now.
There were 1090 tilings of which 89 are verified.
There were 242 SiblingNodes of which 29 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1294* times, (647 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 23:58:40

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6995 inferral cache hits and 11548 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 2761 tilings in it right now.
There were 1344 tilings of which 170 are verified.
There were 327 SiblingNodes of which 55 are verified.

The function splittings called the partitioning cache *11674* times, (332 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Mon, 22 May 2017 23:59:00

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 20 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 61 inferral cache hits and 852 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 695 tilings in it right now.
There were 387 tilings of which 269 are verified.
There were 185 SiblingNodes of which 81 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *906* times, (453 originating)
There were 0 cache misses

A proof tree was found in 20 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     │     ├─────12
                        │           │     │     └─────13
                        │           │     └─────14
                        │           │           ├─────15
                        │           │           └─────16
                        │           └─────17
                        └─────18
                              ├─────19
                              └─────20

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 7

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
4: point

Label: 8

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 9

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
4: point

Label: 10

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
|1| | |2|
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av+(Perm((0, 1)))
3: point

Label: 11

+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
|1| |2| | |3|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
4: point

Label: 12

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
4: point

Label: 13

+-+
|1|
+-+
1: point

Label: 14

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
3: point

Label: 15

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: point

Label: 16

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 17

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 18

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
3: Av(Perm((1, 0)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
|3| |4| | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 19

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|2| |3| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((1, 0)))
3: point

Label: 20

+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 44, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 45, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 46, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 47, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=0). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 43, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=2)]", "identifier": 48, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 3]": "point", "[5, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 3]": "point", "[5, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=2): Cell(i=4, j=3), Cell(i=4, j=0): Cell(i=5, j=0)}, {Cell(i=0, j=0): Cell(i=3, j=2)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 49, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 50, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 5]": "point", "[3, 3]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=0). | "}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 51, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 3]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 3]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 52, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 53, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 5]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=0). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 54, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 43, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 55, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 4]": "point", "[4, 2]": "Av(Perm((1, 0)))", "[5, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 56, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((1, 0)))", "[3, 5]": "point", "[4, 4]": "point", "[5, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 5]": "point", "[5, 1]": "point", "[6, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=1). | Inserting the top most point in to the cell Cell(i=0, j=1). | Inserting the top most point in to the cell Cell(i=5, j=0). | "}], "formal_step": "We perform cell insertion into cell (6, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 57, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 5]": "point", "[4, 3]": "Av(Perm((1, 0)))", "[5, 4]": "point", "[6, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=1). | "}], "formal_step": "Placing the maximum point into row 0", "identifier": 58, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 59, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 60, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 61, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
