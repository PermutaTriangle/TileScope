0132_0213_0231_1302_2013_3012

===========================================
Log created Mon, 22 May 2017 13:35:50

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 382 inferral cache hits and 1413 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2136 tilings in it right now.
There were 1058 tilings of which 184 are verified.
There were 414 SiblingNodes of which 48 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1514* times, (757 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 13:36:20

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 410 inferral cache hits and 21277 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2326 tilings in it right now.
There were 1146 tilings of which 133 are verified.
There were 482 SiblingNodes of which 59 are verified.

The function splittings called the partitioning cache *21381* times, (342 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 13:36:50

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 339 inferral cache hits and 1261 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1709 tilings in it right now.
There were 941 tilings of which 138 are verified.
There were 225 SiblingNodes of which 38 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1356* times, (685 originating)
There were 1 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 13:37:20

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 413 inferral cache hits and 10692 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2058 tilings in it right now.
There were 1176 tilings of which 113 are verified.
There were 324 SiblingNodes of which 39 are verified.

The function splittings called the partitioning cache *10809* times, (301 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 13:37:50

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5465 inferral cache hits and 1260 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2022 tilings in it right now.
There were 1044 tilings of which 145 are verified.
There were 282 SiblingNodes of which 38 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1354* times, (677 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 13:38:20

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 7260 inferral cache hits and 10272 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2784 tilings in it right now.
There were 1343 tilings of which 156 are verified.
There were 340 SiblingNodes of which 40 are verified.

The function splittings called the partitioning cache *10404* times, (349 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 13:38:50

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 59 inferral cache hits and 948 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 615 tilings in it right now.
There were 385 tilings of which 208 are verified.
There were 213 SiblingNodes of which 60 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1008* times, (504 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 13:39:34

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 43 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 69 inferral cache hits and 33783 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 576 tilings in it right now.
There were 450 tilings of which 258 are verified.
There were 266 SiblingNodes of which 110 are verified.

The function splittings called the partitioning cache *33836* times, (210 originating)
There were 0 cache misses

No proof tree was found after 43 seconds

===========================================
Log created Mon, 22 May 2017 13:40:04

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 122 inferral cache hits and 863 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 265 tilings in it right now.
There were 225 tilings of which 38 are verified.
There were 51 SiblingNodes of which 14 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *926* times, (463 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 13:40:34

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 229 inferral cache hits and 2137 partitioning cache hits.
The partitioning cache had 14 tilings in it right now.
The inferral cache has 446 tilings in it right now.
There were 368 tilings of which 56 are verified.
There were 80 SiblingNodes of which 20 are verified.

The function splittings called the partitioning cache *2247* times, (243 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 13:40:45

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 11 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 22 inferral cache hits and 501 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 193 tilings in it right now.
There were 136 tilings of which 104 are verified.
There were 85 SiblingNodes of which 56 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *532* times, (266 originating)
There were 0 cache misses

A proof tree was found in 11 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     └─────11
                        │           ├─────12
                        │           │     ├─────13
                        │           │     └─────14
                        │           └─────15
                        └─────16
                              ├─────17
                              └─────18
                                    ├─────19
                                    │     ├─────20
                                    │     │     ├─────21
                                    │     │     └─────22
                                    │     │           ├─────23
                                    │     │           └─────24
                                    │     └─────25
                                    └─────26
                                          ├─────27
                                          └─────28

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 7

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av(Perm((1, 0)))
4: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 8

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 9

+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 10

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 11

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av(Perm((1, 0)))
4: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 12

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 13

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 14

+-+
|1|
+-+
1: point

Label: 15

+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))

Label: 16

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 1)))

Label: 17

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 18

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 1)))

Label: 19

+-+-+-+-+-+-+
|2| |3| |4| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av(Perm((1, 0)))
4: Av+(Perm((0, 1)))

Label: 20

+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 1)))

Label: 21

+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 22

+-+-+-+-+-+
|2| | |3| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 1)))

Label: 23

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 1)))

Label: 24

+-+
|1|
+-+
1: point

Label: 25

+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))

Label: 26

+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 1)))

Label: 27

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 1)))

Label: 28

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 29, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 30, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 31, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 32, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 4]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 33, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 4]": "Av+(Perm((0, 1)))", "[3, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 5]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 2]": "point", "[5, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=4). | "}], "formal_step": "We perform cell insertion into cell (3, 5); either it is empty or Av+(Perm((0, 1))).", "identifier": 34, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 5]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=3). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 6, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0)]", "identifier": 35, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 36, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 3]": "Av+(Perm((1, 0)))", "[3, 0]": "point", "[4, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 5]": "Av+(Perm((1, 0)))", "[5, 0]": "point", "[6, 6]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 24, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2))).", "identifier": 10, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 37, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 38, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=3). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 11, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=2)]", "identifier": 39, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 3]": "Av+(Perm((0, 1)))", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 3]": "Av+(Perm((0, 1)))", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=1): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=1, j=2)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2))).", "identifier": 40, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 3]": "Av+(Perm((0, 1)))", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 3]": "Av+(Perm((0, 1)))", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 41, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 4]": "Av+(Perm((1, 0)))", "[3, 0]": "point", "[4, 5]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 5]": "Av(Perm((1, 0)))", "[4, 0]": "point", "[5, 6]": "point", "[6, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((1, 0))).", "identifier": 26, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((0, 1)))", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((0, 1)))", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 7, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=1)]", "identifier": 27, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=4, j=1)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 2", "identifier": 11, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 7, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 6, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2))).", "identifier": 42, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2))).", "identifier": 43, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2))).", "identifier": 44, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}}
