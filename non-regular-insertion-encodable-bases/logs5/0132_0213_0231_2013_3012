0132_0213_0231_2013_3012

===========================================
Log created Fri, 26 May 2017 10:55:23

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1329 inferral cache hits and 5290 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 5930 tilings in it right now.
There were 3545 tilings of which 413 are verified.
There were 1866 SiblingNodes of which 131 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *5642* times, (2828 originating)
There were 1 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Fri, 26 May 2017 10:57:23

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 794 inferral cache hits and 238161 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 4210 tilings in it right now.
There were 2743 tilings of which 495 are verified.
There were 1545 SiblingNodes of which 275 are verified.

The function splittings called the partitioning cache *238400* times, (859 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Fri, 26 May 2017 10:59:24

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1111 inferral cache hits and 4305 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 4243 tilings in it right now.
There were 2579 tilings of which 232 are verified.
There were 733 SiblingNodes of which 54 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4608* times, (2311 originating)
There were 1 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Fri, 26 May 2017 11:01:24

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1735 inferral cache hits and 70965 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 6104 tilings in it right now.
There were 3738 tilings of which 397 are verified.
There were 1106 SiblingNodes of which 99 are verified.

The function splittings called the partitioning cache *71365* times, (1259 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Fri, 26 May 2017 11:03:24

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 18137 inferral cache hits and 4604 partitioning cache hits.
The partitioning cache had 13 tilings in it right now.
The inferral cache has 6469 tilings in it right now.
There were 3279 tilings of which 399 are verified.
There were 883 SiblingNodes of which 93 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4930* times, (2472 originating)
There were 1 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Fri, 26 May 2017 11:05:19

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 114 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 26233 inferral cache hits and 58578 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 9237 tilings in it right now.
There were 4672 tilings of which 583 are verified.
There were 1334 SiblingNodes of which 158 are verified.

The function splittings called the partitioning cache *59065* times, (1495 originating)
There were 0 cache misses

A proof tree was found in 114 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10
                              ├─────11
                              │     ├─────12
                              │     │     ├─────13
                              │     │     └─────14
                              │     └─────15
                              └─────16

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|2| |3|1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 5

+-+-+-+
|2| |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 6

+-+-+
|1|2|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
2: point
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 7

+-+
|1|
+-+
1: point

Label: 8

+-+-+-+-+
|2| |3|1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
|2| |1|3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))

Label: 9

+-+-+-+-+
| | | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))

Label: 10

+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|4| |1|2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 11

+-+-+-+-+-+
|3| |1|2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|4| |1| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 12

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1)))

Label: 13

+-+-+-+
|3| | |
+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
|2| |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 14

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| |1|2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 15

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 16

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 273, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 274, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 54, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Separting the rightmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 275, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 276, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=2, j=1)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 277, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 3]": "Av(Perm((1, 0)))", "[4, 4]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=3, j=3). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 276, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=2, j=1) in its row. | "}, {"children": [], "formal_step": "recurse", "identifier": 278, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=2, j=3). | "}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 1))).", "identifier": 270, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 27, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 278, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 5]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=3), Cell(i=0, j=3): Cell(i=0, j=5), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=3): Cell(i=2, j=5), Cell(i=3, j=2): Cell(i=3, j=4)}, {Cell(i=0, j=0): Cell(i=2, j=0), Cell(i=1, j=1): Cell(i=4, j=2)}]", "relation": "| The reverse of: Separting the leftmost point from cell Cell(i=2, j=3). | Separting the rightmost point from cell Cell(i=2, j=3). | The reverse of: Isolating the point at Cell(i=1, j=3) in its column. | The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=1, j=2) in its row. | Separating the topmost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=0, j=5) in its column. | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 279, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 5]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 3]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 5]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 3]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 280, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 4]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 3]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=3, j=1). | Isolating the point at Cell(i=0, j=3) in its row. | The reverse of: Isolating the point at Cell(i=3, j=4) in its row. | "}], "formal_step": "Isolated the point at Cell(i=2, j=1) in its row", "identifier": 281, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=2, j=1). | The reverse of: Separting the rightmost point from cell Cell(i=3, j=1). | "}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 282, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=2, j=1). | "}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2))).", "identifier": 54, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=0, j=1) in its column. | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2))).", "identifier": 283, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}}
