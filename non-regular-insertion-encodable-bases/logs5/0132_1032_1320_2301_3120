0132_1032_1320_2301_3120

===========================================
Log created Tue, 23 May 2017 02:58:30

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 489 inferral cache hits and 2013 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2762 tilings in it right now.
There were 1322 tilings of which 220 are verified.
There were 554 SiblingNodes of which 72 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2156* times, (1078 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 02:59:01

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 510 inferral cache hits and 28264 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2894 tilings in it right now.
There were 1360 tilings of which 205 are verified.
There were 590 SiblingNodes of which 69 are verified.

The function splittings called the partitioning cache *28410* times, (471 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 02:59:31

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 265 inferral cache hits and 1264 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 1411 tilings in it right now.
There were 811 tilings of which 59 are verified.
There were 223 SiblingNodes of which 17 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1358* times, (679 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 03:00:01

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 541 inferral cache hits and 15173 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2624 tilings in it right now.
There were 1510 tilings of which 266 are verified.
There were 398 SiblingNodes of which 60 are verified.

The function splittings called the partitioning cache *15340* times, (452 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 03:00:31

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4884 inferral cache hits and 1249 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1904 tilings in it right now.
There were 1006 tilings of which 103 are verified.
There were 300 SiblingNodes of which 37 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1344* times, (672 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 03:01:01

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 7531 inferral cache hits and 14414 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2789 tilings in it right now.
There were 1398 tilings of which 125 are verified.
There were 392 SiblingNodes of which 43 are verified.

The function splittings called the partitioning cache *14555* times, (375 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 03:01:20

Maximum depth fully searched was 6

Maximum time set at 30 seconds

Total time taken was 18 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 143 inferral cache hits and 1309 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 716 tilings in it right now.
There were 508 tilings of which 256 are verified.
There were 292 SiblingNodes of which 88 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1392* times, (696 originating)
There were 0 cache misses

A proof tree was found in 18 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     └─────11
                        │           ├─────12
                        │           └─────13
                        │                 ├─────14
                        │                 │     ├─────15
                        │                 │     └─────16
                        │                 │           ├─────17
                        │                 │           └─────18
                        │                 ├─────19
                        │                 └─────20
                        └─────21
                              ├─────22
                              └─────23

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point

Label: 7

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
|3| |4| | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | |2| |2|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 8

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |2| |2|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |2| |3|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 9

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 10

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 11

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| |3| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 12

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 13

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|3| |4| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 14

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 15

+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 16

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|3| |4| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
4: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 17

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))

Label: 18

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|3| |4| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 19

+-+
|1|
+-+
1: point

Label: 20

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 21

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))

Label: 22

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 23

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 123, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 124, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 125, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 126, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 127, "in_tiling": {"[0, 0]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (5, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 128, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 4]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=3, j=1). | Inserting the bottom most point in to the cell Cell(i=3, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 129, "in_tiling": {"[0, 0]": "point", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 130, "in_tiling": {"[0, 4]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av+(Perm((0, 1)))", "[4, 1]": "point"}, "out_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=2). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 131, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=1). | "}, {"children": [], "formal_step": "recurse", "identifier": 132, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=1). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 99, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=4, j=1). | "}], "formal_step": "Placing the maximum point into row 2", "identifier": 89, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 4, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=4), Cell(i=5, j=1)]", "identifier": 132, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=4)}, {Cell(i=0, j=0): Cell(i=5, j=1)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 1))).", "identifier": 133, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 57, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[3, 4]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[5, 2]": "point", "[6, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 134, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 0]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 135, "in_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 5]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "Av(Perm((1, 0)))", "[5, 4]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=3). | "}], "formal_step": "We perform cell insertion into cell (6, 5); either it is empty or Av+(Perm((1, 0))).", "identifier": 136, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 0]": "point", "[6, 5]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "Placing the minimum point into row 0", "identifier": 137, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0))).", "identifier": 138, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 139, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 140, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
