0231_1032_1320_2031_3021

===========================================
Log created Tue, 23 May 2017 13:52:56

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 224 inferral cache hits and 1175 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1784 tilings in it right now.
There were 992 tilings of which 169 are verified.
There were 442 SiblingNodes of which 59 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1260* times, (630 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 13:53:26

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 181 inferral cache hits and 14876 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1690 tilings in it right now.
There were 919 tilings of which 163 are verified.
There were 411 SiblingNodes of which 63 are verified.

The function splittings called the partitioning cache *14955* times, (254 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 13:53:57

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 342 inferral cache hits and 1103 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 1820 tilings in it right now.
There were 1057 tilings of which 279 are verified.
There were 221 SiblingNodes of which 37 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1186* times, (593 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 13:54:25

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 28 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 461 inferral cache hits and 12924 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2354 tilings in it right now.
There were 1400 tilings of which 439 are verified.
There were 310 SiblingNodes of which 65 are verified.

The function splittings called the partitioning cache *13021* times, (277 originating)
There were 0 cache misses

A proof tree was found in 28 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  │           ├─────8
                  │           └─────9
                  └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: point
2: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+
|2|
+-+
|1|
+-+
1: point
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
2: point

Label: 5

+-+-+
|2| |
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| | |2| |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: Av(Perm((0, 2, 1)))
3: point

Label: 6

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point

Label: 7

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| | |2| |
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((0, 2, 1)))
3: point
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | |5| | | |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((1, 0)))
3: point
4: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
5: Av(Perm((0, 1)))

Label: 8

+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 9

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: Av(Perm((1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 0)))

Label: 10

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
2: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 59, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 60, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 61, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 2, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)))", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 2, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)))", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 62, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 5]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[5, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 5]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[5, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 63, "in_tiling": {"[0, 1]": "Av(Perm((1, 0)))", "[1, 2]": "point", "[2, 5]": "point", "[3, 0]": "Av+(Perm((0, 2, 1)))", "[4, 3]": "Av(Perm((1, 0)))", "[5, 4]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 4]": "point", "[2, 7]": "point", "[3, 1]": "Av(Perm((0, 2, 1)))", "[4, 2]": "point", "[5, 0]": "Av(Perm((0, 2, 1)))", "[6, 5]": "Av(Perm((1, 0)))", "[7, 6]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=0). | "}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 64, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)))", "[4, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((1, 0)))", "[1, 2]": "point", "[2, 6]": "point", "[3, 5]": "Av(Perm((0, 1)))", "[4, 0]": "Av(Perm((0, 2, 1)))", "[5, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[6, 4]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((1, 0))).", "identifier": 65, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[0, 3]": "point", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 2, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)))", "[4, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Separating the topmost point from cell Cell(i=0, j=2). | Inserting the top most point in to the cell Cell(i=0, j=2). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 66, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the rightmost point into column 0", "identifier": 67, "in_tiling": {"[0, 0]": "point", "[0, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))", "[0, 1]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=0, j=1). | The reverse of: Separating the bottommost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1))).", "identifier": 68, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "point", "[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1))).", "identifier": 69, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": ""}}
