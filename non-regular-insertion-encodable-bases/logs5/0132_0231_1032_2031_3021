0132_0231_1032_2031_3021

===========================================
Log created Mon, 22 May 2017 22:39:10

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 203 inferral cache hits and 1123 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1498 tilings in it right now.
There were 973 tilings of which 105 are verified.
There were 507 SiblingNodes of which 49 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1204* times, (602 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 22:39:40

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 178 inferral cache hits and 21143 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1351 tilings in it right now.
There were 926 tilings of which 137 are verified.
There were 516 SiblingNodes of which 89 are verified.

The function splittings called the partitioning cache *21218* times, (251 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 22:40:10

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 131 inferral cache hits and 1111 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 778 tilings in it right now.
There were 562 tilings of which 71 are verified.
There were 182 SiblingNodes of which 25 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1194* times, (597 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 22:40:40

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 324 inferral cache hits and 12903 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1647 tilings in it right now.
There were 1165 tilings of which 133 are verified.
There were 379 SiblingNodes of which 63 are verified.

The function splittings called the partitioning cache *13003* times, (285 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Mon, 22 May 2017 22:41:00

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 19 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 3220 inferral cache hits and 1019 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1284 tilings in it right now.
There were 753 tilings of which 106 are verified.
There were 248 SiblingNodes of which 42 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1098* times, (549 originating)
There were 0 cache misses

A proof tree was found in 19 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     ├─────7
                  │     └─────8
                  └─────9
                        ├─────10
                        ├─────11
                        └─────12

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+-+
|1|2|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
2: point

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+-+
|1|2|
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+
|1|2|1|
+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))

Label: 5

+-+-+-+
| |3|2|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| |4| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 6

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))

Label: 7

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 8

+-+
|1|
+-+
1: point

Label: 9

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| |1|2|
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
|2|1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point

Label: 10

+-+-+
|1|2|
+-+-+
1: point
2: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))

Label: 11

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Label: 12

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 25, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 26, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 20, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=0) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 14, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 26, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=4), Cell(i=3, j=3)]", "identifier": 27, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 2, 1)))", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[3, 3]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=4)}, {Cell(i=0, j=0): Cell(i=3, j=3)}]", "relation": "| Isolating the point at Cell(i=2, j=2) in its row. | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 20, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 26, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0), Cell(i=3, j=1)]", "identifier": 28, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[2, 0]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 2]": "Av(Perm((0, 2, 1)))", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": "| Isolating the point at Cell(i=1, j=2) in its row. | The reverse of: Isolating the point at Cell(i=1, j=2) in its row. | "}], "formal_step": "Isolated the point at Cell(i=0, j=0) in its row", "identifier": 29, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1))).", "identifier": 20, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1))).", "identifier": 30, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": ""}}
