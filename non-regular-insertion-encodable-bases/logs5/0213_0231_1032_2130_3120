0213_0231_1032_2130_3120

===========================================
Log created Tue, 23 May 2017 06:56:36

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 486 inferral cache hits and 1557 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2628 tilings in it right now.
There were 1271 tilings of which 213 are verified.
There were 485 SiblingNodes of which 55 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1668* times, (834 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:57:06

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 443 inferral cache hits and 23603 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2763 tilings in it right now.
There were 1330 tilings of which 202 are verified.
There were 536 SiblingNodes of which 82 are verified.

The function splittings called the partitioning cache *23720* times, (381 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:57:36

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 321 inferral cache hits and 1215 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1742 tilings in it right now.
There were 997 tilings of which 139 are verified.
There were 253 SiblingNodes of which 29 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1306* times, (653 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:58:07

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 624 inferral cache hits and 15980 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2781 tilings in it right now.
There were 1577 tilings of which 191 are verified.
There were 391 SiblingNodes of which 61 are verified.

The function splittings called the partitioning cache *16125* times, (401 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:58:37

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 3979 inferral cache hits and 1337 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 1683 tilings in it right now.
There were 883 tilings of which 83 are verified.
There were 269 SiblingNodes of which 35 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1438* times, (719 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:59:07

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 8151 inferral cache hits and 13442 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2915 tilings in it right now.
There were 1476 tilings of which 120 are verified.
There were 383 SiblingNodes of which 37 are verified.

The function splittings called the partitioning cache *13591* times, (410 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:59:37

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 94 inferral cache hits and 1406 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 861 tilings in it right now.
There were 585 tilings of which 272 are verified.
There were 357 SiblingNodes of which 88 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1492* times, (746 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:00:16

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 38 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 103 inferral cache hits and 17509 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 898 tilings in it right now.
There were 617 tilings of which 318 are verified.
There were 381 SiblingNodes of which 128 are verified.

The function splittings called the partitioning cache *17597* times, (384 originating)
There were 0 cache misses

No proof tree was found after 38 seconds

===========================================
Log created Tue, 23 May 2017 07:00:47

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 112 inferral cache hits and 835 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 272 tilings in it right now.
There were 225 tilings of which 39 are verified.
There were 53 SiblingNodes of which 15 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *896* times, (448 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:01:17

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 408 inferral cache hits and 5979 partitioning cache hits.
The partitioning cache had 13 tilings in it right now.
The inferral cache has 1087 tilings in it right now.
There were 722 tilings of which 237 are verified.
There were 164 SiblingNodes of which 45 are verified.

The function splittings called the partitioning cache *6125* times, (375 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:01:47

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 65 inferral cache hits and 1430 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 415 tilings in it right now.
There were 520 tilings of which 88 are verified.
There were 441 SiblingNodes of which 54 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1508* times, (754 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:02:51

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 64 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 16 inferral cache hits and 13538 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 185 tilings in it right now.
There were 216 tilings of which 88 are verified.
There were 189 SiblingNodes of which 71 are verified.

The function splittings called the partitioning cache *13577* times, (183 originating)
There were 0 cache misses

No proof tree was found after 64 seconds

===========================================
Log created Tue, 23 May 2017 07:03:25

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 33 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 114 inferral cache hits and 956 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 229 tilings in it right now.
There were 200 tilings of which 44 are verified.
There were 49 SiblingNodes of which 18 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1024* times, (512 originating)
There were 0 cache misses

No proof tree was found after 33 seconds

===========================================
Log created Tue, 23 May 2017 07:03:55

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 258 inferral cache hits and 3031 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 387 tilings in it right now.
There were 338 tilings of which 44 are verified.
There were 67 SiblingNodes of which 18 are verified.

The function splittings called the partitioning cache *3139* times, (270 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:04:26

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 92 inferral cache hits and 948 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 623 tilings in it right now.
There were 374 tilings of which 234 are verified.
There were 196 SiblingNodes of which 64 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1008* times, (504 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:04:54

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 27 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 179 inferral cache hits and 9385 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1008 tilings in it right now.
There were 659 tilings of which 428 are verified.
There were 337 SiblingNodes of which 134 are verified.

The function splittings called the partitioning cache *9462* times, (318 originating)
There were 0 cache misses

A proof tree was found in 27 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     └─────11
                        │           ├─────12
                        │           │     ├─────13
                        │           │     └─────14
                        │           │           ├─────15
                        │           │           └─────16
                        │           └─────17
                        └─────18
                              ├─────19
                              └─────20
                                    ├─────21
                                    │     ├─────22
                                    │     │     ├─────23
                                    │     │     └─────24
                                    │     └─────25
                                    │           ├─────26
                                    │           └─────27
                                    └─────28
                                          ├─────29
                                          └─────30

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))
We use his sibling for the next strategy
+-+-+-+-+
| |3| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 6

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 7

+-+-+-+
|4| | |
+-+-+-+
| | |2|
+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 8

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 9

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 10

+-+
|1|
+-+
1: point

Label: 11

+-+-+-+-+
|4| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 12

+-+-+-+-+-+-+
| |5| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((0, 1)))

Label: 13

+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))

Label: 14

+-+-+-+-+-+-+
| |5| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((1, 0)))
5: Av+(Perm((0, 1)))

Label: 15

+-+-+-+-+-+-+-+-+
| | |5| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| |4| | | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| | | | |2| | | | |
+-+-+-+-+-+-+-+-+-+
| |4| | | | | | | |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |3| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 16

+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| |4| | | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |2| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+
| |4| | | | | | | |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |3| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 17

+-+-+-+-+-+-+-+
| |5| | | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 1)))
4: Av(Perm((0, 1)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| |4| | | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 18

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 19

+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point

Label: 20

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 21

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 22

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 23

+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 24

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 25

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 26

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 27

+-+
|1|
+-+
1: point

Label: 28

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 29

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 30

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 134, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 135, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 136, "in_tiling": {"[0, 1]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 137, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=2)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 138, "in_tiling": {"[0, 3]": "point", "[1, 5]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 4]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=2, j=0). | Inserting the top most point in to the cell Cell(i=1, j=3). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 139, "in_tiling": {"[0, 3]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[2, 7]": "Av+(Perm((0, 1)))", "[3, 5]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[6, 1]": "point", "[7, 6]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[2, 8]": "point", "[3, 7]": "Av(Perm((0, 1)))", "[4, 5]": "point", "[5, 2]": "Av(Perm((0, 1)))", "[6, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[7, 1]": "point", "[8, 6]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=7). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 140, "in_tiling": {"[0, 3]": "point", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 7]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[6, 1]": "point", "[7, 5]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 8]": "Av(Perm((0, 1)))", "[4, 7]": "point", "[5, 2]": "Av(Perm((0, 1)))", "[6, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[7, 1]": "point", "[8, 6]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=4). | "}], "formal_step": "Placing the rightmost point into column 1", "identifier": 141, "in_tiling": {"[0, 3]": "point", "[1, 4]": "Av+(Perm((1, 0)))", "[1, 6]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 5]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 4]": "Av+(Perm((1, 0)))", "[1, 6]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 5]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((1, 0))).", "identifier": 142, "in_tiling": {"[0, 3]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[1, 6]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 5]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[1, 6]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 5]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 143, "in_tiling": {"[0, 5]": "point", "[1, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 4]": "Av(Perm((0, 1)))", "[3, 2]": "Av+(Perm((0, 1)))", "[4, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[5, 1]": "point", "[6, 3]": "point"}, "out_tiling": {"[0, 6]": "point", "[1, 7]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 5]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[6, 1]": "point", "[7, 4]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=2). | "}], "formal_step": "Placing the leftmost point into column 0", "identifier": 32, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))", "[0, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[2, 1]": "point", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))", "[0, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[2, 1]": "point", "[3, 3]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1))).", "identifier": 144, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))", "[0, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))", "[0, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 145, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av(Perm((1, 0)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 146, "in_tiling": {"[0, 4]": "point", "[1, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 147, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0)))", "[1, 5]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 3]": "point", "[2, 6]": "point", "[3, 5]": "Av(Perm((0, 1)))", "[4, 0]": "point", "[5, 4]": "point", "[6, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 148, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 5]": "point", "[2, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 4]": "Av(Perm((0, 1)))", "[4, 0]": "point", "[5, 3]": "point", "[6, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=1, j=4). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 118, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 149, "in_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 5]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 5]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=4): Cell(i=1, j=5), Cell(i=2, j=3): Cell(i=3, j=4), Cell(i=3, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((1, 0))).", "identifier": 150, "in_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av(Perm((1, 0)))", "[1, 5]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av(Perm((1, 0)))", "[1, 5]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 14, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 151, "in_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 5]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 5]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=4): Cell(i=1, j=5), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=4, j=1)}]", "relation": ""}], "formal_step": "Placing the rightmost point into column 1", "identifier": 118, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1))).", "identifier": 14, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the rightmost point into column 0", "identifier": 74, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0))).", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1))).", "identifier": 152, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0))).", "identifier": 153, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
