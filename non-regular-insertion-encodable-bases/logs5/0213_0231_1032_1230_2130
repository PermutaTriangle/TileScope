0213_0231_1032_1230_2130

===========================================
Log created Tue, 23 May 2017 06:13:24

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 313 inferral cache hits and 1599 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2066 tilings in it right now.
There were 1072 tilings of which 147 are verified.
There were 530 SiblingNodes of which 57 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1714* times, (857 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:13:54

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 289 inferral cache hits and 30917 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2273 tilings in it right now.
There were 1227 tilings of which 218 are verified.
There were 643 SiblingNodes of which 124 are verified.

The function splittings called the partitioning cache *31039* times, (387 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:14:24

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 179 inferral cache hits and 1212 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 1166 tilings in it right now.
There were 731 tilings of which 65 are verified.
There were 215 SiblingNodes of which 17 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1302* times, (651 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:14:54

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 482 inferral cache hits and 16300 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2222 tilings in it right now.
There were 1396 tilings of which 178 are verified.
There were 424 SiblingNodes of which 72 are verified.

The function splittings called the partitioning cache *16448* times, (411 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:15:25

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 3804 inferral cache hits and 1232 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1478 tilings in it right now.
There were 799 tilings of which 68 are verified.
There were 232 SiblingNodes of which 24 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1324* times, (662 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:15:55

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 9292 inferral cache hits and 23221 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 3214 tilings in it right now.
There were 1646 tilings of which 409 are verified.
There were 410 SiblingNodes of which 53 are verified.

The function splittings called the partitioning cache *23373* times, (461 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:16:25

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 50 inferral cache hits and 1116 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 621 tilings in it right now.
There were 373 tilings of which 171 are verified.
There were 249 SiblingNodes of which 65 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1186* times, (593 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:16:56

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 72 inferral cache hits and 10074 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 850 tilings in it right now.
There were 570 tilings of which 270 are verified.
There were 392 SiblingNodes of which 114 are verified.

The function splittings called the partitioning cache *10170* times, (427 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:17:26

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 119 inferral cache hits and 878 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 273 tilings in it right now.
There were 226 tilings of which 39 are verified.
There were 54 SiblingNodes of which 15 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *942* times, (471 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:17:56

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 322 inferral cache hits and 3395 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 679 tilings in it right now.
There were 500 tilings of which 117 are verified.
There were 102 SiblingNodes of which 29 are verified.

The function splittings called the partitioning cache *3522* times, (333 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 06:18:08

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 11 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 19 inferral cache hits and 586 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 164 tilings in it right now.
There were 122 tilings of which 80 are verified.
There were 96 SiblingNodes of which 57 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *622* times, (311 originating)
There were 0 cache misses

A proof tree was found in 11 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     │           ├─────11
                        │     │           └─────12
                        │     └─────13
                        │           ├─────14
                        │           │     ├─────15
                        │           │     │     ├─────16
                        │           │     │     └─────17
                        │           │     └─────18
                        │           │           ├─────19
                        │           │           └─────20
                        │           │                 ├─────21
                        │           │                 └─────22
                        │           └─────23
                        │                 ├─────24
                        │                 ├─────25
                        │                 │     ├─────26
                        │                 │     │     ├─────27
                        │                 │     │     └─────28
                        │                 │     └─────29
                        │                 └─────30
                        └─────31
                              ├─────32
                              │     ├─────33
                              │     └─────34
                              └─────35
                                    ├─────36
                                    │     ├─────37
                                    │     └─────38
                                    │           ├─────39
                                    │           │     ├─────40
                                    │           │     └─────41
                                    │           └─────42
                                    └─────43

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 7

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((0, 1)))
4: Av+(Perm((1, 0)))

Label: 8

+-+-+-+-+
| |2| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 9

+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 10

+-+-+-+-+
| |2| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 11

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 12

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 13

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((0, 1)))
4: Av+(Perm((1, 0)))

Label: 14

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av+(Perm((1, 0)))

Label: 15

+-+-+-+-+-+-+
|2| |3| | |4|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((0, 1)))
4: Av+(Perm((1, 0)))

Label: 16

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((0, 1)))
4: Av+(Perm((1, 0)))

Label: 17

+-+
|1|
+-+
1: point

Label: 18

+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((1, 0)))

Label: 19

+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 20

+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av+(Perm((1, 0)))

Label: 21

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av+(Perm((1, 0)))

Label: 22

+-+
|1|
+-+
1: point

Label: 23

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av+(Perm((0, 1)))
4: Av+(Perm((1, 0)))

Label: 24

+-+-+-+-+-+
| | |1| |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point

Label: 25

+-+-+-+-+-+-+
|2| |3| | |4|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((0, 1)))
4: Av+(Perm((1, 0)))

Label: 26

+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av+(Perm((1, 0)))

Label: 27

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av+(Perm((1, 0)))

Label: 28

+-+
|1|
+-+
1: point

Label: 29

+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av+(Perm((0, 1)))
4: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((0, 1)))
4: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 30

+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((0, 1)))
4: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 31

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 32

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 33

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 34

+-+
|1|
+-+
1: point

Label: 35

+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av+(Perm((0, 1)))

Label: 36

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av+(Perm((0, 1)))

Label: 37

+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 38

+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((0, 1)))

Label: 39

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av(Perm((0, 1)))

Label: 40

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 41

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: Av+(Perm((0, 1)))

Label: 42

+-+
|1|
+-+
1: point

Label: 43

+-+
|1|
+-+
1: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 37, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 38, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 39, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 40, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 2]": "point", "[3, 3]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=2). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 41, "in_tiling": {"[0, 1]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 5]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "point", "[5, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=3). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 42, "in_tiling": {"[0, 1]": "point", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 5]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "point", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=4). | "}], "formal_step": "Placing the minimum point into row 2", "identifier": 43, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av+(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av+(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 44, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 26, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=0)]", "identifier": 45, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=2), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=0): Cell(i=3, j=1), Cell(i=4, j=2): Cell(i=5, j=3)}, {Cell(i=0, j=0): Cell(i=4, j=0)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 46, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 3]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=3). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 33, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=2)]", "identifier": 47, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=3, j=2)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 3); either it is empty or Av+(Perm((1, 0))).", "identifier": 48, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 2", "identifier": 33, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 49, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "point", "[4, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 33, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=2)]", "identifier": 50, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=2, j=2)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 51, "in_tiling": {"[0, 5]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 4]": "Av+(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 6]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 5]": "Av+(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "point", "[5, 3]": "point", "[6, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=5, j=3). | "}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 1))).", "identifier": 52, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 53, "in_tiling": {"[0, 5]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 4]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 6]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 5]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "point", "[5, 2]": "point", "[6, 3]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=4). | "}], "formal_step": "Placing the minimum point into row 2", "identifier": 54, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 35, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 0, 2))).", "identifier": 26, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 4, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0)]", "identifier": 55, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 56, "in_tiling": {"[0, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 57, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}, {"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 12, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=1)]", "identifier": 13, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=4, j=1)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 2", "identifier": 5, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 6, "in_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=2)]", "identifier": 19, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=4, j=2)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 31, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 10, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 4, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 0, 2))).", "identifier": 58, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0))).", "identifier": 59, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}}
