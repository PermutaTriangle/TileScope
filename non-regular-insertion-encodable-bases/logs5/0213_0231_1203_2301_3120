0213_0231_1203_2301_3120

===========================================
Log created Tue, 23 May 2017 08:35:38

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 382 inferral cache hits and 1536 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2279 tilings in it right now.
There were 1131 tilings of which 229 are verified.
There were 465 SiblingNodes of which 55 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1646* times, (823 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 08:36:09

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 361 inferral cache hits and 21103 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2162 tilings in it right now.
There were 1054 tilings of which 203 are verified.
There were 396 SiblingNodes of which 61 are verified.

The function splittings called the partitioning cache *21192* times, (293 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 08:36:39

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 434 inferral cache hits and 1307 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1825 tilings in it right now.
There were 1031 tilings of which 122 are verified.
There were 231 SiblingNodes of which 28 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1404* times, (702 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 08:37:09

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 653 inferral cache hits and 15348 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2667 tilings in it right now.
There were 1467 tilings of which 244 are verified.
There were 344 SiblingNodes of which 44 are verified.

The function splittings called the partitioning cache *15481* times, (359 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 08:37:39

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4361 inferral cache hits and 1195 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 1724 tilings in it right now.
There were 915 tilings of which 70 are verified.
There were 272 SiblingNodes of which 29 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1286* times, (643 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 08:38:09

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 7222 inferral cache hits and 11375 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2459 tilings in it right now.
There were 1304 tilings of which 250 are verified.
There were 284 SiblingNodes of which 36 are verified.

The function splittings called the partitioning cache *11475* times, (281 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 08:38:40

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 75 inferral cache hits and 1133 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 792 tilings in it right now.
There were 454 tilings of which 262 are verified.
There were 242 SiblingNodes of which 72 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1204* times, (602 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 08:39:12

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 32 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 91 inferral cache hits and 7503 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 999 tilings in it right now.
There were 603 tilings of which 384 are verified.
There were 315 SiblingNodes of which 120 are verified.

The function splittings called the partitioning cache *7588* times, (347 originating)
There were 0 cache misses

No proof tree was found after 32 seconds

===========================================
Log created Tue, 23 May 2017 08:39:43

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 160 inferral cache hits and 951 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 298 tilings in it right now.
There were 260 tilings of which 38 are verified.
There were 60 SiblingNodes of which 14 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1020* times, (510 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Tue, 23 May 2017 08:40:15

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 32 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 351 inferral cache hits and 3023 partitioning cache hits.
The partitioning cache had 10 tilings in it right now.
The inferral cache has 748 tilings in it right now.
There were 549 tilings of which 135 are verified.
There were 109 SiblingNodes of which 29 are verified.

The function splittings called the partitioning cache *3159* times, (320 originating)
There were 0 cache misses

No proof tree was found after 32 seconds

===========================================
Log created Tue, 23 May 2017 08:40:35

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 19 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 42 inferral cache hits and 736 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 302 tilings in it right now.
There were 227 tilings of which 138 are verified.
There were 161 SiblingNodes of which 75 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *780* times, (390 originating)
There were 0 cache misses

A proof tree was found in 19 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        └─────14
                              ├─────15
                              │     ├─────16
                              │     └─────17
                              │           ├─────18
                              │           │     ├─────19
                              │           │     └─────20
                              │           │           ├─────21
                              │           │           └─────22
                              │           └─────23
                              │                 ├─────24
                              │                 └─────25
                              └─────26
                                    ├─────27
                                    │     ├─────28
                                    │     └─────29
                                    │           ├─────30
                                    │           │     ├─────31
                                    │           │     └─────32
                                    │           └─────33
                                    └─────34
                                          ├─────35
                                          ├─────36
                                          └─────37

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 7

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 8

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 1)))

Label: 9

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 10

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 11

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av+(Perm((0, 1)))

Label: 14

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 15

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 16

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 17

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 18

+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 19

+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 1)))

Label: 20

+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 21

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 22

+-+
|1|
+-+
1: point

Label: 23

+-+-+-+-+-+-+
|2| | |3| |4|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 24

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 25

+-+
|1|
+-+
1: point

Label: 26

+-+-+-+-+-+
|2| |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 27

+-+-+-+-+
|2| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 28

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 29

+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))

Label: 30

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))

Label: 31

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 32

+-+-+-+-+
|2| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 33

+-+
|1|
+-+
1: point

Label: 34

+-+-+-+-+-+
|2| |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 35

+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | |4| | | | |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av+(Perm((0, 1)))

Label: 36

+-+-+-+-+-+
|1| | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point

Label: 37

+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
|4| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 82, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 83, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 84, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 85, "in_tiling": {"[0, 1]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 5]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=2). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 7, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0)]", "identifier": 86, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 87, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 1]": "point", "[2, 4]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 5]": "Av+(Perm((0, 1)))", "[4, 0]": "point", "[5, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 1))).", "identifier": 69, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 0, 1))).", "identifier": 15, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 88, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 89, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "point", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "point", "[3, 5]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=3). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 72, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=2)]", "identifier": 90, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=1): Cell(i=3, j=1), Cell(i=3, j=2): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=2)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 1))).", "identifier": 91, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 8, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0)]", "identifier": 92, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=1): Cell(i=4, j=2), Cell(i=4, j=2): Cell(i=5, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 2", "identifier": 72, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 18, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 93, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 4]": "Av+(Perm((0, 1)))", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 5]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=4). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 88, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 94, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 20, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=2)]", "identifier": 95, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=3, j=2)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 2", "identifier": 94, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 96, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 5]": "Av+(Perm((0, 1)))", "[4, 1]": "point", "[5, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 7]": "Av+(Perm((0, 1)))", "[4, 1]": "point", "[5, 6]": "Av(Perm((0, 1)))", "[6, 4]": "point", "[7, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=5, j=4). | "}, {"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 97, "in_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "point", "[4, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 98, "in_tiling": {"[0, 6]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 5]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 4]": "Av(Perm((0, 1)))", "[5, 2]": "point", "[6, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 7]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 6]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 1]": "point", "[5, 4]": "Av(Perm((0, 1)))", "[6, 2]": "point", "[7, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=5). | "}], "formal_step": "Placing the minimum point into row 2", "identifier": 99, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 17, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 8, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 7, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 100, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3))).", "identifier": 101, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 102, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
