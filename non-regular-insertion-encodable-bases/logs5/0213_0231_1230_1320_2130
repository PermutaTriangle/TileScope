0213_0231_1230_1320_2130

===========================================
Log created Thu, 25 May 2017 09:19:57

Maximum depth fully searched was 3

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 405 inferral cache hits and 2280 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 3434 tilings in it right now.
There were 1576 tilings of which 198 are verified.
There were 674 SiblingNodes of which 56 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2442* times, (1221 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 09:20:52

Maximum depth fully searched was 3

Maximum time set at 60 seconds

Total time taken was 54 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 504 inferral cache hits and 43082 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 3966 tilings in it right now.
There were 1906 tilings of which 319 are verified.
There were 840 SiblingNodes of which 117 are verified.

The function splittings called the partitioning cache *43278* times, (671 originating)
There were 0 cache misses

A proof tree was found in 54 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  │           ├─────8
                  │           │     ├─────9
                  │           │     └─────10
                  │           └─────11
                  └─────12
                        ├─────13
                        └─────14

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
2: point

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |5| | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av(Perm((0, 1)))

Label: 5

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 6

+-+-+-+-+
| | | |3|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 7

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 8

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point

Label: 9

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
2: point

Label: 10

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 11

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 12

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 13

+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 14

+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | | |5| | |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: Av(Perm((1, 0)))
3: point
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | |2| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |6| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |5|
+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |4| | | |
+-+-+-+-+-+-+-+-+-+
| |3| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |2| | | | | |
+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((1, 0)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
6: Av(Perm((0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 216, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 217, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 218, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 2]": "point", "[3, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 2]": "point", "[3, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 219, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 220, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 3]": "point", "[3, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 5]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=1). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0))).", "identifier": 221, "in_tiling": {"[0, 4]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 5]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))", "[4, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 3]": "point", "[3, 1]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=3, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 222, "in_tiling": {"[0, 3]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 2]": "Av(Perm((1, 0)))", "[4, 5]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 3]": "Av(Perm((1, 0)))", "[4, 5]": "point", "[5, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=2, j=0). | Inserting the top most point in to the cell Cell(i=3, j=3). | "}], "formal_step": "We perform cell insertion into cell (5, 6); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 223, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 3]": "point", "[3, 1]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 5]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))", "[4, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[5, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=3, j=1). | "}], "formal_step": "We perform cell insertion into cell (3, 1); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0))).", "identifier": 224, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 3]": "point", "[3, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 3]": "point", "[3, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 225, "in_tiling": {"[0, 1]": "point", "[1, 5]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 5]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 226, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 6]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 5]": "Av(Perm((0, 1)))", "[5, 3]": "point", "[6, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point", "[4, 8]": "point", "[5, 3]": "Av(Perm((1, 0)))", "[6, 7]": "Av(Perm((0, 1)))", "[7, 5]": "point", "[8, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0))).", "identifier": 227, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[2, 6]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[4, 5]": "Av(Perm((0, 1)))", "[5, 3]": "point", "[6, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=4). | "}], "formal_step": "We perform cell insertion into cell (1, 5); either it is empty or Av+(Perm((0, 1))).", "identifier": 228, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))", "[1, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[1, 5]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 1]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=2). | "}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 32, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))", "[1, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0))).", "identifier": 229, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}}
