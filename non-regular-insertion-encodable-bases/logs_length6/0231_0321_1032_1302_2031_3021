0231_0321_1032_1302_2031_3021
Log created  Sun, 30 Apr 2017 19:06:31
Finding the proof tree took 4 seconds
The depth searched was 5

Strategies applied: standard_strategies_w_all_cols
Maximum depth set at 8

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     ├─────9
                        │     └─────10
                        │           ├─────11
                        │           └─────12
                        └─────13
                              ├─────14
                              └─────15

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point

Label: 6

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))

Label: 7

+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))

Label: 8

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Label: 9

+-+
|1|
+-+
1: point

Label: 10

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))

Label: 11

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))

Label: 12

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))

Label: 13

+-+-+-+
| | |2|
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))

Label: 14

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))

Label: 15

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 7, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 8, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 9, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 2, 1)))", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=1, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 10, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 11, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 4, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 12, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 2, 1)))", "[1, 4]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 2, 1)))", "[1, 4]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=2, j=0)}, {Cell(i=0, j=0): Cell(i=3, j=1)}, {Cell(i=0, j=1): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=2), Cell(i=1, j=2): Cell(i=1, j=4)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 13, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[2, 3]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[2, 3]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=2): Cell(i=1, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=3)}]", "relation": ""}], "formal_step": "Placing the rightmost point into column 1", "identifier": 11, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2))).", "identifier": 2, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 14, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1))).", "identifier": 15, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": ""}}
