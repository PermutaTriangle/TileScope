0231_1032_1302_2031_2130_2301
Log created  Sat, 29 Apr 2017 22:57:07
Finding the proof tree took 4 seconds
The depth searched was 7

Strategies applied: standard_strategies_w_left_col
Maximum depth set at 8

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        └─────10
                              ├─────11
                              └─────12
                                    ├─────13
                                    └─────14
                                          ├─────15
                                          └─────16

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 6

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))

Label: 7

+-+-+-+-+
| | | |4|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))
4: Av+(Perm((1, 0)))

Label: 8

+-+-+-+
|2| | |
+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 9

+-+
|1|
+-+
1: Av+(Perm((1, 0)))

Label: 10

+-+-+-+-+
| | | |4|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))

Label: 11

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 12

+-+-+-+-+
| | | |4|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))

Label: 13

+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 14

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))

Label: 15

+-+-+-+-+
| | | |4|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))

Label: 16

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 15, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 16, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 17, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 17, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=1, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=4)]", "identifier": 18, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))", "[3, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))", "[3, 4]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=2, j=2): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=4)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 19, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=0). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 20, "in_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[5, 5]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[5, 5]": "point", "[6, 6]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=5, j=5). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 14, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 4]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 4]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=1)]", "identifier": 21, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 4]": "point", "[3, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 0]": "Av+(Perm((0, 1)))", "[4, 5]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 4]": "point", "[3, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 0]": "Av+(Perm((0, 1)))", "[4, 5]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=2), Cell(i=1, j=3): Cell(i=2, j=4), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=4): Cell(i=4, j=5)}, {Cell(i=0, j=0): Cell(i=0, j=1)}]", "relation": ""}], "formal_step": "Placing the leftmost point into column 3", "identifier": 22, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 4]": "Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 4]": "Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 4); either it is empty or Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2))).", "identifier": 14, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 4]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 4]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the leftmost point into column 1", "identifier": 23, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2))).", "identifier": 24, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 0, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 25, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}}
