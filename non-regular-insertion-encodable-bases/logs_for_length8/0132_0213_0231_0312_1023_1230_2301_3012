0132_0213_0231_0312_1023_1230_2301_3012
Log created  Thu, 13 Apr 2017 01:16:42
Finding the proof tree for 0132_0213_0231_0312_1023_1230_2301_3012 took 72 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
2: point
3: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
2: point

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))

Label: 5

+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))

Label: 6

+-+-+-+
|3| | |
+-+-+-+
| |1| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))

Label: 7

+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)))

Label: 8

+-+-+-+-+
|4| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1)))
3: point
4: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| |1| | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 9

+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 10

+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| |3| | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
|1| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | |1| | | | |1| |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| | | |2| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 50, "in_tiling": {}, "out_tiling": {}, "recurse": false, "relation": "they are on the same SiblingNode"}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 51, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "recurse": false, "relation": "they are on the same SiblingNode"}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 52, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 0]": "point"}, "recurse": false, "relation": "they are on the same SiblingNode"}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 53, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": false, "relation": "they are on the same SiblingNode"}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 54, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": false, "relation": "they are on the same SiblingNode"}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 55, "in_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[4, 4]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[4, 4]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "recurse": false, "relation": "they are on the same SiblingNode"}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 56, "in_tiling": {"[0, 5]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((0, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 3]": "Av(Perm((0, 1)))", "[6, 2]": "point"}, "out_tiling": {"[0, 7]": "Av(Perm((0, 1)))", "[1, 4]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[5, 6]": "point", "[6, 5]": "Av(Perm((0, 1)))", "[7, 3]": "Av(Perm((0, 1)))", "[8, 2]": "point"}, "recurse": false, "relation": "they are on the same SiblingNode"}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((0, 1))).", "identifier": 57, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 4]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 5]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[5, 4]": "Av(Perm((0, 1)))", "[6, 3]": "point"}, "recurse": false, "relation": "they are on the same SiblingNode"}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 58, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 4]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "recurse": false, "relation": "they are on the same SiblingNode"}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1))).", "identifier": 59, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[0, 2]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "recurse": false, "relation": "they are on the same SiblingNode"}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2))).", "identifier": 60, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "recurse": false, "relation": "they are on the same SiblingNode"}}
