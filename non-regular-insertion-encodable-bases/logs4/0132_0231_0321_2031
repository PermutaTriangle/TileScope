0132_0231_0321_2031

===========================================
Log created Wed, 24 May 2017 09:46:28

Maximum depth fully searched was 5

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 606 inferral cache hits and 2776 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 3475 tilings in it right now.
There were 1884 tilings of which 142 are verified.
There were 920 SiblingNodes of which 80 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2972* times, (1486 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Wed, 24 May 2017 09:47:28

Maximum depth fully searched was 5

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 671 inferral cache hits and 57855 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 3619 tilings in it right now.
There were 2003 tilings of which 222 are verified.
There were 1001 SiblingNodes of which 132 are verified.

The function splittings called the partitioning cache *58054* times, (688 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Wed, 24 May 2017 09:48:28

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 593 inferral cache hits and 2253 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2419 tilings in it right now.
There were 1565 tilings of which 101 are verified.
There were 459 SiblingNodes of which 39 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2414* times, (1207 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Wed, 24 May 2017 09:49:28

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 918 inferral cache hits and 35498 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 3534 tilings in it right now.
There were 2230 tilings of which 189 are verified.
There were 692 SiblingNodes of which 101 are verified.

The function splittings called the partitioning cache *35741* times, (707 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Wed, 24 May 2017 09:50:29

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6874 inferral cache hits and 2039 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2325 tilings in it right now.
There were 1329 tilings of which 122 are verified.
There were 426 SiblingNodes of which 46 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2186* times, (1093 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Wed, 24 May 2017 09:51:29

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 12552 inferral cache hits and 28502 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 4357 tilings in it right now.
There were 2394 tilings of which 210 are verified.
There were 745 SiblingNodes of which 106 are verified.

The function splittings called the partitioning cache *28738* times, (664 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Wed, 24 May 2017 09:52:29

Maximum depth fully searched was 7

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 156 inferral cache hits and 1543 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 648 tilings in it right now.
There were 539 tilings of which 190 are verified.
There were 349 SiblingNodes of which 60 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1638* times, (819 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Wed, 24 May 2017 09:53:23

Maximum depth fully searched was 6

Maximum time set at 60 seconds

Total time taken was 53 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 221 inferral cache hits and 30869 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 746 tilings in it right now.
There were 710 tilings of which 312 are verified.
There were 470 SiblingNodes of which 148 are verified.

The function splittings called the partitioning cache *30981* times, (517 originating)
There were 0 cache misses

A proof tree was found in 53 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           ├─────11
                        │           └─────12
                        └─────13
                              ├─────14
                              └─────15
                                    ├─────16
                                    └─────17
                                          ├─────18
                                          ├─────19
                                          └─────20

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 6

+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 7

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|1| |1| | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |1| |1|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 8

+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
3: point

Label: 9

+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|3| |1| | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |1| |1|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|4| |2| | | | |
+-+-+-+-+-+-+-+
| | | | |2| |3|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))

Label: 10

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
3: point

Label: 11

+-+
|1|
+-+
1: point

Label: 12

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))

Label: 13

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av+(Perm((0, 1)))
3: point

Label: 14

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av+(Perm((0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 1)))
3: point

Label: 15

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av+(Perm((0, 1)))
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
4: point

Label: 16

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
3: Av(Perm((0, 1)))
4: point

Label: 17

+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
|2| |1| | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av+(Perm((0, 1)))
3: point

Label: 18

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av+(Perm((0, 1)))
3: point

Label: 19

+-+
|1|
+-+
1: point

Label: 20

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 215, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 216, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 217, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 218, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=3, j=0). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 22, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "A splitting of the tiling", "identifier": 219, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[5, 1]": "point", "[6, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 4]": "point", "[4, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[5, 0]": "point", "[6, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=4)}, {Cell(i=0, j=1): Cell(i=4, j=1), Cell(i=1, j=0): Cell(i=5, j=0), Cell(i=2, j=1): Cell(i=6, j=1)}]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=4, j=0). | Inserting the bottom most point in to the cell Cell(i=4, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1))).", "identifier": 74, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[5, 1]": "point", "[6, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=0). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 220, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 221, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 5]": "point", "[3, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 5]": "point", "[3, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 193, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 6, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 222, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 5]": "point", "[2, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 3]": "point", "[4, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[5, 4]": "point", "[6, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 5]": "point", "[2, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 3]": "point", "[4, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[5, 4]": "point", "[6, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=3): Cell(i=1, j=5), Cell(i=2, j=1): Cell(i=2, j=2), Cell(i=3, j=2): Cell(i=5, j=4), Cell(i=4, j=0): Cell(i=6, j=0)}, {Cell(i=0, j=0): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=4, j=1)}]", "relation": ""}], "formal_step": "Placing the maximum point into row 1", "identifier": 223, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1))).", "identifier": 193, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 79, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1))).", "identifier": 22, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1))).", "identifier": 0, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1))).", "identifier": 6, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}}
