0213_1302_1320_3021

===========================================
Log created Tue, 23 May 2017 05:51:54

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 237 inferral cache hits and 1168 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2074 tilings in it right now.
There were 1143 tilings of which 182 are verified.
There were 503 SiblingNodes of which 54 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1252* times, (626 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 05:52:24

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 29 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 162 inferral cache hits and 23332 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1875 tilings in it right now.
There were 1016 tilings of which 242 are verified.
There were 427 SiblingNodes of which 87 are verified.

The function splittings called the partitioning cache *23398* times, (214 originating)
There were 0 cache misses

A proof tree was found in 29 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)))
2: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 2, 1)))

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|2| | | |4| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |2| | | |3|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((1, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))

Label: 5

+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))

Label: 7

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 2, 1)))

Label: 8

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |4| |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((1, 0)))

Label: 9

+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av(Perm((1, 0)))

Label: 10

+-+-+-+-+-+-+-+
| | | |4| | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
| | | | |3| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |4| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+
| | | | | | | |3| |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 205, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 206, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 201, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 206, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 207, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=3, j=2), Cell(i=2, j=1): Cell(i=4, j=3)}, {Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 208, "in_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 5]": "point", "[4, 6]": "Av(Perm((1, 0)))", "[5, 2]": "point", "[6, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 5]": "point", "[4, 6]": "Av(Perm((1, 0)))", "[5, 2]": "point", "[6, 3]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 209, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 0]": "point", "[2, 5]": "point", "[3, 6]": "Av(Perm((1, 0)))", "[4, 3]": "point", "[5, 4]": "Av(Perm((1, 0)))", "[6, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 0]": "point", "[2, 7]": "point", "[3, 8]": "Av(Perm((1, 0)))", "[4, 5]": "Av(Perm((1, 0)))", "[5, 6]": "point", "[6, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[7, 2]": "Av(Perm((1, 0)))", "[8, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=6, j=2). | The reverse of: Inserting the left most point in to the cell Cell(i=4, j=4). | Inserting the top most point in to the cell Cell(i=4, j=4). | "}], "formal_step": "We perform cell insertion into cell (7, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2))).", "identifier": 210, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 3]": "Av(Perm((1, 0)))", "[4, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 6]": "point", "[4, 7]": "Av(Perm((1, 0)))", "[5, 3]": "point", "[6, 4]": "Av(Perm((1, 0)))", "[7, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=4, j=1). | "}], "formal_step": "We perform cell insertion into cell (5, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2))).", "identifier": 211, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))", "[5, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | The reverse of: Inserting the right most point in to the cell Cell(i=2, j=1). | Inserting the left most point in to the cell Cell(i=2, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 201, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1))).", "identifier": 212, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": ""}}
