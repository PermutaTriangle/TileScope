0213_0231_1230_3120

===========================================
Log created Sun, 11 Jun 2017 13:10:56

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 10196 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 242711 inferral cache hits and 30079 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 92203 tilings in it right now.
There were 30223 tilings of which 1291 are verified.
There were 11930 SiblingNodes of which 721 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *32002* times, (16001 originating)
There were 0 cache misses

No proof tree was found after 10196 seconds

===========================================
Log created Sun, 11 Jun 2017 15:40:07

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 8951 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 195155 inferral cache hits and 25558 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 71411 tilings in it right now.
There were 26320 tilings of which 1357 are verified.
There were 12930 SiblingNodes of which 821 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *27236* times, (13618 originating)
There were 0 cache misses

No proof tree was found after 8951 seconds

===========================================
Log created Sun, 11 Jun 2017 17:41:37

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 7289 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 565575 inferral cache hits and 54776 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 67356 tilings of which 6361 are verified.
There were 14831 SiblingNodes of which 1029 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *58198* times, (29115 originating)
There were 2 cache misses

No proof tree was found after 7289 seconds

===========================================
Log created Sun, 11 Jun 2017 19:57:46

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 8168 seconds

The strategies applied were:
Batch: all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 317423 inferral cache hits and 1795559 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 38758 tilings of which 1805 are verified.
There were 15381 SiblingNodes of which 952 are verified.

The function splittings called the partitioning cache *1798063* times, (10117 originating)
There were 0 cache misses

No proof tree was found after 8168 seconds

===========================================
Log created Mon, 12 Jun 2017 00:45:31

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 17264 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 175630 inferral cache hits and 393492 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 65128 tilings in it right now.
There were 24026 tilings of which 1358 are verified.
There were 12397 SiblingNodes of which 862 are verified.

The function splittings called the partitioning cache *395020* times, (5350 originating)
There were 0 cache misses

No proof tree was found after 17264 seconds

===========================================
Log created Mon, 12 Jun 2017 03:07:28

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 8515 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 271477 inferral cache hits and 852158 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 98342 tilings in it right now.
There were 34393 tilings of which 1859 are verified.
There were 10156 SiblingNodes of which 555 are verified.

The function splittings called the partitioning cache *854184* times, (7737 originating)
There were 0 cache misses

No proof tree was found after 8515 seconds

===========================================
Log created Mon, 12 Jun 2017 05:29:50

Maximum depth fully searched was 5

Maximum time set at 7200 seconds

Total time taken was 8541 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 10156 inferral cache hits and 28867 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 46567 tilings in it right now.
There were 23259 tilings of which 3627 are verified.
There were 9491 SiblingNodes of which 925 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *30660* times, (15330 originating)
There were 0 cache misses

No proof tree was found after 8541 seconds

===========================================
Log created Mon, 12 Jun 2017 08:05:10

Maximum depth fully searched was 5

Maximum time set at 7200 seconds

Total time taken was 9319 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 15254 inferral cache hits and 6021633 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 54673 tilings in it right now.
There were 29548 tilings of which 5482 are verified.
There were 12823 SiblingNodes of which 1489 are verified.

The function splittings called the partitioning cache *6023874* times, (10120 originating)
There were 0 cache misses

No proof tree was found after 9319 seconds

===========================================
Log created Mon, 12 Jun 2017 10:30:15

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 8705 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 15508 inferral cache hits and 52249 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 58905 tilings of which 3477 are verified.
There were 19178 SiblingNodes of which 941 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *55468* times, (27734 originating)
There were 0 cache misses

No proof tree was found after 8705 seconds

===========================================
Log created Mon, 12 Jun 2017 12:52:09

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 8513 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 14036 inferral cache hits and 17334115 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 51395 tilings of which 4296 are verified.
There were 16159 SiblingNodes of which 1094 are verified.

The function splittings called the partitioning cache *17337006* times, (12720 originating)
There were 0 cache misses

No proof tree was found after 8513 seconds

===========================================
Log created Mon, 12 Jun 2017 14:52:56

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 7245 seconds

The strategies applied were:
Batch: all_cell_insertions, all_lrm_and_rlm_placements
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 18260 inferral cache hits and 61138 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 67125 tilings of which 3920 are verified.
There were 21970 SiblingNodes of which 1033 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *64894* times, (32447 originating)
There were 0 cache misses

No proof tree was found after 7245 seconds

===========================================
Log created Mon, 12 Jun 2017 19:23:52

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 16255 seconds

The strategies applied were:
Batch: all_cell_insertions, all_lrm_and_rlm_placements
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 12159 inferral cache hits and 15581300 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 46576 tilings of which 4108 are verified.
There were 14828 SiblingNodes of which 1059 are verified.

The function splittings called the partitioning cache *15583871* times, (11250 originating)
There were 0 cache misses

No proof tree was found after 16255 seconds

===========================================
Log created Tue, 13 Jun 2017 01:09:03

Maximum depth fully searched was 5

Maximum time set at 7200 seconds

Total time taken was 20710 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_lrm_and_rlm_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 18246 inferral cache hits and 42850 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 64550 tilings in it right now.
There were 36613 tilings of which 5996 are verified.
There were 16582 SiblingNodes of which 1802 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *45460* times, (22730 originating)
There were 0 cache misses

No proof tree was found after 20710 seconds

===========================================
Log created Tue, 13 Jun 2017 03:13:08

Maximum depth fully searched was 5

Maximum time set at 7200 seconds

Total time taken was 7444 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_lrm_and_rlm_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 13899 inferral cache hits and 3406922 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 56598 tilings in it right now.
There were 28936 tilings of which 4614 are verified.
There were 11764 SiblingNodes of which 1060 are verified.

The function splittings called the partitioning cache *3409218* times, (10228 originating)
There were 0 cache misses

No proof tree was found after 7444 seconds

===========================================
Log created Tue, 13 Jun 2017 04:34:53

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 4905 seconds

The strategies applied were:
Batch: all_cell_insertions
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 14737 inferral cache hits and 49741 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 56020 tilings of which 4457 are verified.
There were 17485 SiblingNodes of which 1115 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *52818* times, (26409 originating)
There were 0 cache misses

A proof tree was found in 4905 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     │     ├─────10
                        │     │     │     └─────11
                        │     │     │           ├─────12
                        │     │     │           └─────13
                        │     │     └─────14
                        │     │           ├─────15
                        │     │           └─────16
                        │     └─────17
                        └─────18
                              ├─────19
                              │     ├─────20
                              │     │     ├─────21
                              │     │     │     ├─────22
                              │     │     │     │     ├─────23
                              │     │     │     │     └─────24
                              │     │     │     │           ├─────25
                              │     │     │     │           └─────26
                              │     │     │     └─────27
                              │     │     └─────28
                              │     └─────29
                              └─────30

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
|5| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))

Label: 5

+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))

Label: 6

+-+-+-+-+-+
|5| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
|6| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | |5| | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| |3| | |4|
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av(Perm((0, 1)), Perm((1, 0)))
6: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))

Label: 7

+-+-+-+-+-+-+-+-+
|6| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | |5| | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| |3| | |4|
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av(Perm((0, 1)), Perm((1, 0)))
6: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))

Label: 8

+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| |5| | | | | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| |2| |3| | |4|
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| |3| | |4|
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 9

+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | |2| |3| |4|
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 10

+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | |2| |3| | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |5|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((0, 1)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 11

+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |5|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| |3| |4|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+
|1| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
| | |2| |3| |3| | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 12

+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+
|1| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
| | |2| |3| |3| | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | |5| | |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | |2| |3| | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av+(Perm((0, 1)))

Label: 13

+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |4| |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| | |2| |3| |3| |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | |5| | | | |
+-+-+-+-+-+-+-+-+-+
|1| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+
| | | | | | |3| | |
+-+-+-+-+-+-+-+-+-+
| | |2| |3| | | | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av+(Perm((0, 1)))

Label: 14

+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |5|
+-+-+-+-+-+-+-+-+
| | | | | |4| | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| |3| | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |5|
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| |4| | | | | | |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| |2| |3| | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 15

+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |5|
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| |4| | | | | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| |2| |3| | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |6|
+-+-+-+-+-+-+-+
| | | | |5| | |
+-+-+-+-+-+-+-+
| |4| | | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1)), Perm((1, 0)))
5: Av(Perm((1, 0)))
6: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 16

+-+
|1|
+-+
1: point

Label: 17

+-+-+-+-+-+-+-+-+
|5| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| |3| | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))

Label: 18

+-+-+-+-+-+-+-+-+
| | |6| | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | |5| | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| |3| | |4|
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av(Perm((0, 1)), Perm((1, 0)))
6: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+-+
| | | |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+-+
| | | | |5| | | | | | |
+-+-+-+-+-+-+-+-+-+-+-+
|5| | | | | | | |5| | |
+-+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+-+-+
| |5| | | |6| | |3| | |
+-+-+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |3| | |
+-+-+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | | | |
+-+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av(Perm((0, 1)))
6: Av(Perm((0, 1)), Perm((1, 0)))

Label: 19

+-+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | |4| | | | | |
+-+-+-+-+-+-+-+-+-+-+
|4| | | | | | |4| | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+-+
| |4| | | |5| |2| | |
+-+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |3|
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))
5: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+
| | | |4| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+-+
|4| | | | | | |4| |3|
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |5| | | | |
+-+-+-+-+-+-+-+-+-+-+
| |4| | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |3|
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))
5: Av(Perm((0, 1)), Perm((1, 0)))

Label: 20

+-+-+-+-+-+-+-+-+-+
| | | |4| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
|4| | | | | |4| |3|
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
| |4| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |3|
+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+
| | | |4| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+-+
|4| | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+-+
| |4| | | | | |2| |3|
+-+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |3|
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 21

+-+-+-+-+-+-+-+-+-+
| | |4| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
|4| | | | | |2| |3|
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |3|
+-+-+-+-+-+-+-+-+-+
| | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| |2| | | |3| |4|
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 22

+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| |3| |4|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 23

+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| |3| | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 24

+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| |3| |4|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| | |2| |3| |3| |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 25

+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| | |2| | | |3| |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | |2| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
|1| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+
| | |2| | | |3| | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 26

+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| | |2| |3| |4| |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+-+-+
| | | | | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| | | | |
+-+-+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+-+-+-+
|1| | | | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |3| | |
+-+-+-+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+-+-+-+
| | | |2| |3| | | | | | |
+-+-+-+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 27

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 28

+-+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+-+
|5| | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+-+
| |3| | | | | |2| | |
+-+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+
| | | | |5| | | | | |
+-+-+-+-+-+-+-+-+-+-+
|1| | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| |3| | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+-+
| | |3| | | | |2| | |
+-+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av+(Perm((0, 1)))

Label: 29

+-+-+-+-+-+-+-+-+-+-+
| | |3| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |3| | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+-+
|3| | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |3| | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+-+
|1| | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| |3| | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 30

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 5147, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5148, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5149, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5150, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 5]": "point", "[6, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 2]": "Av(Perm((1, 0)))", "[5, 6]": "point", "[6, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=0). | Inserting the left most point in to the cell Cell(i=2, j=0). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5151, "in_tiling": {"[0, 4]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 7]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[6, 6]": "Av(Perm((0, 1)))", "[7, 2]": "point", "[8, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[4, 6]": "Av+(Perm((0, 1)))", "[5, 2]": "point", "[6, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=4, j=6). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5152, "in_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 7]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[6, 3]": "Av+(Perm((0, 1)))", "[6, 6]": "Av(Perm((0, 1)))", "[7, 2]": "point"}, "out_tiling": {"[0, 7]": "point", "[1, 6]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[4, 8]": "Av+(Perm((0, 1)))", "[5, 5]": "point", "[6, 2]": "Av(Perm((1, 0)))", "[7, 4]": "point", "[8, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=6, j=3). | The reverse of: Inserting the right most point in to the cell Cell(i=8, j=2). | The reverse of: Inserting the top most point in to the cell Cell(i=4, j=6). | Inserting the top most point in to the cell Cell(i=6, j=2). | "}], "formal_step": "We perform cell insertion into cell (6, 3); either it is empty or Av+(Perm((0, 1))).", "identifier": 5153, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 4]": "point", "[5, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[5, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 8]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[6, 3]": "Av(Perm((0, 1)))", "[6, 7]": "Av(Perm((0, 1)))", "[7, 2]": "point", "[8, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=5, j=1). | "}], "formal_step": "We perform cell insertion into cell (6, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 5154, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 5]": "point", "[6, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[6, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 5]": "point", "[6, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[6, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5155, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 4]": "Av(Perm((1, 0)))", "[5, 6]": "point", "[6, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[3, 1]": "point", "[4, 5]": "Av(Perm((1, 0)))", "[5, 7]": "point", "[6, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | Inserting the right most point in to the cell Cell(i=1, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=4, j=4)]", "identifier": 5156, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 4]": "Av+(Perm((1, 0)))", "[6, 6]": "point", "[7, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 4]": "point", "[5, 5]": "Av(Perm((1, 0)))", "[6, 7]": "point", "[7, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=1, j=3): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=1): Cell(i=3, j=1), Cell(i=4, j=4): Cell(i=5, j=5), Cell(i=5, j=6): Cell(i=6, j=7), Cell(i=6, j=5): Cell(i=7, j=6)}, {Cell(i=0, j=0): Cell(i=4, j=4)}]", "relation": "| Inserting the top most point in to the cell Cell(i=5, j=4). | The reverse of: Inserting the top most point in to the cell Cell(i=0, j=1). | Inserting the left most point in to the cell Cell(i=0, j=1). | The reverse of: Inserting the top most point in to the cell Cell(i=4, j=4). | Inserting the bottom most point in to the cell Cell(i=4, j=4). | "}], "formal_step": "We perform cell insertion into cell (5, 4); either it is empty or Av+(Perm((1, 0))).", "identifier": 4279, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 4]": "Av(Perm((1, 0)))", "[5, 6]": "point", "[6, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[6, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 4]": "Av(Perm((1, 0)))", "[6, 6]": "point", "[7, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[7, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=1). | Inserting the top most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5157, "in_tiling": {"[0, 6]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 3]": "Av(Perm((1, 0)))", "[6, 5]": "point", "[7, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 6]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 3]": "Av(Perm((1, 0)))", "[6, 5]": "point", "[7, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 7); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 0, 1))).", "identifier": 5158, "in_tiling": {"[0, 7]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 4]": "Av(Perm((1, 0)))", "[6, 6]": "point", "[7, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[7, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 7]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 4]": "Av(Perm((1, 0)))", "[6, 6]": "point", "[7, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[7, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5159, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5160, "in_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 7]": "Av(Perm((0, 1)))", "[5, 6]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[6, 3]": "Av(Perm((0, 1)))", "[7, 2]": "point"}, "out_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 7]": "Av(Perm((0, 1)))", "[5, 6]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[7, 3]": "point", "[8, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=5, j=1). | Inserting the top most point in to the cell Cell(i=5, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5161, "in_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))", "[4, 7]": "Av(Perm((0, 1)))", "[5, 6]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[6, 3]": "Av(Perm((0, 1)))", "[7, 2]": "point"}, "out_tiling": {"[0, 7]": "point", "[1, 6]": "Av(Perm((0, 1)))", "[10, 5]": "point", "[11, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 3]": "Av(Perm((0, 1)))", "[3, 1]": "Av(Perm((0, 1)))", "[4, 0]": "point", "[5, 10]": "Av(Perm((0, 1)))", "[5, 1]": "Av(Perm((1, 0)))", "[6, 2]": "point", "[7, 9]": "Av(Perm((0, 1)))", "[8, 8]": "point", "[9, 3]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=1). | The reverse of: Inserting the right most point in to the cell Cell(i=8, j=3). | Inserting the top most point in to the cell Cell(i=8, j=3). | "}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((1, 0))).", "identifier": 5162, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[3, 4]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[4, 7]": "Av(Perm((0, 1)))", "[5, 6]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[6, 3]": "Av(Perm((0, 1)))", "[7, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=5, j=1). | "}], "formal_step": "We perform cell insertion into cell (5, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 5163, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[5, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[5, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 37, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=2, j=7), Cell(i=3, j=6)]", "identifier": 5164, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 7]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 0]": "point", "[5, 1]": "Av(Perm((1, 0)))", "[6, 4]": "Av(Perm((1, 0)))", "[7, 5]": "point", "[8, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[8, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 7]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 0]": "point", "[5, 1]": "Av(Perm((1, 0)))", "[5, 5]": "Av(Perm((0, 1)))", "[6, 3]": "point", "[7, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[7, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=0): Cell(i=4, j=0), Cell(i=3, j=1): Cell(i=5, j=1), Cell(i=3, j=5): Cell(i=5, j=5), Cell(i=4, j=3): Cell(i=6, j=3), Cell(i=5, j=1): Cell(i=7, j=1), Cell(i=5, j=4): Cell(i=7, j=4)}, {Cell(i=0, j=1): Cell(i=2, j=7), Cell(i=1, j=0): Cell(i=3, j=6)}]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=1). | Inserting the top most point in to the cell Cell(i=0, j=1). | The reverse of: Inserting the top most point in to the cell Cell(i=5, j=3). | Inserting the bottom most point in to the cell Cell(i=5, j=3). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5165, "in_tiling": {"[0, 6]": "Av+(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 8]": "Av(Perm((0, 1)))", "[4, 7]": "point", "[5, 0]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[7, 3]": "Av(Perm((1, 0)))", "[8, 5]": "point", "[9, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 7]": "point", "[1, 6]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 8]": "Av+(Perm((0, 1)))", "[5, 0]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[7, 3]": "Av(Perm((1, 0)))", "[8, 5]": "point", "[9, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=3, j=7). | Inserting the top most point in to the cell Cell(i=0, j=6). | "}], "formal_step": "We perform cell insertion into cell (0, 6); either it is empty or Av+(Perm((0, 1))).", "identifier": 5166, "in_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 8]": "Av(Perm((0, 1)))", "[4, 7]": "point", "[5, 0]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[6, 6]": "Av(Perm((0, 1)))", "[7, 5]": "point", "[8, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[8, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 8]": "Av(Perm((0, 1)))", "[4, 7]": "point", "[5, 0]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[7, 4]": "Av(Perm((1, 0)))", "[8, 5]": "point", "[9, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[9, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=5, j=3). | Inserting the top most point in to the cell Cell(i=5, j=3). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5167, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 9]": "Av(Perm((0, 1)))", "[3, 8]": "point", "[4, 4]": "point", "[5, 0]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[7, 7]": "Av(Perm((0, 1)))", "[8, 5]": "point", "[9, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 9]": "point", "[3, 8]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "point", "[6, 1]": "Av(Perm((1, 0)))", "[7, 7]": "Av(Perm((0, 1)))", "[8, 5]": "point", "[9, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=8). | Inserting the top most point in to the cell Cell(i=2, j=8). | The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=2). | Inserting the top most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (5, 5); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 2668, "in_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 8]": "point", "[4, 7]": "Av(Perm((0, 1)))", "[5, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[6, 0]": "point", "[7, 1]": "Av(Perm((1, 0)))", "[7, 4]": "Av(Perm((1, 0)))", "[7, 6]": "Av(Perm((0, 1)))", "[8, 5]": "point", "[9, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 7]": "Av(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 9]": "Av(Perm((0, 1)))", "[4, 8]": "point", "[5, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[6, 0]": "point", "[7, 1]": "Av(Perm((1, 0)))", "[7, 7]": "Av(Perm((0, 1)))", "[8, 6]": "point", "[9, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[9, 7]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=5, j=3). | Inserting the bottom most point in to the cell Cell(i=5, j=3). | The reverse of: Inserting the top most point in to the cell Cell(i=3, j=8). | Inserting the bottom most point in to the cell Cell(i=3, j=8). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 110, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=7, j=0)]", "identifier": 5168, "in_tiling": {"[0, 7]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 8]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 4]": "Av(Perm((1, 0)))", "[6, 6]": "point", "[7, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[7, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 7]": "Av(Perm((0, 1)))", "[1, 5]": "Av(Perm((0, 1)))", "[10, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 4]": "point", "[3, 9]": "point", "[4, 8]": "Av(Perm((0, 1)))", "[5, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[6, 1]": "point", "[7, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[8, 2]": "Av(Perm((1, 0)))", "[8, 5]": "Av(Perm((1, 0)))", "[8, 7]": "Av(Perm((0, 1)))", "[9, 6]": "point"}, "recurse": "[{Cell(i=0, j=6): Cell(i=0, j=7), Cell(i=1, j=4): Cell(i=1, j=5), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=8): Cell(i=3, j=9), Cell(i=4, j=7): Cell(i=4, j=8), Cell(i=5, j=4): Cell(i=5, j=5), Cell(i=6, j=0): Cell(i=6, j=1), Cell(i=7, j=1): Cell(i=8, j=2), Cell(i=7, j=4): Cell(i=8, j=5), Cell(i=7, j=6): Cell(i=8, j=7), Cell(i=8, j=5): Cell(i=9, j=6), Cell(i=9, j=2): Cell(i=10, j=3)}, {Cell(i=0, j=0): Cell(i=7, j=0)}]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=8). | The reverse of: Inserting the top most point in to the cell Cell(i=1, j=1). | Inserting the bottom most point in to the cell Cell(i=1, j=1). | The reverse of: Inserting the top most point in to the cell Cell(i=6, j=3). | Inserting the right most point in to the cell Cell(i=6, j=3). | The reverse of: Inserting the bottom most point in to the cell Cell(i=4, j=0). | Inserting the left most point in to the cell Cell(i=4, j=0). | "}], "formal_step": "We perform cell insertion into cell (2, 8); either it is empty or Av+(Perm((0, 1))).", "identifier": 3184, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 7]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 8]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 4]": "Av(Perm((1, 0)))", "[6, 6]": "point", "[7, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[7, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 5169, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | The reverse of: Inserting the right most point in to the cell Cell(i=2, j=1). | Inserting the top most point in to the cell Cell(i=2, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0))).", "identifier": 350, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0))).", "identifier": 5170, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
