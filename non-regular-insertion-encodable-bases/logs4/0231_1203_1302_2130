0231_1203_1302_2130

===========================================
Log created Tue, 23 May 2017 08:59:59

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 210 inferral cache hits and 1138 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2004 tilings in it right now.
There were 1031 tilings of which 108 are verified.
There were 439 SiblingNodes of which 52 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1220* times, (610 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 09:00:24

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 24 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 146 inferral cache hits and 15866 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1688 tilings in it right now.
There were 865 tilings of which 168 are verified.
There were 349 SiblingNodes of which 64 are verified.

The function splittings called the partitioning cache *15929* times, (202 originating)
There were 0 cache misses

A proof tree was found in 24 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((1, 2, 0)))
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 2, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((1, 2, 0)))
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((1, 2, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))

Label: 5

+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((1, 2, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))

Label: 6

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 2, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))

Label: 7

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 2, 0)))
2: point

Label: 8

+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((1, 2, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
|5| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | |4| | | | |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((1, 2, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))
5: Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))

Label: 9

+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))

Label: 10

+-+-+-+-+-+-+-+
|5| | | | | | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: Av(Perm((1, 2, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))
5: Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
|6| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | |5| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |4| | |
+-+-+-+-+-+-+-+-+-+
| | | | |3| | | | |
+-+-+-+-+-+-+-+-+-+
| | | |2| | | | | |
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((1, 2, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
5: Av(Perm((0, 1)))
6: Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 84, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 85, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 8, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))", "[0, 2]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 15, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 86, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))", "[0, 4]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[3, 2]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))", "[0, 4]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[3, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=4), Cell(i=1, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=1): Cell(i=1, j=3), Cell(i=1, j=0): Cell(i=2, j=1)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 87, "in_tiling": {"[0, 6]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((1, 2, 0)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 1]": "Av(Perm((1, 2, 0)))", "[6, 2]": "point"}, "out_tiling": {"[0, 6]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((1, 2, 0)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 1]": "Av(Perm((1, 2, 0)))", "[6, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 88, "in_tiling": {"[0, 6]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 2]": "point", "[2, 5]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[5, 0]": "Av(Perm((1, 2, 0)))", "[6, 1]": "point"}, "out_tiling": {"[0, 8]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 2]": "point", "[2, 7]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 4]": "Av(Perm((1, 0)))", "[5, 6]": "point", "[6, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[7, 0]": "Av(Perm((1, 2, 0)))", "[8, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=4). | "}], "formal_step": "We perform cell insertion into cell (5, 5); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 89, "in_tiling": {"[0, 4]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((1, 2, 0)))", "[2, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 7]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((1, 2, 0)))", "[3, 6]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[6, 1]": "Av(Perm((1, 2, 0)))", "[7, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=3). | "}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 90, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))", "[0, 5]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=2, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=0, j=2). | Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0))).", "identifier": 8, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0))).", "identifier": 91, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}}
