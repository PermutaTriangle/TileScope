0132_1320_2301_3021

===========================================
Log created Thu, 25 May 2017 01:50:56

Maximum depth fully searched was 5

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1161 inferral cache hits and 3244 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 4625 tilings in it right now.
There were 2271 tilings of which 412 are verified.
There were 857 SiblingNodes of which 88 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *3470* times, (1743 originating)
There were 1 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 01:51:56

Maximum depth fully searched was 5

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1043 inferral cache hits and 91827 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 5168 tilings in it right now.
There were 2376 tilings of which 482 are verified.
There were 884 SiblingNodes of which 88 are verified.

The function splittings called the partitioning cache *92066* times, (851 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 01:52:56

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 860 inferral cache hits and 2399 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 3458 tilings in it right now.
There were 1876 tilings of which 270 are verified.
There were 446 SiblingNodes of which 42 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2570* times, (1285 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 01:53:56

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1416 inferral cache hits and 39844 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 5314 tilings in it right now.
There were 2852 tilings of which 265 are verified.
There were 668 SiblingNodes of which 53 are verified.

The function splittings called the partitioning cache *40148* times, (885 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 01:54:57

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 8875 inferral cache hits and 2479 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 3470 tilings in it right now.
There were 1704 tilings of which 99 are verified.
There were 484 SiblingNodes of which 48 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2660* times, (1330 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 01:55:57

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 17170 inferral cache hits and 38995 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 5985 tilings in it right now.
There were 2905 tilings of which 420 are verified.
There were 683 SiblingNodes of which 64 are verified.

The function splittings called the partitioning cache *39274* times, (811 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 01:56:57

Maximum depth fully searched was 8

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 453 inferral cache hits and 1769 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1553 tilings in it right now.
There were 1232 tilings of which 504 are verified.
There were 562 SiblingNodes of which 86 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1874* times, (937 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 01:57:39

Maximum depth fully searched was 7

Maximum time set at 60 seconds

Total time taken was 42 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 352 inferral cache hits and 122454 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1365 tilings in it right now.
There were 1084 tilings of which 463 are verified.
There were 542 SiblingNodes of which 137 are verified.

The function splittings called the partitioning cache *122567* times, (507 originating)
There were 0 cache misses

A proof tree was found in 42 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     └─────11
                        │           ├─────12
                        │           │     ├─────13
                        │           │     │     ├─────14
                        │           │     │     └─────15
                        │           │     └─────16
                        │           └─────17
                        │                 ├─────18
                        │                 └─────19
                        └─────20
                              ├─────21
                              └─────22

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
3: point

Label: 7

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 8

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 9

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 10

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 11

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 12

+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | |5| | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
|2| | | | | |3|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((0, 1)), Perm((1, 0)))
5: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 13

+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
|2| | | | |3|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 14

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 15

+-+
|1|
+-+
1: point

Label: 16

+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 17

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 18

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 19

+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 20

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
|3| |4| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))

Label: 21

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|3| |4| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| |1| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))

Label: 22

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 313, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 314, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 315, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 316, "in_tiling": {"[0, 0]": "point", "[1, 4]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=2, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 317, "in_tiling": {"[0, 0]": "point", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1))).", "identifier": 318, "in_tiling": {"[0, 0]": "point", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[2, 5]": "point", "[3, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 3]": "point", "[5, 1]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=1). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 312, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 319, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 4]": "point", "[5, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[4, 4]": "point", "[5, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=3): Cell(i=4, j=4), Cell(i=4, j=1): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 320, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 5]": "Av(Perm((1, 0)))", "[5, 6]": "point", "[6, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 5]": "Av(Perm((1, 0)))", "[5, 6]": "point", "[6, 3]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 321, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[5, 5]": "point", "[6, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 4]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[5, 5]": "point", "[6, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 322, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 5]": "point", "[4, 1]": "point", "[5, 4]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 5]": "point", "[4, 1]": "point", "[5, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=2). | Inserting the top most point in to the cell Cell(i=0, j=2). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 323, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 4]": "Av+(Perm((1, 0)))", "[4, 5]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "Av+(Perm((1, 0)))", "[4, 5]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=2). | Inserting the top most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (3, 5); either it is empty or Av+(Perm((1, 0))).", "identifier": 324, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((1, 0)))", "[3, 5]": "point", "[4, 1]": "point", "[5, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 5]": "Av(Perm((1, 0)))", "[4, 6]": "point", "[5, 1]": "point", "[6, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "Placing the minimum point into row 1", "identifier": 325, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 312, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 326, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0)))", "[3, 4]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 0]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 327, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 5]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 0]": "point", "[5, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 6]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 0]": "point", "[5, 4]": "Av(Perm((1, 0)))", "[6, 5]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=5, j=4). | "}], "formal_step": "We perform cell insertion into cell (6, 4); either it is empty or Av+(Perm((1, 0))).", "identifier": 328, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0)))", "[3, 5]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 0]": "point", "[6, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "Placing the minimum point into row 0", "identifier": 329, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1))).", "identifier": 330, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1))).", "identifier": 331, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1))).", "identifier": 332, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 2, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": ""}}
