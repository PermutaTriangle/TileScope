0231_1230_2031_2301

===========================================
Log created Sat, 27 May 2017 08:56:02

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 970 inferral cache hits and 4359 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 5567 tilings in it right now.
There were 3237 tilings of which 390 are verified.
There were 1586 SiblingNodes of which 142 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4656* times, (2328 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sat, 27 May 2017 08:58:04

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 122 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 799 inferral cache hits and 179288 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 4840 tilings in it right now.
There were 2959 tilings of which 366 are verified.
There were 1494 SiblingNodes of which 206 are verified.

The function splittings called the partitioning cache *179520* times, (850 originating)
There were 0 cache misses

No proof tree was found after 122 seconds

===========================================
Log created Sat, 27 May 2017 09:00:05

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1156 inferral cache hits and 3865 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 4070 tilings in it right now.
There were 2867 tilings of which 231 are verified.
There were 869 SiblingNodes of which 75 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4136* times, (2068 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sat, 27 May 2017 09:02:05

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1651 inferral cache hits and 79978 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 5736 tilings in it right now.
There were 3972 tilings of which 344 are verified.
There were 1264 SiblingNodes of which 160 are verified.

The function splittings called the partitioning cache *80346* times, (1161 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sat, 27 May 2017 09:04:05

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 16616 inferral cache hits and 3844 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 5193 tilings in it right now.
There were 3027 tilings of which 252 are verified.
There were 885 SiblingNodes of which 77 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *4114* times, (2057 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sat, 27 May 2017 09:06:05

Maximum depth fully searched was 3

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 22751 inferral cache hits and 65197 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 7196 tilings in it right now.
There were 4214 tilings of which 456 are verified.
There were 1263 SiblingNodes of which 170 are verified.

The function splittings called the partitioning cache *65570* times, (1137 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sat, 27 May 2017 09:08:07

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 121 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 103 inferral cache hits and 1750 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 891 tilings in it right now.
There were 739 tilings of which 237 are verified.
There were 475 SiblingNodes of which 69 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1854* times, (927 originating)
There were 0 cache misses

No proof tree was found after 121 seconds

===========================================
Log created Sat, 27 May 2017 09:10:13

Maximum depth fully searched was 6

Maximum time set at 120 seconds

Total time taken was 126 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 113 inferral cache hits and 67951 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 650 tilings in it right now.
There were 675 tilings of which 228 are verified.
There were 495 SiblingNodes of which 128 are verified.

The function splittings called the partitioning cache *68030* times, (340 originating)
There were 0 cache misses

No proof tree was found after 126 seconds

===========================================
Log created Sat, 27 May 2017 09:12:14

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 121 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 233 inferral cache hits and 1597 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 502 tilings in it right now.
There were 420 tilings of which 104 are verified.
There were 102 SiblingNodes of which 30 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1708* times, (854 originating)
There were 0 cache misses

No proof tree was found after 121 seconds

===========================================
Log created Sat, 27 May 2017 09:14:26

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 131 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 909 inferral cache hits and 10039 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1683 tilings in it right now.
There were 1317 tilings of which 353 are verified.
There were 261 SiblingNodes of which 69 are verified.

The function splittings called the partitioning cache *10308* times, (730 originating)
There were 0 cache misses

No proof tree was found after 131 seconds

===========================================
Log created Sat, 27 May 2017 09:16:28

Maximum depth fully searched was 8

Maximum time set at 120 seconds

Total time taken was 121 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 23 inferral cache hits and 716 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 157 tilings in it right now.
There were 152 tilings of which 55 are verified.
There were 118 SiblingNodes of which 22 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *758* times, (379 originating)
There were 0 cache misses

No proof tree was found after 121 seconds

===========================================
Log created Sat, 27 May 2017 09:19:42

Maximum depth fully searched was 9

Maximum time set at 120 seconds

Total time taken was 193 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 43 inferral cache hits and 10031 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 270 tilings in it right now.
There were 235 tilings of which 94 are verified.
There were 180 SiblingNodes of which 40 are verified.

The function splittings called the partitioning cache *10099* times, (367 originating)
There were 0 cache misses

No proof tree was found after 193 seconds

===========================================
Log created Sat, 27 May 2017 09:21:45

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 121 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 159 inferral cache hits and 1171 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 290 tilings in it right now.
There were 258 tilings of which 35 are verified.
There were 58 SiblingNodes of which 16 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1252* times, (626 originating)
There were 0 cache misses

No proof tree was found after 121 seconds

===========================================
Log created Sat, 27 May 2017 09:23:49

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 123 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 429 inferral cache hits and 6091 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 807 tilings in it right now.
There were 619 tilings of which 97 are verified.
There were 141 SiblingNodes of which 34 are verified.

The function splittings called the partitioning cache *6293* times, (523 originating)
There were 0 cache misses

No proof tree was found after 123 seconds

===========================================
Log created Sat, 27 May 2017 09:25:50

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 136 inferral cache hits and 2616 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 1118 tilings in it right now.
There were 1184 tilings of which 256 are verified.
There were 872 SiblingNodes of which 84 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2766* times, (1383 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sat, 27 May 2017 09:27:50

Maximum depth fully searched was 6

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 42 inferral cache hits and 31601 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 486 tilings in it right now.
There were 459 tilings of which 145 are verified.
There were 345 SiblingNodes of which 81 are verified.

The function splittings called the partitioning cache *31663* times, (281 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sat, 27 May 2017 09:29:51

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 121 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 314 inferral cache hits and 1745 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 519 tilings in it right now.
There were 471 tilings of which 66 are verified.
There were 111 SiblingNodes of which 26 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1864* times, (932 originating)
There were 0 cache misses

No proof tree was found after 121 seconds

===========================================
Log created Sat, 27 May 2017 09:31:52

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 747 inferral cache hits and 8162 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 1307 tilings in it right now.
There were 1050 tilings of which 264 are verified.
There were 214 SiblingNodes of which 58 are verified.

The function splittings called the partitioning cache *8403* times, (696 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sat, 27 May 2017 09:33:46

Maximum depth fully searched was 7

Maximum time set at 120 seconds

Total time taken was 114 seconds

The strategies applied were:
Batch: all_cell_insertions, all_leftmost_column_placements
Equivalent: all_equivalent_leftmost_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 157 inferral cache hits and 1669 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 727 tilings in it right now.
There were 1127 tilings of which 218 are verified.
There were 920 SiblingNodes of which 108 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1760* times, (880 originating)
There were 0 cache misses

A proof tree was found in 114 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        │                 ├─────14
                        │                 ├─────15
                        │                 ├─────16
                        │                 ├─────17
                        │                 └─────18
                        └─────19
                              ├─────20
                              └─────21
                                    ├─────22
                                    │     ├─────23
                                    │     └─────24
                                    │           ├─────25
                                    │           └─────26
                                    └─────27
                                          ├─────28
                                          ├─────29
                                          └─────30

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 2, 0)))

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point

Label: 6

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 2, 0)))

Label: 7

+-+-+-+
| | |4|
+-+-+-+
|2| | |
+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 2, 0)))
4: Av+(Perm((1, 2, 0)))

Label: 8

+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 2, 0)))
3: Av+(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 2, 0)))

Label: 9

+-+-+-+
| | |4|
+-+-+-+
|2| | |
+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 2, 0)))
4: Av+(Perm((1, 2, 0)))

Label: 10

+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 2, 0)))

Label: 11

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 2, 0)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 2, 0)))
4: Av(Perm((1, 2, 0)))

Label: 14

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 2, 0)))

Label: 15

+-+
|1|
+-+
1: point

Label: 16

+-+
|1|
+-+
1: point

Label: 17

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)))

Label: 18

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)))

Label: 19

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 20

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 21

+-+-+-+-+
| | | |4|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((1, 2, 0)))
4: Av(Perm((1, 2, 0)))

Label: 22

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((1, 2, 0)))
4: Av(Perm((1, 2, 0)))

Label: 23

+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 2, 0)))
3: Av(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 2, 0)))

Label: 24

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((1, 2, 0)))
4: Av(Perm((1, 2, 0)))

Label: 25

+-+-+-+-+
| | | |4|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((1, 2, 0)))
4: Av(Perm((1, 2, 0)))

Label: 26

+-+
|1|
+-+
1: point

Label: 27

+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 28

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 29

+-+
|1|
+-+
1: point

Label: 30

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 804, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 805, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 806, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 807, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[3, 3]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[3, 4]": "point", "[4, 3]": "Av(Perm((1, 2, 0)))", "[5, 5]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=3, j=3). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 34, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1)]", "identifier": 808, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[2, 3]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[2, 3]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 34, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=3), Cell(i=3, j=5), Cell(i=4, j=4), Cell(i=5, j=6)]", "identifier": 197, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av+(Perm((1, 2, 0)))", "[3, 4]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av+(Perm((1, 2, 0)))", "[3, 5]": "point", "[4, 4]": "Av(Perm((1, 2, 0)))", "[5, 6]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=3)}, {Cell(i=0, j=0): Cell(i=3, j=5)}, {Cell(i=0, j=0): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=5, j=6)}]", "relation": "| Inserting the left most point in to the cell Cell(i=3, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 2, 0))).", "identifier": 809, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1))).", "identifier": 189, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 810, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 3]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 4]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 811, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 2, 0)))", "[4, 4]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 5]": "point", "[2, 0]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((1, 2, 0)))", "[5, 4]": "Av(Perm((1, 2, 0)))", "[6, 6]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=3, j=2). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 115, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=1)]", "identifier": 812, "in_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 3]": "Av+(Perm((1, 2, 0)))", "[4, 5]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 3]": "Av+(Perm((1, 2, 0)))", "[4, 5]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=3): Cell(i=1, j=4), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=4): Cell(i=4, j=5)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 693, "in_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 3]": "Av+(Perm((1, 2, 0)))", "[4, 5]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 3]": "Av+(Perm((1, 2, 0)))", "[4, 5]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 32, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=5), Cell(i=4, j=4)]", "identifier": 771, "in_tiling": {"[0, 1]": "point", "[1, 5]": "point", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 2]": "Av(Perm((1, 2, 0)))", "[4, 4]": "Av(Perm((1, 2, 0)))", "[5, 6]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 5]": "point", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 2]": "Av(Perm((1, 2, 0)))", "[4, 4]": "Av(Perm((1, 2, 0)))", "[5, 6]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=3): Cell(i=2, j=3), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=3, j=2), Cell(i=3, j=4): Cell(i=5, j=6)}, {Cell(i=0, j=0): Cell(i=1, j=5)}, {Cell(i=0, j=0): Cell(i=4, j=4)}]", "relation": ""}], "formal_step": "Placing the leftmost point into column 2", "identifier": 115, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 2, 0))).", "identifier": 32, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the leftmost point into column 1", "identifier": 34, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((1, 2, 0))).", "identifier": 813, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1))).", "identifier": 814, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1))).", "identifier": 815, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}}
