0213_1230_2301_3012

===========================================
Log created Fri, 02 Jun 2017 18:13:58

Maximum depth fully searched was 5

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 15779 inferral cache hits and 27613 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 34700 tilings in it right now.
There were 18408 tilings of which 2711 are verified.
There were 7509 SiblingNodes of which 869 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *29320* times, (14660 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Fri, 02 Jun 2017 18:23:59

Maximum depth fully searched was 5

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_321_boundaries
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 13328 inferral cache hits and 1813868 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 34376 tilings in it right now.
There were 17094 tilings of which 2389 are verified.
There were 6677 SiblingNodes of which 756 are verified.

The function splittings called the partitioning cache *1815556* times, (7237 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Fri, 02 Jun 2017 18:33:59

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 3210 inferral cache hits and 14544 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 34866 tilings in it right now.
There were 13653 tilings of which 722 are verified.
There were 4546 SiblingNodes of which 245 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *15496* times, (7748 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Fri, 02 Jun 2017 18:44:00

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_321_boundaries
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 2761 inferral cache hits and 3524265 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 31999 tilings in it right now.
There were 12617 tilings of which 536 are verified.
There were 4360 SiblingNodes of which 238 are verified.

The function splittings called the partitioning cache *3525123* times, (3352 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Fri, 02 Jun 2017 18:54:01

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_lrm_and_rlm_placements
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4070 inferral cache hits and 15662 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 36152 tilings in it right now.
There were 14167 tilings of which 730 are verified.
There were 4446 SiblingNodes of which 258 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *16678* times, (8339 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Fri, 02 Jun 2017 19:04:02

Maximum depth fully searched was 4

Maximum time set at 600 seconds

Total time taken was 601 seconds

The strategies applied were:
Batch: all_cell_insertions, all_lrm_and_rlm_placements
Equivalent: all_point_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 2896 inferral cache hits and 4509195 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 31638 tilings in it right now.
There were 12781 tilings of which 692 are verified.
There were 4386 SiblingNodes of which 244 are verified.

The function splittings called the partitioning cache *4510044* times, (3273 originating)
There were 0 cache misses

No proof tree was found after 601 seconds

===========================================
Log created Fri, 02 Jun 2017 19:14:03

Maximum depth fully searched was 5

Maximum time set at 600 seconds

Total time taken was 600 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_lrm_and_rlm_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 14802 inferral cache hits and 27990 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 36274 tilings in it right now.
There were 18072 tilings of which 2933 are verified.
There were 6859 SiblingNodes of which 771 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *29728* times, (14864 originating)
There were 0 cache misses

No proof tree was found after 600 seconds

===========================================
Log created Fri, 02 Jun 2017 19:23:15

Maximum depth fully searched was 5

Maximum time set at 600 seconds

Total time taken was 551 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements, all_lrm_and_rlm_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 12444 inferral cache hits and 1618317 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 31479 tilings in it right now.
There were 16019 tilings of which 2255 are verified.
There were 6362 SiblingNodes of which 724 are verified.

The function splittings called the partitioning cache *1619904* times, (6800 originating)
There were 0 cache misses

A proof tree was found in 551 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     └─────9
                  │           ├─────10
                  │           └─────11
                  │                 ├─────12
                  │                 │     ├─────13
                  │                 │     └─────14
                  │                 └─────15
                  └─────16
                        ├─────17
                        │     ├─────18
                        │     └─────19
                        │           ├─────20
                        │           └─────21
                        │                 ├─────22
                        │                 └─────23
                        └─────24
                              ├─────25
                              │     ├─────26
                              │     └─────27
                              └─────28
                                    ├─────29
                                    └─────30

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|3| | |4|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 5

+-+-+-+-+
|3| | |4|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 6

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 7

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 8

+-+
|1|
+-+
1: point

Label: 9

+-+-+-+-+
|3| | |4|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|2| | |2| |3| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 10

+-+-+-+-+-+-+
|2| | |2| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 11

+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | | |4| | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))

Label: 12

+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | | |4| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))

Label: 13

+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 14

+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 15

+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | |2| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 16

+-+-+-+-+-+
|4| | |5| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 17

+-+-+-+-+
|4| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))

Label: 18

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 19

+-+-+-+-+
|4| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))

Label: 20

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 21

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|2| | |2| | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 22

+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 23

+-+-+-+-+-+-+-+-+
|2| | | |3| | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+-+
| |2| | | | |2| | | |
+-+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | |2| | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 24

+-+-+-+-+-+
|4| | |5| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
5: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+-+
| | | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |4| | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | |3| |
+-+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 25

+-+-+-+-+-+-+-+-+-+
| | | | | | |4| | |
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |3| |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | |5| | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |4| |
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 26

+-+-+-+-+-+-+-+
| | | | | |5| |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))

Label: 27

+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 28

+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |1| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| |2| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))

Label: 29

+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))

Label: 30

+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2841, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2842, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 117, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 2843, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2844, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2845, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 6]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[5, 4]": "point", "[6, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=4, j=4). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2846, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 6]": "Av+(Perm((0, 1)))", "[4, 1]": "point", "[5, 5]": "Av(Perm((0, 1)))", "[6, 4]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 7]": "point", "[4, 6]": "Av(Perm((0, 1)))", "[5, 1]": "point", "[6, 5]": "Av(Perm((0, 1)))", "[7, 4]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=2). | Inserting the top most point in to the cell Cell(i=0, j=2). | Inserting the top most point in to the cell Cell(i=3, j=6). | "}], "formal_step": "We perform cell insertion into cell (3, 7); either it is empty or Av+(Perm((0, 1))).", "identifier": 2847, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 7]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 4]": "Av(Perm((1, 0)))", "[5, 6]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[6, 5]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 7]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 6]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[6, 4]": "point", "[7, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=5, j=4). | Inserting the bottom most point in to the cell Cell(i=5, j=4). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2848, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 7]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 6]": "Av(Perm((0, 1)))", "[6, 5]": "point", "[7, 1]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 1)))", "[1, 4]": "point", "[2, 0]": "point", "[3, 8]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 7]": "point", "[6, 6]": "Av(Perm((0, 1)))", "[7, 2]": "point", "[8, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=5, j=5). | Inserting the top most point in to the cell Cell(i=5, j=5). | Inserting the top most point in to the cell Cell(i=7, j=1). | "}], "formal_step": "We perform cell insertion into cell (7, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 2849, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 6]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 5]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[6, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 8]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 5]": "Av(Perm((1, 0)))", "[5, 7]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[6, 6]": "point", "[7, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=5, j=5). | "}], "formal_step": "We perform cell insertion into cell (5, 4); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2))).", "identifier": 2850, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av+(Perm((0, 1)))", "[3, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 4]": "Av(Perm((0, 1)))", "[4, 2]": "point", "[5, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[6, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=1). | "}], "formal_step": "We perform cell insertion into cell (3, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 2851, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[3, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[3, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2852, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "point", "[4, 3]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2853, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 5]": "Av+(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "point", "[4, 3]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[1, 7]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 5]": "point", "[5, 0]": "point", "[6, 4]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=5). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2854, "in_tiling": {"[0, 7]": "Av(Perm((0, 1)))", "[1, 6]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "point", "[6, 3]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 7]": "Av(Perm((0, 1)))", "[1, 6]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "point", "[6, 3]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2855, "in_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 5]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 6]": "Av+(Perm((0, 1)))", "[5, 4]": "Av(Perm((0, 1)))", "[6, 3]": "point", "[7, 0]": "point"}, "out_tiling": {"[0, 8]": "Av(Perm((0, 1)))", "[1, 6]": "Av(Perm((0, 1)))", "[2, 5]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 7]": "point", "[6, 6]": "Av(Perm((0, 1)))", "[7, 4]": "Av(Perm((0, 1)))", "[8, 3]": "point", "[9, 0]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=6). | "}], "formal_step": "We perform cell insertion into cell (3, 7); either it is empty or Av+(Perm((0, 1))).", "identifier": 2856, "in_tiling": {"[0, 5]": "point", "[1, 1]": "Av+(Perm((0, 1)))", "[1, 4]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 6]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "point", "[4, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 7]": "Av(Perm((0, 1)))", "[1, 6]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[3, 5]": "Av(Perm((0, 1)))", "[3, 7]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "point", "[6, 3]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=1). | The reverse of: Inserting the top most point in to the cell Cell(i=0, j=5). | Inserting the bottom most point in to the cell Cell(i=0, j=5). | "}], "formal_step": "Placing the leftmost point into column 0", "identifier": 2857, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[0, 4]": "Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[0, 4]": "Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 4); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1))).", "identifier": 2858, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2859, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 1]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "point", "[4, 5]": "point", "[5, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[6, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 0]": "point", "[5, 5]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=1). | The reverse of: Inserting the left most point in to the cell Cell(i=5, j=5). | Inserting the top most point in to the cell Cell(i=5, j=5). | The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=1). | Inserting the top most point in to the cell Cell(i=1, j=1). | The reverse of: Inserting the top most point in to the cell Cell(i=5, j=5). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2860, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 1]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "point", "[4, 6]": "point", "[5, 5]": "Av(Perm((0, 1)))", "[6, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 0]": "point", "[5, 8]": "Av(Perm((0, 1)))", "[6, 7]": "point", "[7, 4]": "point", "[8, 3]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=1). | The reverse of: Inserting the top most point in to the cell Cell(i=5, j=6). | Inserting the bottom most point in to the cell Cell(i=5, j=6). | The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=1). | Inserting the top most point in to the cell Cell(i=1, j=1). | Inserting the top most point in to the cell Cell(i=7, j=3). | "}], "formal_step": "We perform cell insertion into cell (7, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 2861, "in_tiling": {"[0, 5]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 0]": "point", "[5, 7]": "point", "[6, 8]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[7, 6]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[8, 3]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 1]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "point", "[4, 6]": "point", "[5, 7]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[6, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[7, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2862, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 1]": "Av+(Perm((0, 1)))", "[2, 6]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 2]": "point", "[5, 0]": "point", "[6, 4]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 7]": "Av(Perm((0, 1)))", "[4, 6]": "point", "[5, 3]": "point", "[6, 0]": "point", "[7, 5]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2863, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 6]": "Av(Perm((0, 1)))", "[2, 5]": "point", "[3, 3]": "point", "[4, 0]": "point", "[5, 4]": "Av+(Perm((0, 1)))", "[6, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 7]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 4]": "point", "[5, 0]": "point", "[6, 5]": "Av+(Perm((0, 1)))", "[7, 3]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (7, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 2864, "in_tiling": {"[0, 5]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[3, 8]": "Av+(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "point", "[6, 7]": "point", "[7, 6]": "Av(Perm((0, 1)))", "[8, 3]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 1]": "Av+(Perm((0, 1)))", "[2, 7]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 3]": "point", "[5, 0]": "point", "[6, 5]": "Av+(Perm((0, 1)))", "[7, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=1). | Inserting the top most point in to the cell Cell(i=1, j=1). | The reverse of: Inserting the top most point in to the cell Cell(i=6, j=6). | Inserting the bottom most point in to the cell Cell(i=3, j=7). | The reverse of: Inserting the top most point in to the cell Cell(i=1, j=1). | "}], "formal_step": "We perform cell insertion into cell (3, 9); either it is empty or Av+(Perm((0, 1))).", "identifier": 2865, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[3, 9]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 0]": "point", "[6, 7]": "point", "[7, 8]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[8, 6]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[9, 3]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=1). | Inserting the left most point in to the cell Cell(i=6, j=6). | "}], "formal_step": "We perform cell insertion into cell (3, 4); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2))).", "identifier": 2866, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 2867, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[3, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=0). | The reverse of: Inserting the left most point in to the cell Cell(i=0, j=1). | Inserting the right most point in to the cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 3, 0, 1))).", "identifier": 117, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2))).", "identifier": 2868, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}}
