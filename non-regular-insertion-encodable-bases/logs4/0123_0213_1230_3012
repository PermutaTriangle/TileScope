0123_0213_1230_3012

===========================================
Log created Sat, 24 Jun 2017 04:11:13

Maximum depth fully searched was 4

Maximum time set at 7200 seconds

Total time taken was 7200 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_point_placements, all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1209336 inferral cache hits and 19319049 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 141114 tilings of which 7676 are verified.
There were 40651 SiblingNodes of which 2199 are verified.

The function splittings called the partitioning cache *19325183* times, (25875 originating)
There were 0 cache misses

No proof tree was found after 7200 seconds

===========================================
Log created Sat, 24 Jun 2017 06:13:02

Maximum depth fully searched was 3

Maximum time set at 7200 seconds

Total time taken was 7307 seconds

The strategies applied were:
Batch: extreme_point_boundaries, all_cell_insertions, all_row_and_column_insertions, all_point_isolations
Equivalent: all_point_placements, all_equivalent_point_isolations, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 222676 inferral cache hits and 32959912 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 59562 tilings in it right now.
There were 27081 tilings of which 2811 are verified.
There were 13629 SiblingNodes of which 1556 are verified.

The function splittings called the partitioning cache *32960798* times, (4700 originating)
There were 0 cache misses

No proof tree was found after 7307 seconds

===========================================
Log created Sat, 24 Jun 2017 08:13:03

Maximum depth fully searched was 19

Maximum time set at 7200 seconds

Total time taken was 7200 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: 
Verification: subset_verified, is_empty

There were 11098 inferral cache hits and 0 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 33687 tilings in it right now.
There were 24620 tilings of which 15818 are verified.
There were 12747 SiblingNodes of which 4091 are verified.

There were 0 cache misses

No proof tree was found after 7200 seconds

===========================================
Log created Sat, 24 Jun 2017 10:13:03

Maximum depth fully searched was 16

Maximum time set at 7200 seconds

Total time taken was 7200 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: 
Verification: subset_verified, is_empty

There were 114535 inferral cache hits and 0 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 136147 tilings of which 83886 are verified.
There were 46923 SiblingNodes of which 16274 are verified.

There were 0 cache misses

No proof tree was found after 7200 seconds

===========================================
Log created Sat, 24 Jun 2017 12:13:15

Maximum depth fully searched was 19

Maximum time set at 7200 seconds

Total time taken was 7211 seconds

The strategies applied were:
Batch: all_cell_insertions, all_leftmost_column_placements
Equivalent: all_equivalent_leftmost_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: 
Verification: subset_verified, is_empty

There were 12024 inferral cache hits and 0 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 36801 tilings in it right now.
There were 26918 tilings of which 17262 are verified.
There were 13949 SiblingNodes of which 4462 are verified.

There were 0 cache misses

No proof tree was found after 7211 seconds

===========================================
Log created Sat, 24 Jun 2017 14:13:21

Maximum depth fully searched was 16

Maximum time set at 7200 seconds

Total time taken was 7205 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: 
Verification: subset_verified, is_empty

There were 166574 inferral cache hits and 0 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 174244 tilings of which 104756 are verified.
There were 53816 SiblingNodes of which 18836 are verified.

There were 0 cache misses

No proof tree was found after 7205 seconds

===========================================
Log created Sat, 24 Jun 2017 15:27:21

Maximum depth fully searched was 6

Maximum time set at 7200 seconds

Total time taken was 4439 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 63042 inferral cache hits and 119116 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 100000 tilings in it right now.
There were 66417 tilings of which 12491 are verified.
There were 30436 SiblingNodes of which 2265 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *126086* times, (63043 originating)
There were 0 cache misses

A proof tree was found in 4439 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     │     ├─────10
                        │     │     │     └─────11
                        │     │     └─────12
                        │     │           ├─────13
                        │     │           │     ├─────14
                        │     │           │     └─────15
                        │     │           └─────16
                        │     └─────17
                        │           ├─────18
                        │           │     ├─────19
                        │           │     │     ├─────20
                        │           │     │     │     ├─────21
                        │           │     │     │     └─────22
                        │           │     │     └─────23
                        │           │     └─────24
                        │           └─────25
                        └─────26
                              ├─────27
                              │     ├─────28
                              │     │     ├─────29
                              │     │     └─────30
                              │     └─────31
                              │           ├─────32
                              │           │     ├─────33
                              │           │     └─────34
                              │           │           ├─────35
                              │           │           └─────36
                              │           │                 ├─────37
                              │           │                 └─────38
                              │           └─────39
                              └─────40
                                    ├─────41
                                    │     ├─────42
                                    │     │     ├─────43
                                    │     │     │     ├─────44
                                    │     │     │     │     ├─────45
                                    │     │     │     │     └─────46
                                    │     │     │     └─────47
                                    │     │     └─────48
                                    │     └─────49
                                    └─────50

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 1, 2)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 1, 2)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | | |3|
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 1)))
3: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av+(Perm((0, 1, 2)))
3: point

Label: 7

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
3: Av+(Perm((0, 1, 2)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | |1| | |1|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|1| |1| | |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point

Label: 8

+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|1| |1| | |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| |1| |1| | |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point

Label: 9

+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | |1| | |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point

Label: 10

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)))
2: point

Label: 11

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 12

+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | | | |3|
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 13

+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 14

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 15

+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))

Label: 16

+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| |3| | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| |3| | | | | | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))

Label: 17

+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | |1| | |4|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point
4: Av+(Perm((0, 1)))

Label: 18

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |3| | |4|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1)))

Label: 19

+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| | |4|
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1)))

Label: 20

+-+-+-+
|2| | |
+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point

Label: 21

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point

Label: 22

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 23

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 24

+-+
|1|
+-+
1: point

Label: 25

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
4: Av+(Perm((0, 1)))

Label: 26

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| |5| |5| | |6|
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| |1| | |2| |3|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))
4: point
5: Av(Perm((0, 1)), Perm((1, 0)))
6: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 27

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |4| |4| |5|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 1, 2)))
3: point
4: Av(Perm((0, 1)), Perm((1, 0)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 28

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |4| | |5|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 1, 2)))
3: point
4: Av(Perm((0, 1)), Perm((1, 0)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 29

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |4| |5|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 1, 2)))
3: point
4: Av(Perm((0, 1)), Perm((1, 0)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))
2: Av(Perm((0, 1, 2)))
3: point

Label: 30

+-+
|1|
+-+
1: point

Label: 31

+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |2| |3|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 32

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 33

+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
|1| | |
+-+-+-+
1: point

Label: 34

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 35

+-+-+-+-+
| | |1| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 36

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| |1| |3| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 37

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((1, 0, 2)))

Label: 38

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 39

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 40

+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | |5| | |1|
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| |1| | |2| |3|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))
4: point
5: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |3| |
+-+-+-+-+-+-+-+-+-+
| | | | |4| | | |1|
+-+-+-+-+-+-+-+-+-+
|3| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | |1|
+-+-+-+-+-+-+-+-+-+
| | | | | |3| | | |
+-+-+-+-+-+-+-+-+-+
| | |1| | | |1| |2|
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 41

+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| | | |4| | | |1|
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | |1|
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| |2|
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 42

+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | |1|
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | |1| |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
|3| | | | | |3|
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |3| | |3|
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))

Label: 43

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|3| | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |3| | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))

Label: 44

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |3| | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))

Label: 45

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))

Label: 46

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |3| | |4|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1)))

Label: 47

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |3| | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | |1|
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | |1| |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 2)))
3: point

Label: 48

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 49

+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | |2| | | |1|
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 50

+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |3| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |1| |
+-+-+-+-+-+-+-+-+-+
|3| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |3| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |3| |
+-+-+-+-+-+-+-+-+-+
|3| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |3| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |1| | | |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1)))
3: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 13498, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13499, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13500, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[3, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": true}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13501, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=1, j=0). | ", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=3), Cell(i=3, j=4)]", "identifier": 13502, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1, 2)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=1, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=1): Cell(i=4, j=1), Cell(i=3, j=0): Cell(i=5, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=3, j=4)}]", "relation": "", "strategy_verified": false}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13503, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 4]": "point", "[3, 5]": "point", "[4, 3]": "point", "[5, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 5]": "point", "[4, 3]": "point", "[5, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | Inserting the top most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": true}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13504, "in_tiling": {"[0, 5]": "Av+(Perm((0, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "point", "[4, 6]": "point", "[5, 3]": "point", "[6, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 5]": "Av+(Perm((0, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "point", "[4, 6]": "point", "[5, 3]": "Av(Perm((0, 1)))", "[6, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | Inserting the top most point in to the cell Cell(i=1, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=5, j=2). | Inserting the bottom most point in to the cell Cell(i=5, j=2). | The reverse of: Inserting the top most point in to the cell Cell(i=1, j=0). | Inserting the bottom most point in to the cell Cell(i=1, j=0). | ", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (0, 5); either it is empty or Av+(Perm((0, 1))).", "identifier": 6910, "in_tiling": {"[0, 5]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 6]": "point", "[5, 3]": "point", "[6, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "point", "[4, 6]": "point", "[5, 3]": "point", "[6, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=1, j=0). | Inserting the bottom most point in to the cell Cell(i=1, j=0). | ", "strategy_verified": false}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13505, "in_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 0]": "Av+(Perm((0, 1)))", "[5, 7]": "point", "[6, 4]": "point", "[7, 3]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 1)))", "[2, 5]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[5, 7]": "point", "[6, 4]": "point", "[7, 3]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=1, j=1). | Inserting the top most point in to the cell Cell(i=3, j=0). | ", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 13506, "in_tiling": {"[0, 5]": "Av(Perm((0, 1)))", "[1, 1]": "Av+(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 6]": "point", "[5, 3]": "point", "[6, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[5, 7]": "point", "[6, 4]": "point", "[7, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=1). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 13507, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 1]": "point", "[6, 0]": "Av(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=2). | Inserting the bottom most point in to the cell Cell(i=0, j=2). | ", "strategy_verified": false}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 13501, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 11, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=1), Cell(i=2, j=3)]", "identifier": 1050, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))", "[2, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 4]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=1): Cell(i=3, j=2), Cell(i=3, j=0): Cell(i=4, j=0)}, {Cell(i=0, j=0): Cell(i=1, j=1), Cell(i=1, j=1): Cell(i=2, j=3)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=2). | ", "strategy_verified": false}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=2)]", "identifier": 3277, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1, 2)))", "[3, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1, 2)))", "[3, 2]": "Av+(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=1, j=3), Cell(i=1, j=1): Cell(i=2, j=1), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=2)}]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=0, j=3)]", "identifier": 4365, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))", "[4, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))", "[4, 2]": "Av+(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=1, j=2), Cell(i=1, j=3): Cell(i=2, j=4), Cell(i=2, j=1): Cell(i=3, j=1), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=3)}]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13508, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 4]": "point", "[2, 5]": "point", "[3, 2]": "point", "[4, 3]": "Av+(Perm((0, 1)))", "[5, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 5]": "point", "[3, 6]": "point", "[4, 3]": "point", "[5, 4]": "Av+(Perm((0, 1)))", "[6, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 13509, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 4]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1, 2)))", "[5, 3]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 4]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1, 2)))", "[5, 3]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (5, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 13510, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1, 2)))", "[5, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=4, j=0). | ", "strategy_verified": false}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 1385, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2)))", "[3, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=3, j=3)]", "identifier": 13511, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=2): Cell(i=1, j=2), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=0): Cell(i=4, j=0), Cell(i=3, j=2): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=3)}]", "relation": "", "strategy_verified": false}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13512, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13513, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 3]": "point", "[3, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=2). | ", "strategy_verified": true}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 3222, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 11, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=4, j=1), Cell(i=5, j=2)]", "identifier": 13514, "in_tiling": {"[0, 0]": "point", "[1, 3]": "point", "[2, 4]": "point", "[3, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "point", "[1, 3]": "point", "[2, 4]": "point", "[3, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=2): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=4, j=1), Cell(i=1, j=1): Cell(i=5, j=2)}]", "relation": "", "strategy_verified": false}], "formal_step": "Placing the minimum point into row 1", "identifier": 13515, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "point", "[3, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "point", "[3, 1]": "Av+(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (3, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 0, 2))).", "identifier": 3222, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=1, j=0), Cell(i=2, j=4)]", "identifier": 6968, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 2]": "point", "[4, 3]": "point", "[5, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 2]": "point", "[4, 3]": "point", "[5, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=1, j=1): Cell(i=3, j=2), Cell(i=2, j=2): Cell(i=4, j=3), Cell(i=3, j=1): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=1, j=1): Cell(i=2, j=4)}]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 13516, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1, 2)))", "[5, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1, 2)))", "[5, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [{"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13517, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}, {"children": [], "formal_step": "recurse", "identifier": 4365, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))", "[4, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))", "[4, 2]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (4, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 13518, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 13519, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 5]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1)))", "[4, 4]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[5, 5]": "point", "[6, 0]": "Av(Perm((0, 1, 2)))", "[6, 2]": "Av(Perm((0, 1)))", "[6, 4]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=4). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (4, 4); either it is empty or Av+(Perm((0, 1))).", "identifier": 13520, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 5]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1)))", "[4, 4]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 5]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))", "[4, 2]": "Av(Perm((0, 1)))", "[4, 4]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=2). | Inserting the top most point in to the cell Cell(i=0, j=2). | ", "strategy_verified": false}, {"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "Reversibly delete the blocks at cells [Cell(i=3, j=2), Cell(i=5, j=5)]", "identifier": 13519, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[5, 5]": "point", "[6, 0]": "Av(Perm((0, 1, 2)))", "[6, 2]": "Av(Perm((0, 1)))", "[6, 4]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 6]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 5]": "point", "[6, 0]": "Av(Perm((0, 1, 2)))", "[6, 2]": "Av(Perm((0, 1)))", "[6, 4]": "Av(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=4): Cell(i=0, j=4), Cell(i=1, j=3): Cell(i=1, j=3), Cell(i=2, j=5): Cell(i=2, j=6), Cell(i=3, j=1): Cell(i=4, j=1), Cell(i=4, j=0): Cell(i=6, j=0), Cell(i=4, j=2): Cell(i=6, j=2), Cell(i=4, j=4): Cell(i=6, j=4)}, {Cell(i=0, j=0): Cell(i=3, j=2), Cell(i=1, j=1): Cell(i=5, j=5)}]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=2). | Inserting the bottom most point in to the cell Cell(i=0, j=2). | The reverse of: Inserting the top most point in to the cell Cell(i=3, j=0). | Inserting the bottom most point in to the cell Cell(i=3, j=0). | ", "strategy_verified": false}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13521, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 4]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 5]": "point", "[7, 4]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 4]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 5]": "point", "[7, 4]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (3, 4); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 13522, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 5]": "point", "[7, 0]": "Av(Perm((0, 1, 2)))", "[7, 2]": "Av(Perm((0, 1)))", "[7, 4]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 5]": "point", "[7, 0]": "Av(Perm((0, 1, 2)))", "[7, 2]": "Av(Perm((0, 1)))", "[7, 4]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13523, "in_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 8]": "point", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 7]": "point", "[7, 6]": "Av(Perm((0, 1)))", "[8, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 8]": "point", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 7]": "Av(Perm((0, 1)))", "[7, 6]": "point", "[8, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=5, j=4). | Inserting the bottom most point in to the cell Cell(i=5, j=4). | ", "strategy_verified": true}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 13524, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "Av+(Perm((0, 1)))", "[5, 3]": "point", "[6, 0]": "Av(Perm((0, 1, 2)))", "[6, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 1]": "point", "[6, 0]": "Av(Perm((0, 1)))", "[7, 5]": "point", "[8, 0]": "Av(Perm((0, 1, 2)))", "[8, 2]": "Av(Perm((0, 1)))", "[8, 4]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=0). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 13525, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 0]": "Av(Perm((0, 1)))", "[5, 3]": "point", "[6, 0]": "Av(Perm((0, 1, 2)))", "[6, 2]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": false}], "formal_step": "Placing the maximum point into row 0", "identifier": 13526, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2))).", "identifier": 1385, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2)), Perm((0, 2, 1))).", "identifier": 1037, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | ", "strategy_verified": false}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2))).", "identifier": 13527, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "", "strategy_verified": false}}
