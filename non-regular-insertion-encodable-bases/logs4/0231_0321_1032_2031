0231_0321_1032_2031

===========================================
Log created Tue, 23 May 2017 07:50:32

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 250 inferral cache hits and 1353 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1825 tilings in it right now.
There were 956 tilings of which 78 are verified.
There were 464 SiblingNodes of which 42 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1450* times, (725 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:51:03

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 267 inferral cache hits and 29974 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1914 tilings in it right now.
There were 1097 tilings of which 162 are verified.
There were 561 SiblingNodes of which 94 are verified.

The function splittings called the partitioning cache *30072* times, (325 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:51:33

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 286 inferral cache hits and 1294 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1349 tilings in it right now.
There were 868 tilings of which 91 are verified.
There were 268 SiblingNodes of which 31 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1390* times, (695 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:52:03

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 504 inferral cache hits and 16396 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1988 tilings in it right now.
There were 1320 tilings of which 163 are verified.
There were 430 SiblingNodes of which 71 are verified.

The function splittings called the partitioning cache *16549* times, (418 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:52:33

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4108 inferral cache hits and 1281 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 1438 tilings in it right now.
There were 849 tilings of which 62 are verified.
There were 257 SiblingNodes of which 26 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1376* times, (688 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:53:03

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6806 inferral cache hits and 21179 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 2265 tilings in it right now.
There were 1464 tilings of which 150 are verified.
There were 498 SiblingNodes of which 77 are verified.

The function splittings called the partitioning cache *21316* times, (365 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Tue, 23 May 2017 07:53:26

Maximum depth fully searched was 6

Maximum time set at 30 seconds

Total time taken was 22 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 75 inferral cache hits and 904 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 363 tilings in it right now.
There were 302 tilings of which 146 are verified.
There were 196 SiblingNodes of which 58 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *962* times, (481 originating)
There were 0 cache misses

A proof tree was found in 22 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     ├─────10
                        │     │     ├─────11
                        │     │     └─────12
                        │     └─────13
                        │           ├─────14
                        │           │     ├─────15
                        │           │     └─────16
                        │           ├─────17
                        │           └─────18
                        └─────19
                              ├─────20
                              └─────21
                                    ├─────22
                                    └─────23
                                          ├─────24
                                          ├─────25
                                          └─────26

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 6

+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 7

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|1| |1| | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |1| |1|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 8

+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| |1| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 9

+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: point
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))

Label: 10

+-+
|1|
+-+
1: point

Label: 11

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
|1| |1| | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | | |1| |2|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
3: point

Label: 14

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
3: point

Label: 15

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 16

+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 17

+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: point
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))

Label: 18

+-+
|1|
+-+
1: point

Label: 19

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: Av+(Perm((1, 0)))
3: point

Label: 20

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: Av+(Perm((1, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: Av(Perm((1, 0)))
3: point

Label: 21

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: Av+(Perm((1, 0)))
3: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
4: point

Label: 22

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
3: Av(Perm((1, 0)))
4: point

Label: 23

+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
|2| |1| | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: Av+(Perm((1, 0)))
3: point

Label: 24

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))
2: Av+(Perm((1, 0)))
3: point

Label: 25

+-+
|1|
+-+
1: point

Label: 26

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 59, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 60, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 61, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=4), Cell(i=4, j=0), Cell(i=5, j=1)]", "identifier": 62, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[5, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[5, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=4)}, {Cell(i=0, j=0): Cell(i=4, j=0)}, {Cell(i=0, j=0): Cell(i=5, j=1)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 63, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 64, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1))).", "identifier": 34, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 65, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[5, 1]": "point", "[6, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[5, 1]": "point", "[6, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=4, j=0), Cell(i=1, j=1): Cell(i=5, j=1), Cell(i=2, j=0): Cell(i=6, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=4)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (6, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1))).", "identifier": 66, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[5, 1]": "point", "[6, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=0). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 67, "in_tiling": {"[0, 1]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "Av(Perm((1, 0)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 68, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 3]": "point", "[2, 5]": "point", "[3, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 3]": "point", "[2, 5]": "point", "[3, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[4, 4]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 54, "in_tiling": {"[0, 1]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=5, j=4), Cell(i=6, j=0)]", "identifier": 69, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0)))", "[1, 5]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 3]": "point", "[4, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[5, 4]": "point", "[6, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((1, 0)))", "[1, 5]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 3]": "point", "[4, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[5, 4]": "point", "[6, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=3): Cell(i=1, j=5), Cell(i=2, j=1): Cell(i=2, j=2), Cell(i=3, j=2): Cell(i=3, j=3), Cell(i=4, j=0): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=5, j=4)}, {Cell(i=0, j=0): Cell(i=6, j=0)}]", "relation": ""}], "formal_step": "Placing the maximum point into row 1", "identifier": 70, "in_tiling": {"[0, 1]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1))).", "identifier": 54, "in_tiling": {"[0, 1]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 64, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1))).", "identifier": 17, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1))).", "identifier": 5, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1))).", "identifier": 0, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}}
