0231_1230_1302_2013

===========================================
Log created Thu, 25 May 2017 17:57:15

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 561 inferral cache hits and 2414 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 4330 tilings in it right now.
There were 1950 tilings of which 372 are verified.
There were 728 SiblingNodes of which 92 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2584* times, (1292 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 17:58:15

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 539 inferral cache hits and 49548 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 4242 tilings in it right now.
There were 1964 tilings of which 334 are verified.
There were 772 SiblingNodes of which 100 are verified.

The function splittings called the partitioning cache *49718* times, (585 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 17:59:15

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 600 inferral cache hits and 2281 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 3107 tilings in it right now.
There were 1753 tilings of which 255 are verified.
There were 409 SiblingNodes of which 37 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2444* times, (1222 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 18:00:15

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 975 inferral cache hits and 32293 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 4513 tilings in it right now.
There were 2546 tilings of which 439 are verified.
There were 546 SiblingNodes of which 57 are verified.

The function splittings called the partitioning cache *32509* times, (645 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 18:01:15

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 9959 inferral cache hits and 2030 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 3411 tilings in it right now.
There were 1764 tilings of which 460 are verified.
There were 403 SiblingNodes of which 55 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2176* times, (1088 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 18:02:15

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 14279 inferral cache hits and 25069 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 5164 tilings in it right now.
There were 2558 tilings of which 339 are verified.
There were 627 SiblingNodes of which 73 are verified.

The function splittings called the partitioning cache *25289* times, (619 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Thu, 25 May 2017 18:03:19

Maximum depth fully searched was 8

Maximum time set at 60 seconds

Total time taken was 63 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 44 inferral cache hits and 983 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 980 tilings in it right now.
There were 422 tilings of which 296 are verified.
There were 182 SiblingNodes of which 58 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1044* times, (522 originating)
There were 0 cache misses

No proof tree was found after 63 seconds

===========================================
Log created Thu, 25 May 2017 18:04:00

Maximum depth fully searched was 8

Maximum time set at 60 seconds

Total time taken was 40 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 93 inferral cache hits and 10052 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1610 tilings in it right now.
There were 732 tilings of which 542 are verified.
There were 312 SiblingNodes of which 122 are verified.

The function splittings called the partitioning cache *10146* times, (412 originating)
There were 0 cache misses

A proof tree was found in 40 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        │                 ├─────14
                        │                 │     ├─────15
                        │                 │     └─────16
                        │                 │           ├─────17
                        │                 │           └─────18
                        │                 └─────19
                        └─────20
                              ├─────21
                              │     ├─────22
                              │     │     ├─────23
                              │     │     └─────24
                              │     └─────25
                              └─────26

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 7

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 8

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
2: point

Label: 9

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 10

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 11

+-+
|1|
+-+
1: point

Label: 12

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 13

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| |1| |2| |3|
+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
4: point

Label: 14

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 15

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 16

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 17

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 18

+-+
|1|
+-+
1: point

Label: 19

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))
4: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Label: 20

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
4: point

Label: 21

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|1| | |2|
+-+-+-+-+
1: Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 22

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 23

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 24

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
3: point

Label: 25

+-+
|1|
+-+
1: point

Label: 26

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))
2: Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |5|
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)))
3: Av(Perm((1, 2, 0)), Perm((2, 0, 1)))
4: Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))
5: Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 75, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 76, "in_tiling": {"[0, 0]": "Av(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 77, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 78, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 16, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 79, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2)}, {Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=0): Cell(i=4, j=0)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 80, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 33, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 81, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=0): Cell(i=4, j=0)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3))).", "identifier": 82, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 83, "in_tiling": {"[0, 4]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 5]": "point", "[3, 1]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[4, 3]": "point", "[5, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 5]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 2]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[5, 4]": "point", "[6, 3]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 84, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 33, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 16, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 85, "in_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 18, "in_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3))).", "identifier": 4, "in_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 86, "in_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=1): Cell(i=1, j=2), Cell(i=2, j=0): Cell(i=3, j=0)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 87, "in_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 4]": "point", "[2, 1]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 6]": "point", "[4, 3]": "Av+(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[5, 5]": "point", "[6, 4]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 41, "in_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 18, "in_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0))).", "identifier": 88, "in_tiling": {"[0, 0]": "Av(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3))).", "identifier": 89, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((2, 0, 1)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3))).", "identifier": 90, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}}
