0213_0231_1230_1302_2013
Log created  Fri, 05 May 2017 10:51:14
Finding the proof tree took 12 seconds
The depth searched was 4

Strategies applied: standard_strategies_w_all_rows_cols
Maximum depth set at 4

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))
2: point

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|3| | |4| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))

Label: 5

+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))

Label: 6

+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
2: point

Label: 7

+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av+(Perm((0, 1)))
4: Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|3| | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))
2: point
3: Av(Perm((0, 1)))

Label: 8

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|4| | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))
2: Av(Perm((1, 0)))
3: point
4: Av(Perm((0, 1)))

Label: 9

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |4| |
+-+-+-+-+
| | | |3|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))
2: Av(Perm((1, 0)))
3: point
4: Av(Perm((0, 1)))

Label: 10

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|1| | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((1, 0)))
3: point
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
|1| | | | |1| | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 14, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 15, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 16, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[1, 2]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))", "[2, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=1, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 17, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 2]": "Av(Perm((0, 1)))", "[4, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | The reverse of: Inserting the right most point in to the cell Cell(i=4, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 18, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[2, 2]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 19, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[1, 4]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 20, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 5]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 7]": "point", "[5, 6]": "Av(Perm((0, 1)))", "[6, 2]": "Av(Perm((1, 0)))", "[6, 4]": "Av(Perm((0, 1)))", "[7, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | Inserting the bottom most point in to the cell Cell(i=0, j=4). | "}], "formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((0, 1))).", "identifier": 21, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[2, 4]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[2, 4]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0))).", "identifier": 22, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[0, 2]": "Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[2, 4]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[3, 3]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 2)), Perm((1, 3, 0, 2))).", "identifier": 23, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)), Perm((1, 2, 3, 0)))", "[0, 2]": "Av(Perm((0, 1, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3))).", "identifier": 24, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 0, 1, 3)))"}, "recurse": "[]", "relation": ""}}
