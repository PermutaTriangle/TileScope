0123_0132_0213_0231_1230_2013_3012

===========================================
Log created Sun, 21 May 2017 02:43:12

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1297 inferral cache hits and 5386 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 5587 tilings in it right now.
There were 3528 tilings of which 599 are verified.
There were 1978 SiblingNodes of which 193 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *5744* times, (2872 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sun, 21 May 2017 02:45:13

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 121 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1107 inferral cache hits and 260511 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 4860 tilings in it right now.
There were 3036 tilings of which 472 are verified.
There were 1729 SiblingNodes of which 212 are verified.

The function splittings called the partitioning cache *260840* times, (1266 originating)
There were 0 cache misses

No proof tree was found after 121 seconds

===========================================
Log created Sun, 21 May 2017 02:47:13

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 1232 inferral cache hits and 4958 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 4328 tilings in it right now.
There were 2700 tilings of which 302 are verified.
There were 876 SiblingNodes of which 100 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *5304* times, (2652 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sun, 21 May 2017 02:49:14

Maximum depth fully searched was 5

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1811 inferral cache hits and 128474 partitioning cache hits.
The partitioning cache had 21 tilings in it right now.
The inferral cache has 5824 tilings in it right now.
There were 3664 tilings of which 440 are verified.
There were 1140 SiblingNodes of which 142 are verified.

The function splittings called the partitioning cache *128946* times, (1498 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sun, 21 May 2017 02:51:14

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 120 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 16251 inferral cache hits and 5269 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 5970 tilings in it right now.
There were 3080 tilings of which 327 are verified.
There were 1002 SiblingNodes of which 122 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *5642* times, (2821 originating)
There were 0 cache misses

No proof tree was found after 120 seconds

===========================================
Log created Sun, 21 May 2017 02:53:04

Maximum depth fully searched was 4

Maximum time set at 120 seconds

Total time taken was 110 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 20932 inferral cache hits and 46228 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 7867 tilings in it right now.
There were 3816 tilings of which 495 are verified.
There were 1209 SiblingNodes of which 169 are verified.

The function splittings called the partitioning cache *46679* times, (1344 originating)
There were 0 cache misses

A proof tree was found in 110 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  │           ├─────8
                  │           └─────9
                  └─────10
                        ├─────11
                        └─────12
                              ├─────13
                              │     ├─────14
                              │     └─────15
                              └─────16

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+
|1|2|
+-+-+
1: point
2: Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+-+
|1|2|
+-+-+
1: point
2: Av+(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
|1|2|1|
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))

Label: 5

+-+-+-+
| |1|2|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
| | |1|
+-+-+-+
|1|2| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((0, 1)))

Label: 6

+-+-+-+
| | |1|
+-+-+-+
|1|2| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| | |2|
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 7

+-+-+-+
| |3| |
+-+-+-+
| | |1|
+-+-+-+
|1|2| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 8

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 9

+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 10

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| |1|2|
+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |1| |
+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))

Label: 11

+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 2)))
2: point

Label: 12

+-+-+-+
| |4| |
+-+-+-+
|2| | |
+-+-+-+
| |3| |
+-+-+-+
| | |2|
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|1|2| | |3| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))

Label: 13

+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|1|2| |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|3| | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1|2|
+-+-+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))

Label: 14

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 15

+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| |1|2|
+-+-+-+
1: Av(Perm((0, 1, 2)))
2: point
3: Av(Perm((0, 1)))

Label: 16

+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|1|3| | |1| |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|3| | | |1| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 221, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 222, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 223, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[2, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=1) in its row. | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 224, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 5]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 4]": "Av(Perm((0, 1)))", "[4, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 5]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 4]": "Av(Perm((0, 1)))", "[4, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 225, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 6]": "point", "[3, 5]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 4]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 6]": "point", "[3, 5]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1)))", "[6, 4]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 3); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 226, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "Av+(Perm((0, 1)))", "[2, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 6]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 5]": "Av(Perm((0, 1)))", "[4, 4]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=1, j=2). | Isolating the point at Cell(i=1, j=3) in its column. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | Separting the rightmost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=2, j=3) in its row. | "}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 227, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1)))", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "Av(Perm((0, 1)))", "[2, 1]": "point"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=2, j=2) in its row. | The reverse of: Isolating the point at Cell(i=1, j=2) in its row. | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 228, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1, 2)))", "[2, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=1) in its row. | The reverse of: Separting the rightmost point from cell Cell(i=1, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 218, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)))", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)))", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 229, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 2]": "Av(Perm((0, 1, 2)))", "[4, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 2)))", "[3, 2]": "Av(Perm((0, 1)))", "[4, 0]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=2, j=3)}, {Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=1, j=2): Cell(i=3, j=2), Cell(i=2, j=0): Cell(i=4, j=0)}]", "relation": "| Isolating the point at Cell(i=2, j=3) in its row. | The reverse of: Isolating the point at Cell(i=2, j=3) in its row. | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 230, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[4, 3]": "Av(Perm((0, 1)))", "[5, 2]": "point"}, "out_tiling": {"[0, 4]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[4, 4]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "recurse": "[]", "relation": "| The reverse of: Separting the rightmost point from cell Cell(i=0, j=3). | Separating the topmost point from cell Cell(i=1, j=1). | "}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 231, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1, 2)))", "[1, 4]": "Av+(Perm((0, 1)))", "[2, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[4, 3]": "Av(Perm((0, 1, 2)))", "[5, 2]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=1, j=4). | Isolating the point at Cell(i=1, j=5) in its column. | The reverse of: Isolating the point at Cell(i=3, j=4) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=3). | Separting the rightmost point from cell Cell(i=0, j=3). | "}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((0, 1))).", "identifier": 218, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1, 2)))", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1, 2)))", "[1, 4]": "Av(Perm((0, 1)))", "[2, 1]": "point"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=1, j=2) in its row. | "}], "formal_step": "Isolated the point at Cell(i=0, j=0) in its row", "identifier": 232, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1, 2)))", "[2, 0]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2))).", "identifier": 85, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2))).", "identifier": 233, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 1, 3)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}}
