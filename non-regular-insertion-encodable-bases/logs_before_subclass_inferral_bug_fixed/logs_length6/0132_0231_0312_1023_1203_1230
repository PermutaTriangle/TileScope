0132_0231_0312_1023_1203_1230
Log created  Wed, 03 May 2017 02:00:29
Finding the proof tree took 67 seconds
The depth searched was 5

Strategies applied: standard_strategies_w_all_rows_cols
Maximum depth set at 8

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     │     ├─────7
                  │     │     └─────8
                  │     │           ├─────9
                  │     │           ├─────10
                  │     │           └─────11
                  │     └─────12
                  │           ├─────13
                  │           └─────14
                  └─────15
                        ├─────16
                        └─────17

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 1, 2)))
2: point
3: Av(Perm((0, 1, 2)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 2)))

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 1, 2)))
2: point
3: Av(Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|4| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)))

Label: 5

+-+-+-+-+
|3| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))

Label: 6

+-+-+-+
|3| | |
+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))

Label: 7

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))

Label: 8

+-+-+-+
|3| | |
+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))

Label: 9

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2)))

Label: 10

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 11

+-+
|1|
+-+
1: point

Label: 12

+-+-+-+-+
|3| |4| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
4: Av(Perm((0, 1, 2)))

Label: 13

+-+-+-+
|3| | |
+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))

Label: 14

+-+
|1|
+-+
1: Av+(Perm((0, 1)))

Label: 15

+-+-+-+-+
|4| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)))

Label: 16

+-+-+-+
|3| | |
+-+-+-+
| | |1|
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))

Label: 17

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 339, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 340, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 341, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 342, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 10, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=1), Cell(i=4, j=3)]", "identifier": 11, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 2)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[2, 4]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=4), Cell(i=1, j=1): Cell(i=1, j=2), Cell(i=2, j=2): Cell(i=2, j=4), Cell(i=3, j=0): Cell(i=3, j=0)}, {Cell(i=0, j=0): Cell(i=2, j=1)}, {Cell(i=0, j=0): Cell(i=4, j=3)}]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 17, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 17, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 30, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=1)]", "identifier": 343, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point", "[3, 1]": "Av+(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=0, j=3): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=3). | The reverse of: Inserting the bottom most point in to the cell Cell(i=3, j=1). | "}], "formal_step": "We perform cell insertion into cell (2, 3); either it is empty or Av+(Perm((0, 1))).", "identifier": 220, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 17, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 50, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=1)]", "identifier": 344, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 3]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 345, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 1, 2)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 1, 2))).", "identifier": 346, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 1, 2)))", "[0, 2]": "Av(Perm((0, 1, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0))).", "identifier": 347, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": ""}}
