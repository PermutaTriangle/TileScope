0231_1032_2130
Log created  Fri, 12 May 2017 10:56:08
Finding the proof tree took 46 seconds
The depth searched was 4

Strategies applied: standard_strategies_w_all_rows_cols-prop_fixed
Maximum depth set at 4

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        │     ├─────10
                        │     ├─────11
                        │     └─────12
                        └─────13

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
|4| | | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))
4: Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))

Label: 5

+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))

Label: 6

+-+-+-+
| | |2|
+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: point

Label: 7

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: Av(Perm((1, 0)))
3: point

Label: 8

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: Av(Perm((1, 0)))
3: point
4: Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: Av(Perm((1, 0)))
3: point
4: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))

Label: 9

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: Av(Perm((1, 0)))
3: point
4: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))

Label: 10

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: point
3: Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
2: Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))
3: point

Label: 11

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 78, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 79, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 80, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[0, 2]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 81, "in_tiling": {"[0, 1]": "Av(Perm((1, 0)))", "[1, 2]": "point", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((1, 0)))", "[1, 2]": "point", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0))).", "identifier": 82, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[0, 3]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[0, 3]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 27, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[1, 2]": "Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=2). | The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 3, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=2), Cell(i=2, j=4)]", "identifier": 83, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 3]": "point", "[2, 7]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[3, 4]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))", "[4, 6]": "point", "[5, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[5, 5]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[3, 3]": "Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=1, j=2): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=4)}]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | Inserting the bottom most point in to the cell Cell(i=0, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=3, j=3). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 84, "in_tiling": {"[0, 5]": "Av+(Perm((1, 0)))", "[1, 0]": "Av(Perm((1, 0)))", "[2, 1]": "point", "[3, 6]": "point", "[4, 2]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))", "[5, 4]": "point", "[6, 3]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 4]": "point", "[2, 0]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 5]": "point", "[5, 2]": "Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=4, j=2). | Inserting the top most point in to the cell Cell(i=0, j=3). | "}], "formal_step": "We perform cell insertion into cell (0, 7); either it is empty or Av+(Perm((1, 0))).", "identifier": 85, "in_tiling": {"[0, 4]": "Av(Perm((1, 0)))", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point", "[3, 5]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[4, 3]": "Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 7]": "Av(Perm((1, 0)))", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 8]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[4, 4]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))", "[5, 6]": "point", "[6, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[6, 5]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=3). | "}], "formal_step": "We perform cell insertion into cell (3, 3); either it is empty or Av+(Perm((1, 2, 0)), Perm((1, 0, 3, 2))).", "identifier": 27, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[0, 4]": "Av(Perm((1, 0, 2)), Perm((0, 2, 3, 1)))", "[1, 2]": "point", "[2, 5]": "point", "[3, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[3, 3]": "Av(Perm((1, 2, 0)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0))).", "identifier": 2, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0))).", "identifier": 13, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}}
