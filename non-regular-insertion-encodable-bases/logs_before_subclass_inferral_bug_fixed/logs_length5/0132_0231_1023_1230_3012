0132_0231_1023_1230_3012
Log created  Thu, 18 May 2017 11:52:31
Finding the proof tree took 252 seconds
The depth searched was 4

Strategies applied: standard_strategies_point_pl_point_sep-prop_fixed
Maximum depth set at 4

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        │     ├─────10
                        │     │     ├─────11
                        │     │     │     ├─────12
                        │     │     │     └─────13
                        │     │     ├─────14
                        │     │     └─────15
                        │     └─────16
                        └─────17

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))
2: Av(Perm((0, 1, 2)))
3: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1)))
2: Av+(Perm((0, 1, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| |1| |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))

Label: 5

+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))

Label: 6

+-+-+-+
|3| | |
+-+-+-+
| |1| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2)))

Label: 7

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 8

+-+-+-+-+
|4| | | |
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|3| |1| | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))

Label: 9

+-+-+-+-+-+-+
|3| |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))

Label: 10

+-+-+-+-+-+
|3| |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))

Label: 11

+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 2)))

Label: 12

+-+-+-+
|3| | |
+-+-+-+
| |1| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))

Label: 13

+-+-+-+
|4| | |
+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 1, 2)))

Label: 14

+-+
|1|
+-+
1: point

Label: 15

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 16

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 17

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 255, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 256, "in_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 257, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0)]", "identifier": 139, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 257, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1, 2)))", "[1, 2]": "point", "[2, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 258, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 5]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 238, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 259, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0), Cell(i=3, j=3)]", "identifier": 258, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 5]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 4]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=0, j=4): Cell(i=0, j=5), Cell(i=1, j=3): Cell(i=2, j=4), Cell(i=2, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0)}, {Cell(i=0, j=0): Cell(i=3, j=3)}]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=3). | Inserting the top most point in to the cell Cell(i=2, j=3). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 260, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 5]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 1]": "Av+(Perm((0, 1)))", "[5, 3]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 6]": "point", "[3, 5]": "Av(Perm((0, 1)))", "[4, 2]": "Av(Perm((0, 1)))", "[5, 1]": "point", "[6, 4]": "point"}, "recurse": "[]", "relation": "| The reverse of: Separting the bottommost point from cell Cell(i=2, j=4). | Separting the topmost point from cell Cell(i=2, j=4). | Separting the bottommost point from cell Cell(i=4, j=1). | "}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 160, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1)))", "[0, 6]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 6]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1)))", "[0, 6]": "Av(Perm((0, 1, 2)))", "[1, 0]": "point", "[2, 6]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=5, j=0)]", "identifier": 261, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[0, 5]": "Av(Perm((0, 1)))", "[0, 7]": "Av(Perm((0, 1, 2)))", "[1, 1]": "point", "[2, 7]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 0]": "Av(Perm((0, 1)))", "[6, 4]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=0, j=4): Cell(i=0, j=5), Cell(i=0, j=6): Cell(i=0, j=7), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=6): Cell(i=2, j=7), Cell(i=3, j=5): Cell(i=3, j=6), Cell(i=4, j=1): Cell(i=4, j=2), Cell(i=5, j=3): Cell(i=6, j=4)}, {Cell(i=0, j=0): Cell(i=5, j=0)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 262, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 1, 2)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=2, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=0, j=2). | Inserting the right most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 2))).", "identifier": 263, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2))).", "identifier": 264, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 0, 2, 3)), Perm((1, 2, 3, 0)), Perm((3, 0, 1, 2)))"}, "recurse": "[]", "relation": ""}}
