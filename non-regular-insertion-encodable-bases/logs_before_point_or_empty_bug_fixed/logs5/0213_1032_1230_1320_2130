0213_1032_1230_1320_2130

===========================================
Log created Sun, 21 May 2017 10:19:23

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 408 inferral cache hits and 1866 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2940 tilings in it right now.
There were 1263 tilings of which 300 are verified.
There were 461 SiblingNodes of which 58 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1998* times, (999 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 10:19:53

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 487 inferral cache hits and 31359 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 3149 tilings in it right now.
There were 1424 tilings of which 284 are verified.
There were 578 SiblingNodes of which 68 are verified.

The function splittings called the partitioning cache *31523* times, (547 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 10:20:23

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 283 inferral cache hits and 1382 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1761 tilings in it right now.
There were 1058 tilings of which 145 are verified.
There were 252 SiblingNodes of which 31 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1484* times, (742 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 10:20:53

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 710 inferral cache hits and 18109 partitioning cache hits.
The partitioning cache had 9 tilings in it right now.
The inferral cache has 3192 tilings in it right now.
There were 1660 tilings of which 420 are verified.
There were 338 SiblingNodes of which 42 are verified.

The function splittings called the partitioning cache *18288* times, (525 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 10:21:24

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6138 inferral cache hits and 1612 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 2183 tilings in it right now.
There were 1162 tilings of which 232 are verified.
There were 277 SiblingNodes of which 30 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1730* times, (865 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 10:21:54

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 10439 inferral cache hits and 19186 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 3607 tilings in it right now.
There were 1771 tilings of which 401 are verified.
There were 358 SiblingNodes of which 42 are verified.

The function splittings called the partitioning cache *19361* times, (513 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 10:22:22

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 28 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 153 inferral cache hits and 1574 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 867 tilings in it right now.
There were 575 tilings of which 292 are verified.
There were 325 SiblingNodes of which 104 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1668* times, (834 originating)
There were 0 cache misses

A proof tree was found in 28 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     └─────11
                        └─────12
                              ├─────13
                              └─────14
                                    ├─────15
                                    │     ├─────16
                                    │     └─────17
                                    │           ├─────18
                                    │           │     ├─────19
                                    │           │     └─────20
                                    │           └─────21
                                    └─────22
                                          ├─────23
                                          │     ├─────24
                                          │     │     ├─────25
                                          │     │     │     ├─────26
                                          │     │     │     └─────27
                                          │     │     └─────28
                                          │     └─────29
                                          ├─────30
                                          └─────31

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))
2: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point

Label: 7

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|1| |1| |2|
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point

Label: 8

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((1, 0)))
2: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | | |2| |3|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
3: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
4: point

Label: 9

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))
2: point

Label: 10

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
| | | |2| |3|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))

Label: 11

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))

Label: 12

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
4: point

Label: 13

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))

Label: 14

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
4: point

Label: 15

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
3: point

Label: 16

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
2: point

Label: 17

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|1| |2| | |
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
3: point

Label: 18

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
3: point

Label: 19

+-+-+-+
| |2| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((1, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((1, 0)))
2: point

Label: 20

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))
3: point

Label: 21

+-+
|1|
+-+
1: point

Label: 22

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |3| |4|
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av+(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))

Label: 23

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))

Label: 24

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |2| |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))

Label: 25

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))

Label: 26

+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))

Label: 27

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))

Label: 28

+-+
|1|
+-+
1: point

Label: 29

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))

Label: 30

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Label: 31

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 150, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 151, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 152, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 153, "in_tiling": {"[0, 2]": "point", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=2, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 154, "in_tiling": {"[0, 3]": "point", "[1, 0]": "Av+(Perm((1, 0)))", "[2, 4]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 2]": "point", "[5, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((1, 0)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=3, j=1). | Inserting the top most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((1, 0))).", "identifier": 155, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 1]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((1, 0)))", "[2, 4]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 156, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 4]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((1, 0))).", "identifier": 157, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[4, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 158, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 159, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 160, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 161, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0))).", "identifier": 149, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=1)]", "identifier": 162, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=1)}]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 161, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 163, "in_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 4]": "point", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=2, j=1). | "}, {"children": [], "formal_step": "recurse", "identifier": 66, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((1, 0))).", "identifier": 14, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=0)]", "identifier": 58, "in_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=1, j=1), Cell(i=1, j=1): Cell(i=2, j=2), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=0)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 164, "in_tiling": {"[0, 0]": "point", "[1, 4]": "point", "[2, 5]": "point", "[3, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 4]": "point", "[2, 5]": "point", "[3, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 66, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 13, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=0), Cell(i=2, j=4)]", "identifier": 165, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 3]": "point", "[5, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=1, j=1), Cell(i=1, j=1): Cell(i=3, j=2), Cell(i=2, j=2): Cell(i=4, j=3), Cell(i=3, j=1): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=0)}, {Cell(i=0, j=0): Cell(i=2, j=4)}]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0))).", "identifier": 166, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0))).", "identifier": 167, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 168, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0))).", "identifier": 169, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0))).", "identifier": 170, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0))).", "identifier": 171, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}}
