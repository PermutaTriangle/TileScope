0132_0231_1320_2031_3120

===========================================
Log created Sun, 21 May 2017 01:48:51

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 297 inferral cache hits and 1353 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 2231 tilings in it right now.
There were 1123 tilings of which 125 are verified.
There were 467 SiblingNodes of which 49 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1450* times, (725 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 01:49:22

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 247 inferral cache hits and 22527 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2529 tilings in it right now.
There were 1228 tilings of which 175 are verified.
There were 486 SiblingNodes of which 63 are verified.

The function splittings called the partitioning cache *22622* times, (319 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 01:49:52

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 167 inferral cache hits and 1066 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1257 tilings in it right now.
There were 778 tilings of which 61 are verified.
There were 212 SiblingNodes of which 21 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1146* times, (573 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 01:50:22

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 478 inferral cache hits and 13236 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2422 tilings in it right now.
There were 1414 tilings of which 100 are verified.
There were 326 SiblingNodes of which 32 are verified.

The function splittings called the partitioning cache *13369* times, (357 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 01:50:53

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 7152 inferral cache hits and 1376 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2339 tilings in it right now.
There were 1303 tilings of which 138 are verified.
There were 311 SiblingNodes of which 40 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1478* times, (739 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 01:51:23

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 7752 inferral cache hits and 12047 partitioning cache hits.
The partitioning cache had 11 tilings in it right now.
The inferral cache has 2575 tilings in it right now.
There were 1385 tilings of which 142 are verified.
There were 306 SiblingNodes of which 26 are verified.

The function splittings called the partitioning cache *12166* times, (324 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 01:51:41

Maximum depth fully searched was 6

Maximum time set at 30 seconds

Total time taken was 18 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 59 inferral cache hits and 652 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 425 tilings in it right now.
There were 270 tilings of which 158 are verified.
There were 142 SiblingNodes of which 50 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *696* times, (357 originating)
There were 1 cache misses

A proof tree was found in 18 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        └─────8
                              ├─────9
                              └─────10
                                    ├─────11
                                    │     ├─────12
                                    │     └─────13
                                    │           ├─────14
                                    │           └─────15
                                    └─────16

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
2: Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))
3: point

Label: 7

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: point

Label: 8

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| |2| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
4: point

Label: 9

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))

Label: 10

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| |2| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
4: point

Label: 11

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))
3: point

Label: 12

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))
2: Av(Perm((0, 1)))
3: point

Label: 13

+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|1| |2| | | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
4: point

Label: 14

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| |2| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
4: point

Label: 15

+-+
|1|
+-+
1: point

Label: 16

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 43, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 44, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 45, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 46, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 47, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 48, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[4, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 4]": "point", "[3, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[4, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 42, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 49, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 4]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[5, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 4]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[5, 3]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=3): Cell(i=1, j=4), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=2): Cell(i=3, j=2), Cell(i=4, j=1): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=5, j=3)}]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 50, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 51, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 4]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 3]": "point", "[4, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 5]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 4]": "point", "[5, 3]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | "}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0))).", "identifier": 52, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2))).", "identifier": 42, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 53, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2))).", "identifier": 54, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0))).", "identifier": 55, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0))).", "identifier": 56, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
