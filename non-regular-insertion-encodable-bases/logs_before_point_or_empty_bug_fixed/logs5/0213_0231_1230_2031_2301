0213_0231_1230_2031_2301

===========================================
Log created Sun, 21 May 2017 08:40:44

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 300 inferral cache hits and 1622 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2315 tilings in it right now.
There were 1154 tilings of which 222 are verified.
There were 502 SiblingNodes of which 70 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1738* times, (869 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:41:14

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 303 inferral cache hits and 23169 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2158 tilings in it right now.
There were 1180 tilings of which 257 are verified.
There were 536 SiblingNodes of which 109 are verified.

The function splittings called the partitioning cache *23265* times, (323 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:41:44

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 226 inferral cache hits and 1225 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 1429 tilings in it right now.
There were 887 tilings of which 138 are verified.
There were 223 SiblingNodes of which 28 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1316* times, (658 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:42:14

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 538 inferral cache hits and 11315 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2598 tilings in it right now.
There were 1538 tilings of which 181 are verified.
There were 374 SiblingNodes of which 55 are verified.

The function splittings called the partitioning cache *11461* times, (397 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:42:44

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5703 inferral cache hits and 1384 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 2016 tilings in it right now.
There were 1095 tilings of which 147 are verified.
There were 281 SiblingNodes of which 42 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1486* times, (743 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:43:14

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 8718 inferral cache hits and 10811 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 3133 tilings in it right now.
There were 1640 tilings of which 212 are verified.
There were 447 SiblingNodes of which 75 are verified.

The function splittings called the partitioning cache *10968* times, (423 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:43:48

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 33 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 62 inferral cache hits and 689 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 437 tilings in it right now.
There were 268 tilings of which 137 are verified.
There were 144 SiblingNodes of which 39 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *734* times, (367 originating)
There were 0 cache misses

No proof tree was found after 33 seconds

===========================================
Log created Sun, 21 May 2017 08:44:19

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 72 inferral cache hits and 21441 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 555 tilings in it right now.
There were 443 tilings of which 223 are verified.
There were 283 SiblingNodes of which 113 are verified.

The function splittings called the partitioning cache *21491* times, (194 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:44:49

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 163 inferral cache hits and 1011 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 301 tilings in it right now.
There were 263 tilings of which 41 are verified.
There were 59 SiblingNodes of which 15 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1084* times, (542 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:45:20

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 387 inferral cache hits and 3013 partitioning cache hits.
The partitioning cache had 10 tilings in it right now.
The inferral cache has 879 tilings in it right now.
There were 602 tilings of which 175 are verified.
There were 102 SiblingNodes of which 31 are verified.

The function splittings called the partitioning cache *3148* times, (310 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Sun, 21 May 2017 08:46:15

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 54 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 26 inferral cache hits and 503 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 169 tilings in it right now.
There were 120 tilings of which 71 are verified.
There were 74 SiblingNodes of which 26 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *534* times, (267 originating)
There were 0 cache misses

No proof tree was found after 54 seconds

===========================================
Log created Sun, 21 May 2017 08:46:47

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 27 inferral cache hits and 3285 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 185 tilings in it right now.
There were 143 tilings of which 82 are verified.
There were 94 SiblingNodes of which 35 are verified.

The function splittings called the partitioning cache *3317* times, (148 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Sun, 21 May 2017 08:47:20

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 33 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 120 inferral cache hits and 883 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 248 tilings in it right now.
There were 196 tilings of which 34 are verified.
There were 45 SiblingNodes of which 14 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *946* times, (473 originating)
There were 0 cache misses

No proof tree was found after 33 seconds

===========================================
Log created Sun, 21 May 2017 08:47:50

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 310 inferral cache hits and 3138 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 532 tilings in it right now.
There were 412 tilings of which 79 are verified.
There were 82 SiblingNodes of which 26 are verified.

The function splittings called the partitioning cache *3261* times, (295 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:48:21

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 108 inferral cache hits and 1408 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 754 tilings in it right now.
There were 620 tilings of which 239 are verified.
There were 392 SiblingNodes of which 71 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1492* times, (746 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:48:51

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 70 inferral cache hits and 13853 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 476 tilings in it right now.
There were 392 tilings of which 171 are verified.
There were 268 SiblingNodes of which 73 are verified.

The function splittings called the partitioning cache *13910* times, (250 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:49:22

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 145 inferral cache hits and 1013 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 295 tilings in it right now.
There were 259 tilings of which 46 are verified.
There were 61 SiblingNodes of which 18 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1086* times, (543 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:49:52

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 418 inferral cache hits and 4463 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 738 tilings in it right now.
There were 608 tilings of which 131 are verified.
There were 130 SiblingNodes of which 41 are verified.

The function splittings called the partitioning cache *4618* times, (413 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:50:20

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 28 seconds

The strategies applied were:
Batch: all_cell_insertions, all_leftmost_column_placements
Equivalent: all_equivalent_leftmost_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 76 inferral cache hits and 1141 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 397 tilings in it right now.
There were 364 tilings of which 171 are verified.
There were 247 SiblingNodes of which 82 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1204* times, (602 originating)
There were 0 cache misses

A proof tree was found in 28 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        │                 ├─────14
                        │                 │     ├─────15
                        │                 │     │     ├─────16
                        │                 │     │     │     ├─────17
                        │                 │     │     │     └─────18
                        │                 │     │     └─────19
                        │                 │     └─────20
                        │                 │           ├─────21
                        │                 │           ├─────22
                        │                 │           ├─────23
                        │                 │           └─────24
                        │                 └─────25
                        └─────26
                              ├─────27
                              └─────28
                                    ├─────29
                                    │     ├─────30
                                    │     └─────31
                                    │           ├─────32
                                    │           └─────33
                                    └─────34
                                          ├─────35
                                          └─────36

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))
2: point

Label: 6

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 7

+-+-+-+
| | |4|
+-+-+-+
|2| | |
+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 8

+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 9

+-+-+-+
| | |4|
+-+-+-+
|2| | |
+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 10

+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 11

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+
| | | |4|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 14

+-+-+-+-+-+-+
| | | | | |5|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |5|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |5|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
5: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 15

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 16

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 17

+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 18

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | | |4|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 19

+-+
|1|
+-+
1: point

Label: 20

+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |5|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))
5: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 21

+-+-+-+-+
| | | |4|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 22

+-+
|1|
+-+
1: point

Label: 23

+-+
|1|
+-+
1: point

Label: 24

+-+
|1|
+-+
1: Av(Perm((0, 1)), Perm((1, 0)))

Label: 25

+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |4|
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 26

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 27

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 28

+-+-+-+
| |2| |
+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 29

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 30

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 31

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 32

+-+-+-+
| |2| |
+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 33

+-+
|1|
+-+
1: point

Label: 34

+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 35

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 36

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 122, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 123, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 124, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 125, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 9, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1)]", "identifier": 126, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 127, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0)))", "[3, 4]": "point", "[4, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((0, 1)), Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=3, j=3). | Inserting the bottom most point in to the cell Cell(i=2, j=1). | "}, {"children": [], "formal_step": "recurse", "identifier": 47, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 5]": "point", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=3, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 21, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 5]": "point", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 5]": "point", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=2)]", "identifier": 128, "in_tiling": {"[0, 4]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[3, 3]": "Av+(Perm((1, 0)))", "[4, 5]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[3, 3]": "Av+(Perm((1, 0)))", "[4, 6]": "point", "[5, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[5, 7]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=1): Cell(i=2, j=1), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=5): Cell(i=4, j=6), Cell(i=4, j=4): Cell(i=5, j=5), Cell(i=4, j=6): Cell(i=5, j=7)}, {Cell(i=0, j=0): Cell(i=1, j=2)}]", "relation": "| Inserting the left most point in to the cell Cell(i=4, j=5). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 21, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 5]": "point", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=3, j=4). | "}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 105, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=6), Cell(i=4, j=4), Cell(i=5, j=5)]", "identifier": 129, "in_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 6]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 6]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "point", "[5, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[6, 7]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=1, j=3), Cell(i=1, j=1): Cell(i=2, j=1), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=3, j=2), Cell(i=3, j=4): Cell(i=6, j=7)}, {Cell(i=0, j=0): Cell(i=0, j=6)}, {Cell(i=0, j=0): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=5, j=5)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=4). | "}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 130, "in_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[3, 2]": "Av(Perm((1, 0)))", "[3, 4]": "Av+(Perm((1, 0)))", "[4, 7]": "point", "[5, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[5, 8]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[3, 2]": "Av(Perm((1, 0)))", "[3, 4]": "Av+(Perm((1, 0)))", "[4, 6]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=4, j=6). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 131, "in_tiling": {"[0, 4]": "point", "[1, 1]": "point", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1)))", "[4, 3]": "Av(Perm((1, 0)))", "[5, 6]": "point", "[6, 5]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[6, 7]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 5]": "point", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))", "[5, 4]": "Av(Perm((1, 0)))", "[6, 6]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=5, j=5). | Inserting the top most point in to the cell Cell(i=3, j=0). | "}], "formal_step": "Placing the leftmost point into column 2", "identifier": 47, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 5]": "point", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=3, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 75, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 0)))", "[2, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 0)))", "[2, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 31, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 0)))", "[2, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 2]": "Av(Perm((1, 0)))", "[2, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 132, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 133, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 72, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=1)]", "identifier": 134, "in_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=3): Cell(i=1, j=4), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=3, j=3)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 135, "in_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 26, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 136, "in_tiling": {"[0, 1]": "point", "[1, 5]": "point", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 5]": "point", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 1)))", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[4, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=3): Cell(i=2, j=3), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=3, j=2), Cell(i=3, j=4): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=1, j=5)}]", "relation": ""}], "formal_step": "Placing the leftmost point into column 2", "identifier": 72, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 26, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the leftmost point into column 1", "identifier": 9, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 137, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1))).", "identifier": 138, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1))).", "identifier": 139, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}}
