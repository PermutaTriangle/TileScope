0213_0231_1032_2130_3120

===========================================
Log created Sun, 21 May 2017 06:41:51

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 434 inferral cache hits and 1482 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 2424 tilings in it right now.
There were 1192 tilings of which 207 are verified.
There were 474 SiblingNodes of which 49 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1588* times, (794 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:42:21

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 543 inferral cache hits and 28847 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2887 tilings in it right now.
There were 1390 tilings of which 267 are verified.
There were 532 SiblingNodes of which 75 are verified.

The function splittings called the partitioning cache *28963* times, (387 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:42:52

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 388 inferral cache hits and 1399 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 1862 tilings in it right now.
There were 1083 tilings of which 103 are verified.
There were 259 SiblingNodes of which 29 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1502* times, (751 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:43:22

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 661 inferral cache hits and 15801 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2771 tilings in it right now.
There were 1575 tilings of which 198 are verified.
There were 411 SiblingNodes of which 66 are verified.

The function splittings called the partitioning cache *15951* times, (419 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:43:53

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6948 inferral cache hits and 1464 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2409 tilings in it right now.
There were 1282 tilings of which 203 are verified.
There were 340 SiblingNodes of which 38 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1572* times, (786 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:44:23

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 8551 inferral cache hits and 13406 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 3247 tilings in it right now.
There were 1602 tilings of which 97 are verified.
There were 421 SiblingNodes of which 46 are verified.

The function splittings called the partitioning cache *13542* times, (366 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:44:53

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 117 inferral cache hits and 1658 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1008 tilings in it right now.
There were 739 tilings of which 318 are verified.
There were 471 SiblingNodes of which 110 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1758* times, (879 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:45:30

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 36 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 111 inferral cache hits and 16683 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 880 tilings in it right now.
There were 603 tilings of which 313 are verified.
There were 371 SiblingNodes of which 123 are verified.

The function splittings called the partitioning cache *16771* times, (379 originating)
There were 0 cache misses

No proof tree was found after 36 seconds

===========================================
Log created Sun, 21 May 2017 06:46:00

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 171 inferral cache hits and 1056 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 347 tilings in it right now.
There were 283 tilings of which 46 are verified.
There were 63 SiblingNodes of which 16 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1132* times, (566 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:46:30

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 342 inferral cache hits and 3510 partitioning cache hits.
The partitioning cache had 12 tilings in it right now.
The inferral cache has 709 tilings in it right now.
There were 542 tilings of which 105 are verified.
There were 106 SiblingNodes of which 27 are verified.

The function splittings called the partitioning cache *3646* times, (338 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:47:01

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 85 inferral cache hits and 1495 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 461 tilings in it right now.
There were 592 tilings of which 87 are verified.
There were 504 SiblingNodes of which 54 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1576* times, (788 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:48:10

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 69 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 26 inferral cache hits and 17758 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 233 tilings in it right now.
There were 278 tilings of which 108 are verified.
There were 240 SiblingNodes of which 88 are verified.

The function splittings called the partitioning cache *17800* times, (202 originating)
There were 0 cache misses

No proof tree was found after 69 seconds

===========================================
Log created Sun, 21 May 2017 06:48:40

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 109 inferral cache hits and 836 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 188 tilings in it right now.
There were 171 tilings of which 23 are verified.
There were 42 SiblingNodes of which 13 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *896* times, (448 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:49:10

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 284 inferral cache hits and 3084 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 426 tilings in it right now.
There were 366 tilings of which 51 are verified.
There were 71 SiblingNodes of which 19 are verified.

The function splittings called the partitioning cache *3195* times, (280 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:49:41

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 119 inferral cache hits and 1086 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 802 tilings in it right now.
There were 475 tilings of which 275 are verified.
There were 245 SiblingNodes of which 71 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1154* times, (577 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 06:50:05

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 24 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 164 inferral cache hits and 9385 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 991 tilings in it right now.
There were 642 tilings of which 409 are verified.
There were 336 SiblingNodes of which 133 are verified.

The function splittings called the partitioning cache *9462* times, (318 originating)
There were 0 cache misses

A proof tree was found in 24 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     │     ├─────10
                        │     │     │     └─────11
                        │     │     └─────12
                        │     └─────13
                        │           ├─────14
                        │           │     ├─────15
                        │           │     └─────16
                        │           │           ├─────17
                        │           │           └─────18
                        │           └─────19
                        └─────20
                              ├─────21
                              └─────22
                                    ├─────23
                                    │     ├─────24
                                    │     │     ├─────25
                                    │     │     └─────26
                                    │     └─────27
                                    │           ├─────28
                                    │           └─────29
                                    └─────30
                                          ├─────31
                                          └─────32

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point

Label: 6

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 7

+-+-+-+
|4| | |
+-+-+-+
| | |2|
+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 8

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 9

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 10

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))
We use his sibling for the next strategy
+-+-+-+-+
| |3| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 11

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+
|4| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 14

+-+-+-+-+-+-+
| |5| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((0, 1)))

Label: 15

+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))

Label: 16

+-+-+-+-+-+-+
| |5| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((1, 0)))
5: Av+(Perm((0, 1)))

Label: 17

+-+-+-+-+-+-+-+-+
| | |5| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| |4| | | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| | | | |2| | | | |
+-+-+-+-+-+-+-+-+-+
| |4| | | | | | | |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |3| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 18

+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| |4| | | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |2| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+
| |4| | | | | | | |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | |3| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 19

+-+-+-+-+-+-+-+
| |5| | | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av+(Perm((0, 1)))
4: Av(Perm((0, 1)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| |4| | | | | | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| | |3| | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | |2| | | | |
+-+-+-+-+-+-+-+-+
| | | | |3| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 20

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 21

+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point

Label: 22

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 23

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 24

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))

Label: 25

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 26

+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
| |3| | | | | | |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 27

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 28

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 29

+-+
|1|
+-+
1: point

Label: 30

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 31

+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
3: Av(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))

Label: 32

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 134, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 135, "in_tiling": {"[0, 1]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 136, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 137, "in_tiling": {"[0, 1]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "recurse", "identifier": 20, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0))).", "identifier": 5, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 138, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=2)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 139, "in_tiling": {"[0, 3]": "point", "[1, 5]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 4]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=2, j=0). | Inserting the top most point in to the cell Cell(i=1, j=3). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 140, "in_tiling": {"[0, 3]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[2, 7]": "Av+(Perm((0, 1)))", "[3, 5]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[6, 1]": "point", "[7, 6]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[2, 8]": "point", "[3, 7]": "Av(Perm((0, 1)))", "[4, 5]": "point", "[5, 2]": "Av(Perm((0, 1)))", "[6, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[7, 1]": "point", "[8, 6]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=7). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 141, "in_tiling": {"[0, 3]": "point", "[1, 4]": "Av+(Perm((1, 0)))", "[2, 7]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[6, 1]": "point", "[7, 5]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 8]": "Av(Perm((0, 1)))", "[4, 7]": "point", "[5, 2]": "Av(Perm((0, 1)))", "[6, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[7, 1]": "point", "[8, 6]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=4). | "}], "formal_step": "Placing the rightmost point into column 1", "identifier": 142, "in_tiling": {"[0, 3]": "point", "[1, 4]": "Av+(Perm((1, 0)))", "[1, 6]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 5]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 4]": "Av+(Perm((1, 0)))", "[1, 6]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 5]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((1, 0))).", "identifier": 143, "in_tiling": {"[0, 3]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[1, 6]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 5]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[1, 6]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1)))", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[4, 1]": "point", "[5, 5]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 144, "in_tiling": {"[0, 5]": "point", "[1, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 4]": "Av(Perm((0, 1)))", "[3, 2]": "Av+(Perm((0, 1)))", "[4, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[5, 1]": "point", "[6, 3]": "point"}, "out_tiling": {"[0, 6]": "point", "[1, 7]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 5]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 2]": "Av(Perm((0, 1)))", "[5, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[6, 1]": "point", "[7, 4]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=2). | "}], "formal_step": "Placing the leftmost point into column 0", "identifier": 33, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))", "[0, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[2, 1]": "point", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))", "[0, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[2, 1]": "point", "[3, 3]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1))).", "identifier": 145, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))", "[0, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((2, 0, 1)))", "[0, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 146, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av(Perm((1, 0)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 147, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 5]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 5]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 148, "in_tiling": {"[0, 4]": "point", "[1, 5]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 5]": "Av(Perm((1, 0)))", "[2, 7]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 0]": "point", "[6, 2]": "point", "[7, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=1, j=5). | "}], "formal_step": "We perform cell insertion into cell (2, 6); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 149, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 5]": "point", "[2, 6]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 4]": "Av(Perm((0, 1)))", "[4, 0]": "point", "[5, 3]": "point", "[6, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=1, j=4). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 117, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 150, "in_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 5]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 5]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=4): Cell(i=1, j=5), Cell(i=2, j=3): Cell(i=3, j=4), Cell(i=3, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=1)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((1, 0))).", "identifier": 151, "in_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av(Perm((1, 0)))", "[1, 5]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av(Perm((1, 0)))", "[1, 5]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 14, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 152, "in_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 5]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 5]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=1, j=4): Cell(i=1, j=5), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=3, j=2)}]", "relation": ""}], "formal_step": "Placing the rightmost point into column 1", "identifier": 117, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 4); either it is empty or Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1))).", "identifier": 14, "in_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((1, 0)))", "[1, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the rightmost point into column 0", "identifier": 20, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1))).", "identifier": 153, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0))).", "identifier": 154, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))", "[0, 2]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)), Perm((0, 2, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0))).", "identifier": 155, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((2, 1, 3, 0)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
