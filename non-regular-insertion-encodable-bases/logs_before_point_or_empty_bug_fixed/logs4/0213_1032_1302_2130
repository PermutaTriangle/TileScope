0213_1032_1302_2130

===========================================
Log created Sun, 21 May 2017 08:10:07

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 269 inferral cache hits and 1292 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2256 tilings in it right now.
There were 1238 tilings of which 183 are verified.
There were 563 SiblingNodes of which 55 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1386* times, (700 originating)
There were 1 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:10:37

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 188 inferral cache hits and 32882 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1793 tilings in it right now.
There were 1036 tilings of which 237 are verified.
There were 515 SiblingNodes of which 121 are verified.

The function splittings called the partitioning cache *32955* times, (234 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:11:07

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 446 inferral cache hits and 1322 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2417 tilings in it right now.
There were 1409 tilings of which 274 are verified.
There were 328 SiblingNodes of which 34 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1420* times, (710 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:11:38

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 342 inferral cache hits and 20910 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2121 tilings in it right now.
There were 1415 tilings of which 179 are verified.
There were 433 SiblingNodes of which 87 are verified.

The function splittings called the partitioning cache *21017* times, (286 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:12:08

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5649 inferral cache hits and 1378 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 1844 tilings in it right now.
There were 1118 tilings of which 101 are verified.
There were 320 SiblingNodes of which 36 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1480* times, (740 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:12:40

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 8171 inferral cache hits and 18555 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 2800 tilings in it right now.
There were 1548 tilings of which 213 are verified.
There were 402 SiblingNodes of which 57 are verified.

The function splittings called the partitioning cache *18686* times, (356 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Sun, 21 May 2017 08:13:10

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 112 inferral cache hits and 1050 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 509 tilings in it right now.
There were 420 tilings of which 191 are verified.
There were 242 SiblingNodes of which 49 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1116* times, (558 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:13:41

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 127 inferral cache hits and 14583 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 651 tilings in it right now.
There were 552 tilings of which 278 are verified.
There were 328 SiblingNodes of which 98 are verified.

The function splittings called the partitioning cache *14654* times, (291 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:14:11

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 164 inferral cache hits and 1041 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 303 tilings in it right now.
There were 269 tilings of which 39 are verified.
There were 61 SiblingNodes of which 15 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1116* times, (558 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:14:41

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 388 inferral cache hits and 3064 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 835 tilings in it right now.
There were 600 tilings of which 159 are verified.
There were 116 SiblingNodes of which 29 are verified.

The function splittings called the partitioning cache *3197* times, (308 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:14:54

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 12 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 21 inferral cache hits and 666 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 224 tilings in it right now.
There were 244 tilings of which 82 are verified.
There were 198 SiblingNodes of which 52 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *706* times, (353 originating)
There were 0 cache misses

A proof tree was found in 12 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     │     ├─────12
                        │           │     │     └─────13
                        │           │     └─────14
                        │           └─────15
                        │                 ├─────16
                        │                 └─────17
                        │                       ├─────18
                        │                       └─────19
                        └─────20
                              ├─────21
                              │     ├─────22
                              │     └─────23
                              └─────24
                                    ├─────25
                                    │     ├─────26
                                    │     └─────27
                                    │           ├─────28
                                    │           │     ├─────29
                                    │           │     └─────30
                                    │           ├─────31
                                    │           └─────32
                                    └─────33

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |2|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((1, 0, 2)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0, 2)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)))

Label: 6

+-+-+-+
|2| |2|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)))

Label: 7

+-+-+-+-+-+
|3| | | |4|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)))
4: Av+(Perm((1, 0)))

Label: 8

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))

Label: 9

+-+-+-+-+-+
|3| | | |4|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)))
4: Av+(Perm((1, 0)))

Label: 10

+-+-+-+-+-+-+-+
|3| | | | | |4|
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)))
4: Av+(Perm((1, 0)))

Label: 11

+-+-+-+-+-+-+
|3| | | | |4|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)))
4: Av+(Perm((1, 0)))

Label: 12

+-+-+-+-+-+
|3| | | |4|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)))
4: Av+(Perm((1, 0)))

Label: 13

+-+
|1|
+-+
1: point

Label: 14

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Label: 15

+-+-+-+-+-+-+
|3| | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)))

Label: 16

+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)))

Label: 17

+-+-+-+-+-+-+
|3| | | | |4|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)))
4: Av+(Perm((1, 0)))

Label: 18

+-+-+-+-+-+
|3| | | |4|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)))
4: Av+(Perm((1, 0)))

Label: 19

+-+
|1|
+-+
1: point

Label: 20

+-+-+-+-+-+
|2| |3| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)))

Label: 21

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)))

Label: 22

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)))

Label: 23

+-+
|1|
+-+
1: point

Label: 24

+-+-+-+-+-+
|3| |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)))
3: Av+(Perm((1, 0, 2)))

Label: 25

+-+-+-+-+
|2| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)))

Label: 26

+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)), Perm((1, 0)))
4: Av(Perm((1, 0, 2)))

Label: 27

+-+-+-+-+-+-+
|3| |2| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)))
3: Av+(Perm((1, 0, 2)))

Label: 28

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)))
3: Av(Perm((1, 0, 2)))

Label: 29

+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)))

Label: 30

+-+-+-+-+
|2| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0, 2)))

Label: 31

+-+
|1|
+-+
1: Av(Perm((1, 0, 2)))

Label: 32

+-+
|1|
+-+
1: point

Label: 33

+-+
|1|
+-+
1: Av(Perm((1, 0, 2)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 138, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 139, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 140, "in_tiling": {"[0, 1]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0, 2)))", "[3, 0]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 141, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "point", "[4, 4]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=3). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 46, "in_tiling": {"[0, 3]": "Av(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=0)]", "identifier": 47, "in_tiling": {"[0, 4]": "Av(Perm((1, 0, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((1, 0, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 4]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=1): Cell(i=1, j=2), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=0): Cell(i=3, j=1), Cell(i=4, j=3): Cell(i=5, j=4)}, {Cell(i=0, j=0): Cell(i=4, j=0)}]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 4, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=2)]", "identifier": 142, "in_tiling": {"[0, 5]": "Av(Perm((1, 0, 2)))", "[1, 3]": "point", "[2, 4]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))", "[5, 0]": "point", "[6, 5]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 5]": "Av(Perm((1, 0, 2)))", "[1, 3]": "point", "[2, 4]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))", "[5, 0]": "point", "[6, 5]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=4): Cell(i=0, j=5), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=3, j=1), Cell(i=4, j=0): Cell(i=5, j=0), Cell(i=5, j=4): Cell(i=6, j=5)}, {Cell(i=0, j=0): Cell(i=4, j=2)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 143, "in_tiling": {"[0, 4]": "Av+(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 6]": "Av(Perm((1, 0, 2)))", "[1, 4]": "point", "[2, 5]": "Av(Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))", "[5, 0]": "point", "[6, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=4). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 101, "in_tiling": {"[0, 3]": "Av+(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=3)]", "identifier": 144, "in_tiling": {"[0, 4]": "Av+(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 4]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 4]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=2): Cell(i=2, j=2), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=4, j=3): Cell(i=5, j=4)}, {Cell(i=0, j=0): Cell(i=4, j=3)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (5, 4); either it is empty or Av+(Perm((1, 0))).", "identifier": 145, "in_tiling": {"[0, 4]": "Av+(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 4]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 3", "identifier": 101, "in_tiling": {"[0, 3]": "Av+(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 3); either it is empty or Av+(Perm((1, 0, 2))).", "identifier": 46, "in_tiling": {"[0, 3]": "Av(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0, 2)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 21, "in_tiling": {"[0, 1]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0)]", "identifier": 146, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 147, "in_tiling": {"[0, 5]": "Av(Perm((1, 0, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 4]": "Av+(Perm((1, 0)))", "[5, 1]": "point"}, "out_tiling": {"[0, 6]": "Av(Perm((1, 0, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 4]": "point", "[5, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[6, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=4). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 148, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((1, 0, 2)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0, 2)))", "[3, 0]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}, {"children": [], "formal_step": "recurse", "identifier": 22, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0, 2)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 0, 2))).", "identifier": 73, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 0, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 0, 2)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 23, "in_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=3), Cell(i=5, j=1)]", "identifier": 70, "in_tiling": {"[0, 4]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((1, 0, 2)))", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0, 2)))", "[5, 1]": "point"}, "out_tiling": {"[0, 4]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((1, 0, 2)))", "[3, 2]": "point", "[4, 3]": "Av(Perm((1, 0, 2)))", "[5, 1]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=4, j=3)}, {Cell(i=0, j=0): Cell(i=5, j=1)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 2", "identifier": 22, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0, 2)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0, 2)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 23, "in_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=2)]", "identifier": 63, "in_tiling": {"[0, 3]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=3), Cell(i=3, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=4, j=2)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 0, 2))).", "identifier": 137, "in_tiling": {"[0, 2]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 0, 2)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 58, "in_tiling": {"[0, 1]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0, 2))).", "identifier": 21, "in_tiling": {"[0, 1]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((1, 0, 2))).", "identifier": 149, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((1, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0))).", "identifier": 150, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)))"}, "recurse": "[]", "relation": ""}}
