0213_0231_1302_3120

===========================================
Log created Sun, 21 May 2017 05:31:49

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 290 inferral cache hits and 1254 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2468 tilings in it right now.
There were 1178 tilings of which 211 are verified.
There were 442 SiblingNodes of which 47 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1344* times, (672 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 05:32:19

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 255 inferral cache hits and 26454 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2545 tilings in it right now.
There were 1180 tilings of which 196 are verified.
There were 438 SiblingNodes of which 50 are verified.

The function splittings called the partitioning cache *26545* times, (301 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 05:32:49

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 405 inferral cache hits and 1365 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2194 tilings in it right now.
There were 1265 tilings of which 258 are verified.
There were 265 SiblingNodes of which 30 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1466* times, (733 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 05:33:19

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 496 inferral cache hits and 17628 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2538 tilings in it right now.
There were 1452 tilings of which 210 are verified.
There were 330 SiblingNodes of which 36 are verified.

The function splittings called the partitioning cache *17750* times, (344 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 05:33:50

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 7440 inferral cache hits and 1320 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2443 tilings in it right now.
There were 1332 tilings of which 276 are verified.
There were 283 SiblingNodes of which 35 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1418* times, (709 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 05:34:20

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 8925 inferral cache hits and 12858 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2839 tilings in it right now.
There were 1547 tilings of which 268 are verified.
There were 324 SiblingNodes of which 32 are verified.

The function splittings called the partitioning cache *12968* times, (308 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 05:34:50

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 71 inferral cache hits and 873 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 809 tilings in it right now.
There were 439 tilings of which 197 are verified.
There were 227 SiblingNodes of which 45 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *928* times, (464 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 05:35:22

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 82 inferral cache hits and 10684 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 808 tilings in it right now.
There were 482 tilings of which 246 are verified.
There were 282 SiblingNodes of which 94 are verified.

The function splittings called the partitioning cache *10743* times, (229 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Sun, 21 May 2017 05:35:52

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 178 inferral cache hits and 1116 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 323 tilings in it right now.
There were 275 tilings of which 39 are verified.
There were 63 SiblingNodes of which 15 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1196* times, (598 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 05:36:22

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 386 inferral cache hits and 3532 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 936 tilings in it right now.
There were 686 tilings of which 193 are verified.
There were 148 SiblingNodes of which 43 are verified.

The function splittings called the partitioning cache *3695* times, (380 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 05:36:30

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 7 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 7 inferral cache hits and 429 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 214 tilings in it right now.
There were 137 tilings of which 80 are verified.
There were 97 SiblingNodes of which 45 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *456* times, (228 originating)
There were 0 cache misses

A proof tree was found in 7 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        └─────14
                              ├─────15
                              │     ├─────16
                              │     └─────17
                              └─────18
                                    ├─────19
                                    └─────20
                                          ├─────21
                                          └─────22
                                                ├─────23
                                                └─────24

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 7

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 8

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))

Label: 9

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 10

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 11

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |5|
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
5: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 14

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 15

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 16

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 17

+-+
|1|
+-+
1: point

Label: 18

+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
4: Av+(Perm((0, 1)))

Label: 19

+-+-+-+-+-+-+-+
| | | | |5| | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | |5| | | |
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| | |4| | | | | |
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av(Perm((0, 1)))

Label: 20

+-+-+-+-+-+-+
|3| |4| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
4: Av(Perm((0, 1)))

Label: 21

+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))

Label: 22

+-+-+-+-+-+-+
|3| |4| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
4: Av+(Perm((0, 1)))

Label: 23

+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))
4: Av+(Perm((0, 1)))

Label: 24

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 46, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 47, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 48, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 49, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 5]": "Av(Perm((0, 1)))", "[4, 3]": "point", "[5, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=3). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0)]", "identifier": 50, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 51, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 3]": "Av+(Perm((1, 0)))", "[3, 0]": "point", "[4, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 5]": "Av+(Perm((1, 0)))", "[5, 0]": "point", "[6, 6]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 52, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1))).", "identifier": 21, "in_tiling": {"[0, 2]": "Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0)]", "identifier": 53, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 54, "in_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 5]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 6]": "Av+(Perm((0, 1)))", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 5]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 7]": "Av(Perm((0, 1)))", "[5, 6]": "point", "[6, 1]": "point", "[7, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=6). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 55, "in_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 12, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=3)]", "identifier": 56, "in_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 4]": "Av+(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 4]": "Av+(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=4, j=1), Cell(i=4, j=2): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=3)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((0, 1))).", "identifier": 30, "in_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 3", "identifier": 12, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 22, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 5, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 2, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1))).", "identifier": 57, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0))).", "identifier": 58, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
