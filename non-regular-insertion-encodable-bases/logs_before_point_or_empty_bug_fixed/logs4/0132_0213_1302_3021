0132_0213_1302_3021

===========================================
Log created Sat, 20 May 2017 11:07:57

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 258 inferral cache hits and 1263 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2315 tilings in it right now.
There were 1198 tilings of which 125 are verified.
There were 521 SiblingNodes of which 40 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1354* times, (677 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 11:08:27

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 221 inferral cache hits and 21962 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1845 tilings in it right now.
There were 954 tilings of which 190 are verified.
There were 432 SiblingNodes of which 100 are verified.

The function splittings called the partitioning cache *22034* times, (232 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 11:08:57

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 499 inferral cache hits and 1356 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2517 tilings in it right now.
There were 1502 tilings of which 264 are verified.
There were 391 SiblingNodes of which 33 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1456* times, (728 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 11:09:27

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 421 inferral cache hits and 15885 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2364 tilings in it right now.
There were 1442 tilings of which 60 are verified.
There were 354 SiblingNodes of which 24 are verified.

The function splittings called the partitioning cache *16014* times, (355 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 11:09:57

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6063 inferral cache hits and 1329 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2012 tilings in it right now.
There were 1160 tilings of which 60 are verified.
There were 289 SiblingNodes of which 24 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1428* times, (714 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 11:10:27

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 7805 inferral cache hits and 14880 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2677 tilings in it right now.
There were 1427 tilings of which 189 are verified.
There were 363 SiblingNodes of which 54 are verified.

The function splittings called the partitioning cache *15017* times, (376 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 11:10:59

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 124 inferral cache hits and 1182 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 772 tilings in it right now.
There were 555 tilings of which 183 are verified.
There were 309 SiblingNodes of which 49 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1256* times, (628 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Sat, 20 May 2017 11:11:30

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 132 inferral cache hits and 19286 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 868 tilings in it right now.
There were 673 tilings of which 232 are verified.
There were 405 SiblingNodes of which 90 are verified.

The function splittings called the partitioning cache *19368* times, (351 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 11:12:00

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 170 inferral cache hits and 1071 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 319 tilings in it right now.
There were 276 tilings of which 40 are verified.
There were 62 SiblingNodes of which 16 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1148* times, (574 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 11:12:31

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 363 inferral cache hits and 2600 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 759 tilings in it right now.
There were 576 tilings of which 85 are verified.
There were 100 SiblingNodes of which 21 are verified.

The function splittings called the partitioning cache *2726* times, (286 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 11:13:06

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 35 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 61 inferral cache hits and 995 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 548 tilings in it right now.
There were 401 tilings of which 102 are verified.
There were 270 SiblingNodes of which 40 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1054* times, (527 originating)
There were 0 cache misses

No proof tree was found after 35 seconds

===========================================
Log created Sat, 20 May 2017 11:13:42

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 36 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 83 inferral cache hits and 41481 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 664 tilings in it right now.
There were 509 tilings of which 159 are verified.
There were 351 SiblingNodes of which 86 are verified.

The function splittings called the partitioning cache *41550* times, (344 originating)
There were 0 cache misses

No proof tree was found after 36 seconds

===========================================
Log created Sat, 20 May 2017 11:14:15

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 32 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 130 inferral cache hits and 928 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 239 tilings in it right now.
There were 212 tilings of which 29 are verified.
There were 49 SiblingNodes of which 14 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *994* times, (497 originating)
There were 0 cache misses

No proof tree was found after 32 seconds

===========================================
Log created Sat, 20 May 2017 11:14:45

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 350 inferral cache hits and 3170 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 616 tilings in it right now.
There were 474 tilings of which 64 are verified.
There were 80 SiblingNodes of which 19 are verified.

The function splittings called the partitioning cache *3290* times, (300 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 11:15:21

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 36 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 49 inferral cache hits and 632 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 574 tilings in it right now.
There were 272 tilings of which 201 are verified.
There were 102 SiblingNodes of which 35 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *674* times, (337 originating)
There were 0 cache misses

No proof tree was found after 36 seconds

===========================================
Log created Sat, 20 May 2017 11:15:31

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 9 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 60 inferral cache hits and 2134 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 819 tilings in it right now.
There were 393 tilings of which 307 are verified.
There were 157 SiblingNodes of which 73 are verified.

The function splittings called the partitioning cache *2186* times, (182 originating)
There were 0 cache misses

A proof tree was found in 9 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        └─────14
                              ├─────15
                              └─────16
                                    ├─────17
                                    │     ├─────18
                                    │     └─────19
                                    │           ├─────20
                                    │           │     ├─────21
                                    │           │     └─────22
                                    │           └─────23
                                    └─────24
                                          ├─────25
                                          ├─────26
                                          └─────27

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point

Label: 6

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 7

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 8

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 9

+-+-+-+
|4| | |
+-+-+-+
| | |2|
+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1)))
4: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 10

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 11

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1)))
4: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 14

+-+-+-+
|4| | |
+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)))
4: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))

Label: 15

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))

Label: 16

+-+-+-+
|4| | |
+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)))
4: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))

Label: 17

+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)))

Label: 18

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)))

Label: 19

+-+-+-+-+
| | |2| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)))

Label: 20

+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)))

Label: 21

+-+-+-+
| |2| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 22

+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)))

Label: 23

+-+
|1|
+-+
1: point

Label: 24

+-+-+-+
|4| | |
+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
4: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))

Label: 25

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | |5| | | | |
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((0, 2, 1)), Perm((1, 0, 2)))
5: Av(Perm((1, 0)))

Label: 26

+-+-+-+-+-+-+-+
| | | |5| | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((1, 0)))
4: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))

Label: 27

+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 22, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 23, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 24, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 1]": "point", "[3, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 25, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 12, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 26, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=2)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 27, "in_tiling": {"[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 2]": "Av+(Perm((0, 2, 1)))", "[2, 0]": "Av+(Perm((0, 2, 1)))", "[3, 1]": "point", "[4, 3]": "point"}, "out_tiling": {"[0, 6]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 4]": "Av(Perm((0, 2, 1)))", "[2, 2]": "Av(Perm((0, 2, 1)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 2, 1)))", "[5, 1]": "point", "[6, 5]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=1, j=2). | "}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 28, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 20, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 29, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[2, 2]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[3, 3]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 30, "in_tiling": {"[0, 3]": "Av+(Perm((0, 2, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 2, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)))", "[2, 4]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 0]": "point", "[5, 6]": "point", "[6, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=3). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 31, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 32, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 21, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 33, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 4]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 4]": "point", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=3): Cell(i=1, j=3), Cell(i=2, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=4)}]", "relation": ""}], "formal_step": "Placing the rightmost point into column 0", "identifier": 32, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 34, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 5]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[3, 3]": "Av+(Perm((1, 0)))", "[4, 4]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 6]": "point", "[3, 7]": "Av(Perm((1, 0)))", "[4, 5]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[5, 3]": "Av+(Perm((1, 0)))", "[6, 4]": "point", "[7, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=2, j=5). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 35, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 6]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[4, 4]": "Av(Perm((1, 0)))", "[5, 5]": "point", "[6, 1]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 7]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[5, 5]": "Av(Perm((1, 0)))", "[6, 6]": "point", "[7, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | "}, {"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 36, "in_tiling": {"[0, 4]": "point", "[1, 0]": "point", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 0]": "point", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the leftmost point into column 0", "identifier": 37, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[0, 4]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[0, 4]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 4); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2))).", "identifier": 38, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 18, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the rightmost point into column 0", "identifier": 12, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1))).", "identifier": 39, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 40, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1))).", "identifier": 41, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": ""}}
