0132_0213_0231_0312

===========================================
Log created Sat, 20 May 2017 07:02:17

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 238 inferral cache hits and 1661 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2036 tilings in it right now.
There were 1155 tilings of which 261 are verified.
There were 553 SiblingNodes of which 73 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1780* times, (890 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 07:02:47

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 187 inferral cache hits and 21509 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1583 tilings in it right now.
There were 970 tilings of which 203 are verified.
There were 508 SiblingNodes of which 87 are verified.

The function splittings called the partitioning cache *21599* times, (300 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 07:03:17

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 375 inferral cache hits and 1494 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1564 tilings in it right now.
There were 1077 tilings of which 111 are verified.
There were 347 SiblingNodes of which 35 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1604* times, (802 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 07:03:48

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 570 inferral cache hits and 11755 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2355 tilings in it right now.
There were 1525 tilings of which 412 are verified.
There were 379 SiblingNodes of which 56 are verified.

The function splittings called the partitioning cache *11907* times, (429 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 07:04:18

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5536 inferral cache hits and 1481 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 1732 tilings in it right now.
There were 1127 tilings of which 103 are verified.
There were 388 SiblingNodes of which 37 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1590* times, (795 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 07:04:46

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 27 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6622 inferral cache hits and 9708 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2236 tilings in it right now.
There were 1316 tilings of which 360 are verified.
There were 390 SiblingNodes of which 66 are verified.

The function splittings called the partitioning cache *9836* times, (363 originating)
There were 0 cache misses

A proof tree was found in 27 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10
                              ├─────11
                              └─────12
                                    ├─────13
                                    │     ├─────14
                                    │     └─────15
                                    └─────16

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
We use his sibling for the next strategy
+-+
|2|
+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
2: point

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+
|2|
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
2: point
We use his sibling for the next strategy
+-+
|2|
+-+
|2|
+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
2: point

Label: 5

+-+-+-+
| | |3|
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
2: Av(Perm((0, 2, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: point

Label: 6

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 2, 1)))
2: point

Label: 7

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: point
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))

Label: 8

+-+-+-+
|3| | |
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 1)))
3: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
4: point

Label: 9

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: point
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
2: point

Label: 10

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 2, 1)))
3: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
4: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|4| | | | |4|
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: point
4: Av(Perm((0, 1)))

Label: 11

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 12

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: point
4: Av(Perm((0, 1)))

Label: 13

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: point

Label: 14

+-+
|1|
+-+
1: point

Label: 15

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: point
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))

Label: 16

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |4|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
3: point
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 2, 1)))
3: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))
4: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 43, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 44, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 14, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=1) in its column. | The reverse of: Separating the topmost point from cell Cell(i=0, j=0). | "}], "formal_step": "A splitting of the tiling", "identifier": 45, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[2, 3]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 3]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=1, j=1): Cell(i=1, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0), Cell(i=1, j=1): Cell(i=3, j=3), Cell(i=2, j=0): Cell(i=4, j=0)}]", "relation": "| Isolating the point at Cell(i=2, j=3) in its column. | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 46, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=2) in its column. | The reverse of: Separating the topmost point from cell Cell(i=1, j=0). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 37, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 14, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=1) in its column. | The reverse of: Separating the topmost point from cell Cell(i=0, j=0). | "}], "formal_step": "A splitting of the tiling", "identifier": 19, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=1)}, {Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=1, j=1): Cell(i=2, j=2), Cell(i=2, j=0): Cell(i=3, j=0)}]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 47, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[3, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=3, j=2). | Isolating the point at Cell(i=2, j=4) in its column. | The reverse of: Isolating the point at Cell(i=2, j=2) in its row. | The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (3, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 38, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[3, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[2, 3]": "point", "[3, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[3, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 47, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 2, 1)))", "[4, 3]": "point", "[5, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[5, 2]": "Av(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=2, j=4)}, {Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=2, j=3): Cell(i=4, j=3), Cell(i=3, j=0): Cell(i=5, j=0), Cell(i=3, j=2): Cell(i=5, j=2)}]", "relation": "| Separting the rightmost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=2, j=2) in its row. | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 48, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))", "[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "recurse": "[]", "relation": "| Isolating the point at Cell(i=0, j=2) in its column. | "}], "formal_step": "Isolated the point at Cell(i=0, j=1) in its column", "identifier": 49, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[0, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[0, 1]": "point", "[0, 2]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2))).", "identifier": 14, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))", "[0, 1]": "point"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2))).", "identifier": 50, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)))"}, "recurse": "[]", "relation": ""}}
