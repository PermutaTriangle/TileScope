0213_1230_1302_1320

===========================================
Log created Sun, 21 May 2017 08:57:58

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 219 inferral cache hits and 1278 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2267 tilings in it right now.
There were 1151 tilings of which 130 are verified.
There were 515 SiblingNodes of which 46 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1370* times, (685 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:58:28

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 283 inferral cache hits and 34885 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2111 tilings in it right now.
There were 1139 tilings of which 94 are verified.
There were 547 SiblingNodes of which 56 are verified.

The function splittings called the partitioning cache *34981* times, (314 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sun, 21 May 2017 08:58:53

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 25 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 260 inferral cache hits and 1230 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1617 tilings in it right now.
There were 1048 tilings of which 227 are verified.
There were 310 SiblingNodes of which 39 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1322* times, (661 originating)
There were 0 cache misses

A proof tree was found in 25 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           └─────11
                        └─────12
                              ├─────13
                              ├─────14
                              ├─────15
                              ├─────16
                              └─────17

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
We use his sibling for the next strategy
+-+-+
|1|2|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point

Label: 3

+-+
|1|
+-+
1: point

Label: 4

+-+-+
|1|2|
+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point
We use his sibling for the next strategy
+-+-+
|1|2|
+-+-+
1: point
2: Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point

Label: 6

+-+-+-+-+
| | |1| |
+-+-+-+-+
|1|2| |3|
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
3: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|4| | | |5|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
3: point
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
5: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))

Label: 7

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
3: point
4: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))

Label: 8

+-+-+-+-+
| | | |2|
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))

Label: 9

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|4| | | | |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
3: point
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |3| | | |
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | | | |1| |2|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
3: point
4: Av(Perm((0, 1)))

Label: 10

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | |1| |2|
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
3: point
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point
3: Av(Perm((0, 1)))

Label: 11

+-+-+-+-+-+-+-+
| | | |4| | | |
+-+-+-+-+-+-+-+
|5| | | | | | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| | | | |2| |3|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
4: point
5: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | | | | |2| | | |
+-+-+-+-+-+-+-+-+-+
|6| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |2| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |5| | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |4|
+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+
| |3| | | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |2| | | | | |
+-+-+-+-+-+-+-+-+-+
| | |1| | | | | | |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
5: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))
6: Av(Perm((0, 1)))

Label: 12

+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|3| | | |4|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
|6| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |5| |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |4| |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))
2: point
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))
4: Av(Perm((1, 0)))
5: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))
6: Av(Perm((0, 1)))

Label: 13

+-+-+-+
| |3| |
+-+-+-+
| | |1|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))
3: Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))

Label: 14

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 15

+-+
|1|
+-+
1: Av(Perm((0, 1, 2)), Perm((0, 2, 1)))

Label: 16

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))

Label: 17

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 99, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 100, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 101, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 102, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[2, 1]": "point", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[2, 1]": "point", "[3, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 103, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=3, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 104, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[2, 3]": "point", "[3, 5]": "point", "[4, 1]": "Av(Perm((1, 0)))", "[5, 2]": "point", "[6, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 7]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 1]": "point", "[4, 6]": "point", "[5, 8]": "point", "[6, 5]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))", "[7, 3]": "point", "[8, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=4, j=1). | Inserting the bottom most point in to the cell Cell(i=4, j=1). | Inserting the right most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 3, 0))).", "identifier": 105, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[2, 2]": "point", "[3, 4]": "point", "[4, 1]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[2, 3]": "point", "[3, 5]": "point", "[4, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[5, 2]": "point", "[6, 1]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=1). | "}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0))).", "identifier": 106, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[2, 2]": "point", "[3, 4]": "point", "[4, 1]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[2, 2]": "point", "[3, 4]": "point", "[4, 1]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 107, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[1, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=1, j=1). | Inserting the bottom most point in to the cell Cell(i=1, j=1). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 11, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 75, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 68, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 100, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=6), Cell(i=1, j=2), Cell(i=2, j=0), Cell(i=4, j=7)]", "identifier": 108, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[2, 1]": "point", "[3, 3]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[3, 1]": "point", "[4, 7]": "point", "[5, 3]": "Av(Perm((1, 0)))", "[5, 5]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)), Perm((1, 0, 2)))", "[6, 4]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=3, j=1), Cell(i=1, j=1): Cell(i=5, j=3), Cell(i=1, j=3): Cell(i=5, j=5), Cell(i=2, j=2): Cell(i=6, j=4)}, {Cell(i=0, j=0): Cell(i=0, j=6)}, {Cell(i=0, j=0): Cell(i=1, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}, {Cell(i=0, j=0): Cell(i=4, j=7)}]", "relation": "| Inserting the right most point in to the cell Cell(i=4, j=2). | "}], "formal_step": "We perform cell insertion into cell (4, 3); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0))).", "identifier": 109, "in_tiling": {"[0, 0]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((0, 2, 1)))", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)))", "[2, 2]": "point", "[3, 4]": "point", "[4, 1]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[4, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Separting the leftmost point from cell Cell(i=0, j=0). | Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "Placing the maximum point into row 0", "identifier": 110, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[1, 0]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| Separting the leftmost point from cell Cell(i=0, j=0). | The reverse of: Separting the rightmost point from cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0))).", "identifier": 65, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0))).", "identifier": 111, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}}
