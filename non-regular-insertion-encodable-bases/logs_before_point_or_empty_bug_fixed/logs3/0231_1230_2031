0231_1230_2031

===========================================
Log created Sat, 20 May 2017 19:31:17

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 258 inferral cache hits and 1388 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1753 tilings in it right now.
There were 960 tilings of which 109 are verified.
There were 460 SiblingNodes of which 51 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1488* times, (744 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 19:31:47

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 215 inferral cache hits and 22989 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1782 tilings in it right now.
There were 977 tilings of which 99 are verified.
There were 459 SiblingNodes of which 47 are verified.

The function splittings called the partitioning cache *23078* times, (296 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 19:32:17

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 267 inferral cache hits and 1369 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 1342 tilings in it right now.
There were 894 tilings of which 75 are verified.
There were 248 SiblingNodes of which 27 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1470* times, (735 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 19:32:47

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 392 inferral cache hits and 15160 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1970 tilings in it right now.
There were 1278 tilings of which 120 are verified.
There were 348 SiblingNodes of which 32 are verified.

The function splittings called the partitioning cache *15282* times, (345 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 19:33:18

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4350 inferral cache hits and 1352 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1477 tilings in it right now.
There were 904 tilings of which 70 are verified.
There were 263 SiblingNodes of which 27 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1452* times, (726 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 19:33:48

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6305 inferral cache hits and 12711 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2011 tilings in it right now.
There were 1208 tilings of which 92 are verified.
There were 345 SiblingNodes of which 34 are verified.

The function splittings called the partitioning cache *12827* times, (333 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 19:34:33

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 45 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 38 inferral cache hits and 719 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 298 tilings in it right now.
There were 213 tilings of which 89 are verified.
There were 137 SiblingNodes of which 31 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *766* times, (383 originating)
There were 0 cache misses

No proof tree was found after 45 seconds

===========================================
Log created Sat, 20 May 2017 19:35:17

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 43 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 88 inferral cache hits and 48247 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 437 tilings in it right now.
There were 518 tilings of which 187 are verified.
There were 404 SiblingNodes of which 117 are verified.

The function splittings called the partitioning cache *48311* times, (256 originating)
There were 0 cache misses

No proof tree was found after 43 seconds

===========================================
Log created Sat, 20 May 2017 19:35:47

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 179 inferral cache hits and 1073 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 315 tilings in it right now.
There were 284 tilings of which 46 are verified.
There were 62 SiblingNodes of which 16 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1150* times, (575 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 19:36:18

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 386 inferral cache hits and 3880 partitioning cache hits.
The partitioning cache had 11 tilings in it right now.
The inferral cache has 789 tilings in it right now.
There were 663 tilings of which 171 are verified.
There were 147 SiblingNodes of which 43 are verified.

The function splittings called the partitioning cache *4047* times, (434 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 19:36:51

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 33 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 7 inferral cache hits and 501 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 123 tilings in it right now.
There were 101 tilings of which 31 are verified.
There were 85 SiblingNodes of which 16 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *532* times, (266 originating)
There were 0 cache misses

No proof tree was found after 33 seconds

===========================================
Log created Sat, 20 May 2017 19:37:25

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 34 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 16 inferral cache hits and 4260 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 164 tilings in it right now.
There were 146 tilings of which 51 are verified.
There were 118 SiblingNodes of which 24 are verified.

The function splittings called the partitioning cache *4301* times, (194 originating)
There were 0 cache misses

No proof tree was found after 34 seconds

===========================================
Log created Sat, 20 May 2017 19:37:59

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 33 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 114 inferral cache hits and 838 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 183 tilings in it right now.
There were 167 tilings of which 22 are verified.
There were 40 SiblingNodes of which 12 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *898* times, (449 originating)
There were 0 cache misses

No proof tree was found after 33 seconds

===========================================
Log created Sat, 20 May 2017 19:38:29

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 310 inferral cache hits and 3160 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 515 tilings in it right now.
There were 422 tilings of which 79 are verified.
There were 83 SiblingNodes of which 23 are verified.

The function splittings called the partitioning cache *3286* times, (315 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 19:38:33

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 4 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4 inferral cache hits and 310 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 152 tilings in it right now.
There were 121 tilings of which 57 are verified.
There were 83 SiblingNodes of which 27 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *332* times, (166 originating)
There were 0 cache misses

A proof tree was found in 4 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     │     ├─────10
                        │     │     │     └─────11
                        │     │     └─────12
                        │     └─────13
                        │           ├─────14
                        │           ├─────15
                        │           ├─────16
                        │           ├─────17
                        │           └─────18
                        └─────19
                              ├─────20
                              ├─────21
                              └─────22

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 2, 0)))

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point

Label: 6

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 2, 0)))

Label: 7

+-+-+-+
| | |4|
+-+-+-+
|2| | |
+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((1, 2, 0)))
4: Av+(Perm((1, 2, 0)))

Label: 8

+-+-+-+
| | |3|
+-+-+-+
|2| | |
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 2, 0)))

Label: 9

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 2, 0)))

Label: 10

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av+(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((1, 2, 0)))

Label: 11

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 2, 0)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 2, 0)))
4: Av(Perm((1, 2, 0)))

Label: 14

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 2, 0)))

Label: 15

+-+
|1|
+-+
1: point

Label: 16

+-+
|1|
+-+
1: point

Label: 17

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)))

Label: 18

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)))

Label: 19

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 20

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))
2: point
3: Av(Perm((1, 2, 0)))

Label: 21

+-+
|1|
+-+
1: point

Label: 22

+-+
|1|
+-+
1: Av(Perm((1, 2, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 26, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 27, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 28, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 29, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "Av(Perm((1, 2, 0)))", "[3, 3]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=1, j=1). | "}, {"children": [], "formal_step": "recurse", "identifier": 30, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1))).", "identifier": 11, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1)]", "identifier": 31, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[2, 3]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[2, 3]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 11, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=3), Cell(i=3, j=5), Cell(i=4, j=4), Cell(i=5, j=6)]", "identifier": 32, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[2, 2]": "Av+(Perm((1, 2, 0)))", "[3, 4]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[2, 2]": "Av+(Perm((1, 2, 0)))", "[3, 5]": "point", "[4, 4]": "Av(Perm((1, 2, 0)))", "[5, 6]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=0, j=3)}, {Cell(i=0, j=0): Cell(i=3, j=5)}, {Cell(i=0, j=0): Cell(i=4, j=4)}, {Cell(i=0, j=0): Cell(i=5, j=6)}]", "relation": "| Inserting the left most point in to the cell Cell(i=3, j=4). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 2, 0))).", "identifier": 33, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[2, 4]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=3), Cell(i=3, j=4)]", "identifier": 34, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[2, 2]": "Av(Perm((1, 2, 0)))", "[3, 4]": "Av(Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=3)}, {Cell(i=0, j=0): Cell(i=3, j=4)}]", "relation": ""}], "formal_step": "Placing the leftmost point into column 1", "identifier": 30, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av+(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((1, 2, 0))).", "identifier": 2, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1))).", "identifier": 35, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1))).", "identifier": 36, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((1, 2, 3, 0)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}}
