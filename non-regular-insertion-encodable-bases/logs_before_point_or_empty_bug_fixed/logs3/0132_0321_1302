0132_0321_1302

===========================================
Log created Sat, 20 May 2017 06:29:38

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 277 inferral cache hits and 1345 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1861 tilings in it right now.
There were 1059 tilings of which 83 are verified.
There were 523 SiblingNodes of which 45 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1442* times, (721 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:30:10

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 213 inferral cache hits and 37400 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1260 tilings in it right now.
There were 862 tilings of which 211 are verified.
There were 498 SiblingNodes of which 127 are verified.

The function splittings called the partitioning cache *37467* times, (208 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Sat, 20 May 2017 06:30:40

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 226 inferral cache hits and 1330 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 965 tilings in it right now.
There were 685 tilings of which 56 are verified.
There were 195 SiblingNodes of which 18 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1428* times, (714 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:31:10

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 557 inferral cache hits and 18678 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2144 tilings in it right now.
There were 1335 tilings of which 112 are verified.
There were 417 SiblingNodes of which 60 are verified.

The function splittings called the partitioning cache *18815* times, (376 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:31:40

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5918 inferral cache hits and 1459 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2075 tilings in it right now.
There were 1202 tilings of which 99 are verified.
There were 381 SiblingNodes of which 46 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1568* times, (784 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:32:11

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 7901 inferral cache hits and 11482 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2858 tilings in it right now.
There were 1567 tilings of which 183 are verified.
There were 473 SiblingNodes of which 62 are verified.

The function splittings called the partitioning cache *11637* times, (402 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:32:58

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 47 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 35 inferral cache hits and 717 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 266 tilings in it right now.
There were 176 tilings of which 99 are verified.
There were 106 SiblingNodes of which 33 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *764* times, (382 originating)
There were 0 cache misses

No proof tree was found after 47 seconds

===========================================
Log created Sat, 20 May 2017 06:33:29

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 75 inferral cache hits and 21886 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 632 tilings in it right now.
There were 514 tilings of which 221 are verified.
There were 342 SiblingNodes of which 101 are verified.

The function splittings called the partitioning cache *21971* times, (352 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:33:59

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 179 inferral cache hits and 1071 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 302 tilings in it right now.
There were 277 tilings of which 43 are verified.
There were 63 SiblingNodes of which 17 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1148* times, (574 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:34:30

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 525 inferral cache hits and 4440 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 995 tilings in it right now.
There were 805 tilings of which 232 are verified.
There were 155 SiblingNodes of which 46 are verified.

The function splittings called the partitioning cache *4610* times, (438 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Sat, 20 May 2017 06:35:00

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 11 inferral cache hits and 626 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 214 tilings in it right now.
There were 171 tilings of which 58 are verified.
There were 131 SiblingNodes of which 25 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *664* times, (332 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:35:38

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 38 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 27 inferral cache hits and 9502 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 272 tilings in it right now.
There were 221 tilings of which 86 are verified.
There were 171 SiblingNodes of which 42 are verified.

The function splittings called the partitioning cache *9558* times, (271 originating)
There were 0 cache misses

No proof tree was found after 38 seconds

===========================================
Log created Sat, 20 May 2017 06:36:11

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 32 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 110 inferral cache hits and 838 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 179 tilings in it right now.
There were 167 tilings of which 22 are verified.
There were 40 SiblingNodes of which 12 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *898* times, (449 originating)
There were 0 cache misses

No proof tree was found after 32 seconds

===========================================
Log created Sat, 20 May 2017 06:36:41

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 311 inferral cache hits and 3497 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 519 tilings in it right now.
There were 425 tilings of which 81 are verified.
There were 85 SiblingNodes of which 22 are verified.

The function splittings called the partitioning cache *3628* times, (339 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:37:15

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 33 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 76 inferral cache hits and 749 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 310 tilings in it right now.
There were 247 tilings of which 138 are verified.
There were 131 SiblingNodes of which 32 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *798* times, (399 originating)
There were 0 cache misses

No proof tree was found after 33 seconds

===========================================
Log created Sat, 20 May 2017 06:37:30

Maximum depth fully searched was 6

Maximum time set at 30 seconds

Total time taken was 15 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 97 inferral cache hits and 8253 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 414 tilings in it right now.
There were 352 tilings of which 201 are verified.
There were 192 SiblingNodes of which 67 are verified.

The function splittings called the partitioning cache *8310* times, (228 originating)
There were 0 cache misses

A proof tree was found in 15 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     └─────11
                        │           ├─────12
                        │           ├─────13
                        │           └─────14
                        └─────15
                              ├─────16
                              └─────17
                                    ├─────18
                                    └─────19
                                          ├─────20
                                          ├─────21
                                          └─────22

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 6

+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point

Label: 7

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 8

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 9

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 10

+-+
|1|
+-+
1: point

Label: 11

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 12

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 13

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 14

+-+
|1|
+-+
1: point

Label: 15

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 16

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 17

+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 18

+-+-+-+-+-+-+
|4| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
4: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 19

+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 20

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 21

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 22

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 67, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 68, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 69, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 12, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 70, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=2)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 12, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 71, "in_tiling": {"[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 1]": "point", "[3, 3]": "point"}, "out_tiling": {"[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 1]": "point", "[3, 3]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=4)}, {Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=0, j=2): Cell(i=1, j=2), Cell(i=1, j=1): Cell(i=2, j=1)}, {Cell(i=0, j=0): Cell(i=3, j=3)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 72, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 73, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 74, "in_tiling": {"[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 4]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 4]": "point", "[5, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 31, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 75, "in_tiling": {"[0, 6]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 4]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[3, 3]": "point", "[4, 5]": "point", "[5, 1]": "point"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 4]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 0]": "Av+(Perm((0, 1)))", "[2, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[3, 3]": "point", "[4, 5]": "point", "[5, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=6)}, {Cell(i=0, j=4): Cell(i=1, j=4), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=1, j=2): Cell(i=2, j=2), Cell(i=2, j=3): Cell(i=3, j=3), Cell(i=3, j=1): Cell(i=5, j=1)}, {Cell(i=0, j=0): Cell(i=4, j=5)}]", "relation": ""}], "formal_step": "Placing the rightmost point into column 1", "identifier": 76, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 31, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 1)))", "[1, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the rightmost point into column 0", "identifier": 77, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 12, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 5, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 0, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}}
