0213_1302_3120

===========================================
Log created Sat, 20 May 2017 15:48:55

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 179 inferral cache hits and 1181 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2290 tilings in it right now.
There were 1030 tilings of which 114 are verified.
There were 404 SiblingNodes of which 32 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1266* times, (633 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 15:49:25

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 217 inferral cache hits and 24989 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2404 tilings in it right now.
There were 1092 tilings of which 141 are verified.
There were 422 SiblingNodes of which 49 are verified.

The function splittings called the partitioning cache *25072* times, (274 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 15:49:55

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 252 inferral cache hits and 1242 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1478 tilings in it right now.
There were 905 tilings of which 143 are verified.
There were 219 SiblingNodes of which 19 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1334* times, (667 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 15:50:25

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 436 inferral cache hits and 13040 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2453 tilings in it right now.
There were 1422 tilings of which 182 are verified.
There were 318 SiblingNodes of which 38 are verified.

The function splittings called the partitioning cache *13148* times, (303 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 15:50:56

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6809 inferral cache hits and 1333 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2253 tilings in it right now.
There were 1243 tilings of which 180 are verified.
There were 277 SiblingNodes of which 31 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1432* times, (716 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 15:51:26

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 7719 inferral cache hits and 15007 partitioning cache hits.
The partitioning cache had 8 tilings in it right now.
The inferral cache has 2459 tilings in it right now.
There were 1395 tilings of which 98 are verified.
There were 348 SiblingNodes of which 30 are verified.

The function splittings called the partitioning cache *15116* times, (306 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 15:51:57

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 79 inferral cache hits and 910 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 714 tilings in it right now.
There were 417 tilings of which 179 are verified.
There were 241 SiblingNodes of which 43 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *968* times, (484 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 15:52:27

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 81 inferral cache hits and 30337 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 819 tilings in it right now.
There were 599 tilings of which 278 are verified.
There were 407 SiblingNodes of which 134 are verified.

The function splittings called the partitioning cache *30400* times, (238 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 15:53:02

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 34 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 200 inferral cache hits and 1221 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 339 tilings in it right now.
There were 294 tilings of which 40 are verified.
There were 68 SiblingNodes of which 16 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1308* times, (654 originating)
There were 0 cache misses

No proof tree was found after 34 seconds

===========================================
Log created Sat, 20 May 2017 15:53:33

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 412 inferral cache hits and 3996 partitioning cache hits.
The partitioning cache had 12 tilings in it right now.
The inferral cache has 898 tilings in it right now.
There were 698 tilings of which 171 are verified.
There were 154 SiblingNodes of which 41 are verified.

The function splittings called the partitioning cache *4165* times, (417 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 15:53:52

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 18 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 27 inferral cache hits and 585 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 345 tilings in it right now.
There were 218 tilings of which 111 are verified.
There were 146 SiblingNodes of which 56 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *620* times, (310 originating)
There were 0 cache misses

A proof tree was found in 18 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        └─────14
                              ├─────15
                              │     ├─────16
                              │     └─────17
                              └─────18
                                    ├─────19
                                    └─────20
                                          ├─────21
                                          │     ├─────22
                                          │     └─────23
                                          │           ├─────24
                                          │           └─────25
                                          └─────26

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 7

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 8

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 9

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 10

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 11

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | | | |5|
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))
5: Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 14

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0, 2)), Perm((2, 0, 1)))
4: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 15

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 16

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
3: Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))

Label: 17

+-+
|1|
+-+
1: point

Label: 18

+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 19

+-+-+-+-+-+-+-+
| | | | |5| | |
+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 20

+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
|3| |4| | | | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
4: Av(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 21

+-+-+-+-+-+-+
|3| |4| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
4: Av(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 22

+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))

Label: 23

+-+-+-+-+-+-+
|3| |4| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 24

+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))

Label: 25

+-+
|1|
+-+
1: point

Label: 26

+-+-+-+-+-+-+
| | | |4| | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | | |5| | |
+-+-+-+-+-+-+-+-+
| | |4| | | | | |
+-+-+-+-+-+-+-+-+
|3| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
5: Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 83, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 84, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 85, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 86, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 5, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0)]", "identifier": 87, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 88, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 3]": "Av+(Perm((1, 0)))", "[3, 0]": "point", "[4, 4]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 5]": "Av+(Perm((1, 0)))", "[5, 0]": "point", "[6, 6]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 89, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3))).", "identifier": 21, "in_tiling": {"[0, 2]": "Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0)]", "identifier": 90, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 91, "in_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 5]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 6]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 5]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 6]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 92, "in_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 8, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=3)]", "identifier": 64, "in_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=4, j=1), Cell(i=4, j=2): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=3)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((1, 0, 2)), Perm((2, 0, 1))).", "identifier": 93, "in_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 94, "in_tiling": {"[0, 4]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 5]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 6]": "Av(Perm((1, 0)))", "[3, 0]": "point", "[4, 3]": "point", "[5, 7]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[6, 1]": "point", "[7, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=4). | "}], "formal_step": "We perform cell insertion into cell (4, 5); either it is empty or Av+(Perm((1, 0, 2)), Perm((2, 0, 1))).", "identifier": 55, "in_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 5]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 3]": "point", "[4, 5]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 3", "identifier": 8, "in_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 0, 2)), Perm((2, 0, 1))).", "identifier": 20, "in_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 0, 2)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 5, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((3, 1, 2, 0))).", "identifier": 2, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((2, 0, 1)), Perm((0, 2, 1, 3))).", "identifier": 95, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((2, 0, 1)), Perm((0, 2, 1, 3)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0))).", "identifier": 96, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
