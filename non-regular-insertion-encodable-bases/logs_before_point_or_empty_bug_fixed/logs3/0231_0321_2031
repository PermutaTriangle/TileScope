0231_0321_2031

===========================================
Log created Sat, 20 May 2017 17:21:47

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 234 inferral cache hits and 1246 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1601 tilings in it right now.
There were 957 tilings of which 70 are verified.
There were 491 SiblingNodes of which 38 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1336* times, (668 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 17:22:17

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 211 inferral cache hits and 23548 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1896 tilings in it right now.
There were 1011 tilings of which 79 are verified.
There were 485 SiblingNodes of which 37 are verified.

The function splittings called the partitioning cache *23646* times, (323 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 17:22:48

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 221 inferral cache hits and 1296 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 1234 tilings in it right now.
There were 850 tilings of which 79 are verified.
There were 244 SiblingNodes of which 23 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1392* times, (696 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 17:23:18

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 499 inferral cache hits and 17136 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1815 tilings in it right now.
There were 1296 tilings of which 127 are verified.
There were 436 SiblingNodes of which 65 are verified.

The function splittings called the partitioning cache *17276* times, (394 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 17:23:48

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5105 inferral cache hits and 1359 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1618 tilings in it right now.
There were 1020 tilings of which 94 are verified.
There were 323 SiblingNodes of which 38 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1460* times, (730 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 17:24:19

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 7906 inferral cache hits and 13597 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2445 tilings in it right now.
There were 1518 tilings of which 150 are verified.
There were 419 SiblingNodes of which 51 are verified.

The function splittings called the partitioning cache *13731* times, (363 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 17:24:22

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 2 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 20 inferral cache hits and 243 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 101 tilings in it right now.
There were 94 tilings of which 46 are verified.
There were 60 SiblingNodes of which 24 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *262* times, (139 originating)
There were 1 cache misses

A proof tree was found in 2 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     ├─────9
                        │     └─────10
                        └─────11
                              ├─────12
                              ├─────13
                              └─────14

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 6

+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 7

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |2| | | |
+-+-+-+-+-+-+-+
| |2| | | | | |
+-+-+-+-+-+-+-+
|1| |1| | | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |1| |1|
+-+-+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point

Label: 8

+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))

Label: 9

+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: point
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))

Label: 10

+-+
|1|
+-+
1: point

Label: 11

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|2| |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
3: point

Label: 12

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))

Label: 13

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
2: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))
3: point

Label: 14

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 17, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 18, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 19, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 20, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 4]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[5, 1]": "point", "[6, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=4, j=0), Cell(i=1, j=1): Cell(i=5, j=1), Cell(i=2, j=0): Cell(i=6, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=4)}]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=0). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 13, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 14, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 21, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[3, 2]": "point", "[4, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=4, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=1), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=1)}, {Cell(i=0, j=0): Cell(i=3, j=2)}]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 22, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1))).", "identifier": 14, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1))).", "identifier": 0, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1))).", "identifier": 13, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}}
