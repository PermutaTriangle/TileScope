0132_1302_1320

===========================================
Log created Sun, 21 May 2017 17:14:10

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 456 inferral cache hits and 2505 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 3645 tilings in it right now.
There were 2105 tilings of which 190 are verified.
There were 1037 SiblingNodes of which 66 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2682* times, (1341 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:15:10

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 392 inferral cache hits and 55603 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2942 tilings in it right now.
There were 1806 tilings of which 250 are verified.
There were 948 SiblingNodes of which 138 are verified.

The function splittings called the partitioning cache *55751* times, (503 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:16:10

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 578 inferral cache hits and 2226 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 2631 tilings in it right now.
There were 1772 tilings of which 274 are verified.
There were 506 SiblingNodes of which 48 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2386* times, (1193 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:17:10

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 749 inferral cache hits and 38454 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 3071 tilings in it right now.
There were 2191 tilings of which 266 are verified.
There were 729 SiblingNodes of which 124 are verified.

The function splittings called the partitioning cache *38652* times, (584 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:17:44

Maximum depth fully searched was 3

Maximum time set at 60 seconds

Total time taken was 33 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5870 inferral cache hits and 1353 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1881 tilings in it right now.
There were 1145 tilings of which 108 are verified.
There were 316 SiblingNodes of which 36 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1454* times, (734 originating)
There were 1 cache misses

A proof tree was found in 33 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     ├─────7
                  │     └─────8
                  └─────9
                        ├─────10
                        ├─────11
                        ├─────12
                        ├─────13
                        └─────14

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| |3| | |
+-+-+-+-+
|4| | | |
+-+-+-+-+
| | |4| |
+-+-+-+-+
| | | |3|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
3: point
4: Av(Perm((0, 2, 1)))

Label: 5

+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)))

Label: 6

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))
2: point
3: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))

Label: 7

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Label: 8

+-+
|1|
+-+
1: point

Label: 9

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: Av(Perm((0, 2, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
|3| | |3| | | | |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |1|
+-+-+-+-+-+-+-+-+
| | | | | | |3| |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
| | |1| | | | | |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)))

Label: 10

+-+-+-+-+
|2| |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 2, 1)))

Label: 11

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Label: 14

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 73, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 74, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 71, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=1, j=0) in its row. | The reverse of: Separting the rightmost point from cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 13, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 75, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 76, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 4]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[2, 2]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)))", "[1, 4]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[2, 2]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=2, j=0), Cell(i=0, j=2): Cell(i=2, j=2), Cell(i=1, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=0, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=4)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 77, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[0, 2]": "Av(Perm((0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=2) in its column. | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 21, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 75, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 13, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 13, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1), Cell(i=4, j=6), Cell(i=5, j=4), Cell(i=6, j=2)]", "identifier": 78, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 5]": "point", "[2, 3]": "Av(Perm((0, 2, 1)))", "[3, 1]": "Av(Perm((0, 2, 1)))", "[4, 2]": "point"}, "out_tiling": {"[0, 5]": "Av(Perm((0, 2, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 5]": "Av(Perm((0, 2, 1)))", "[4, 6]": "point", "[5, 4]": "Av(Perm((0, 2, 1)))", "[6, 2]": "Av(Perm((0, 2, 1)))", "[7, 3]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=5), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=2): Cell(i=3, j=5), Cell(i=3, j=1): Cell(i=7, j=3)}, {Cell(i=0, j=0): Cell(i=1, j=1)}, {Cell(i=0, j=0): Cell(i=4, j=6)}, {Cell(i=0, j=0): Cell(i=5, j=4)}, {Cell(i=0, j=0): Cell(i=6, j=2)}]", "relation": "| Separating the bottommost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=1, j=6) in its column. | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 79, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 5]": "point", "[2, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[2, 3]": "Av(Perm((0, 2, 1)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=2, j=0). | Isolating the point at Cell(i=1, j=1) in its row. | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0))).", "identifier": 71, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=0, j=1) in its column. | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0))).", "identifier": 80, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)))"}, "recurse": "[]", "relation": ""}}
