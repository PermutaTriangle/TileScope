1032_1302_2031

===========================================
Log created Sat, 20 May 2017 21:47:10

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 271 inferral cache hits and 1239 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1487 tilings in it right now.
There were 957 tilings of which 100 are verified.
There were 389 SiblingNodes of which 46 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1328* times, (664 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 21:47:32

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 21 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 209 inferral cache hits and 18752 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1109 tilings in it right now.
There were 733 tilings of which 101 are verified.
There were 293 SiblingNodes of which 47 are verified.

The function splittings called the partitioning cache *18814* times, (201 originating)
There were 0 cache misses

A proof tree was found in 21 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     ├─────7
                  │     └─────8
                  └─────9
                        ├─────10
                        ├─────11
                        └─────12

Label: 0

+-+
|1|
+-+
1: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
|2| |2| | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
3: point

Label: 5

+-+-+-+-+-+
|1| |1| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point

Label: 6

+-+-+-+
|2| |2|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 7

+-+
|1|
+-+
1: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 8

+-+
|1|
+-+
1: point

Label: 9

+-+-+-+-+-+
|2| |2| | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | |3| |3| | |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | | |3| |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 10

+-+
|1|
+-+
1: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Label: 11

+-+
|1|
+-+
1: point

Label: 12

+-+-+-+-+-+
|2| |2| | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
3: point
We use his sibling for the next strategy
+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))
2: point
3: Av+(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 73, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 74, "in_tiling": {"[0, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 17, "in_tiling": {"[0, 1]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "recurse", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 12, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 54, "in_tiling": {"[0, 3]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 2]": "point", "[2, 3]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=3), Cell(i=1, j=0): Cell(i=1, j=2), Cell(i=2, j=1): Cell(i=2, j=3)}, {Cell(i=0, j=0): Cell(i=3, j=0)}, {Cell(i=0, j=0): Cell(i=4, j=1)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 12, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 26, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[0, 4]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 4]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 1]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[4, 2]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[0, 2]": "Av+(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "A splitting of the tiling", "identifier": 75, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[0, 4]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 4]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 1]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[4, 2]": "point"}, "out_tiling": {"[0, 6]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[2, 5]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 4]": "point", "[4, 5]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[5, 2]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[6, 3]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=6)}, {Cell(i=0, j=0): Cell(i=1, j=0)}, {Cell(i=0, j=0): Cell(i=2, j=1), Cell(i=0, j=4): Cell(i=2, j=5), Cell(i=1, j=3): Cell(i=3, j=4), Cell(i=2, j=4): Cell(i=4, j=5), Cell(i=3, j=1): Cell(i=5, j=2), Cell(i=4, j=2): Cell(i=6, j=3)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((1, 0))).", "identifier": 26, "in_tiling": {"[0, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[0, 2]": "Av+(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[0, 4]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 3]": "point", "[2, 4]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[3, 1]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1))).", "identifier": 17, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[0, 2]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1))).", "identifier": 3, "in_tiling": {"[0, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 0, 3, 1)))"}, "recurse": "[]", "relation": ""}}
