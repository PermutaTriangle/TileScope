0321_1302_2301

===========================================
Log created Sat, 20 May 2017 21:44:53

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 250 inferral cache hits and 1450 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1777 tilings in it right now.
There were 954 tilings of which 96 are verified.
There were 464 SiblingNodes of which 44 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1554* times, (777 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 21:45:23

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 380 inferral cache hits and 26442 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2211 tilings in it right now.
There were 1137 tilings of which 124 are verified.
There were 501 SiblingNodes of which 48 are verified.

The function splittings called the partitioning cache *26558* times, (379 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 21:45:53

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 273 inferral cache hits and 1425 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1328 tilings in it right now.
There were 935 tilings of which 93 are verified.
There were 289 SiblingNodes of which 29 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1530* times, (765 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 21:46:23

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 462 inferral cache hits and 18414 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1807 tilings in it right now.
There were 1253 tilings of which 118 are verified.
There were 381 SiblingNodes of which 44 are verified.

The function splittings called the partitioning cache *18554* times, (388 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 21:46:39

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 16 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 3042 inferral cache hits and 955 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1046 tilings in it right now.
There were 657 tilings of which 129 are verified.
There were 194 SiblingNodes of which 27 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1028* times, (514 originating)
There were 0 cache misses

A proof tree was found in 16 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|1| |1|
+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))
2: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))
2: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
|1| | | |3| |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))

Label: 5

+-+-+-+-+-+
|1| | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))

Label: 6

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))
3: Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))

Label: 7

+-+-+-+-+-+
|3| | |4| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 8

+-+-+-+-+-+-+
|4| | | |2| |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))
2: Av(Perm((1, 0)))
3: point
4: Av(Perm((0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 1, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 2, "in_tiling": {"[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[1, 1]": "point", "[2, 2]": "Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[3, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| The reverse of: Isolating the point at Cell(i=0, j=2) in its column. | The reverse of: Separating the bottommost point from cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 3, "in_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[3, 3]": "Av(Perm((1, 0)))", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[3, 3]": "Av(Perm((1, 0)))", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1))).", "identifier": 4, "in_tiling": {"[0, 3]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[3, 3]": "Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[4, 1]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[3, 3]": "Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 5, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 4]": "Av(Perm((1, 0)))", "[5, 2]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 4]": "Av(Perm((1, 0)))", "[5, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1))).", "identifier": 6, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[1, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[2, 3]": "point", "[3, 1]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[4, 4]": "Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[5, 2]": "point"}, "recurse": "[]", "relation": "| Separting the rightmost point from cell Cell(i=2, j=0). | Isolating the point at Cell(i=1, j=1) in its row. | The reverse of: Isolating the point at Cell(i=0, j=3) in its column. | The reverse of: Separating the topmost point from cell Cell(i=0, j=2). | Separating the bottommost point from cell Cell(i=0, j=2). | Isolating the point at Cell(i=0, j=3) in its column. | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1))).", "identifier": 7, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": "| Separating the topmost point from cell Cell(i=0, j=0). | Isolating the point at Cell(i=0, j=1) in its column. | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1))).", "identifier": 8, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}}
