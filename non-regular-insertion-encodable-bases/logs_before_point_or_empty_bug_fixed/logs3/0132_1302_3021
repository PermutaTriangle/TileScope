0132_1302_3021

===========================================
Log created Sun, 21 May 2017 17:42:26

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 395 inferral cache hits and 2201 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 3606 tilings in it right now.
There were 1861 tilings of which 115 are verified.
There were 754 SiblingNodes of which 45 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2356* times, (1178 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:43:26

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 475 inferral cache hits and 46810 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 3646 tilings in it right now.
There were 1909 tilings of which 178 are verified.
There were 795 SiblingNodes of which 86 are verified.

The function splittings called the partitioning cache *46973* times, (558 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:44:26

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 557 inferral cache hits and 2202 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2502 tilings in it right now.
There were 1649 tilings of which 123 are verified.
There were 435 SiblingNodes of which 41 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2360* times, (1180 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:45:26

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1003 inferral cache hits and 33014 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 4083 tilings in it right now.
There were 2546 tilings of which 170 are verified.
There were 591 SiblingNodes of which 58 are verified.

The function splittings called the partitioning cache *33237* times, (653 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:46:26

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 11523 inferral cache hits and 2253 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 3713 tilings in it right now.
There were 2100 tilings of which 147 are verified.
There were 499 SiblingNodes of which 51 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2416* times, (1208 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:47:27

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 14529 inferral cache hits and 28965 partitioning cache hits.
The partitioning cache had 16 tilings in it right now.
The inferral cache has 4643 tilings in it right now.
There were 2548 tilings of which 169 are verified.
There were 591 SiblingNodes of which 60 are verified.

The function splittings called the partitioning cache *29185* times, (634 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:48:27

Maximum depth fully searched was 7

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 113 inferral cache hits and 1429 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 778 tilings in it right now.
There were 580 tilings of which 146 are verified.
There were 368 SiblingNodes of which 52 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1518* times, (759 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:49:44

Maximum depth fully searched was 7

Maximum time set at 60 seconds

Total time taken was 77 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 141 inferral cache hits and 72242 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1041 tilings in it right now.
There were 996 tilings of which 276 are verified.
There were 712 SiblingNodes of which 148 are verified.

The function splittings called the partitioning cache *72354* times, (488 originating)
There were 0 cache misses

No proof tree was found after 77 seconds

===========================================
Log created Sun, 21 May 2017 17:50:47

Maximum depth fully searched was 5

Maximum time set at 60 seconds

Total time taken was 62 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 236 inferral cache hits and 1752 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 593 tilings in it right now.
There were 484 tilings of which 160 are verified.
There were 122 SiblingNodes of which 40 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1874* times, (937 originating)
There were 0 cache misses

No proof tree was found after 62 seconds

===========================================
Log created Sun, 21 May 2017 17:51:48

Maximum depth fully searched was 5

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 851 inferral cache hits and 7707 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1565 tilings in it right now.
There were 1187 tilings of which 299 are verified.
There were 197 SiblingNodes of which 51 are verified.

The function splittings called the partitioning cache *7956* times, (644 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sun, 21 May 2017 17:53:21

Maximum depth fully searched was 9

Maximum time set at 60 seconds

Total time taken was 93 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 73 inferral cache hits and 1318 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 467 tilings in it right now.
There were 450 tilings of which 103 are verified.
There were 344 SiblingNodes of which 50 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1396* times, (708 originating)
There were 1 cache misses

No proof tree was found after 93 seconds

===========================================
Log created Sun, 21 May 2017 17:54:23

Maximum depth fully searched was 9

Maximum time set at 60 seconds

Total time taken was 61 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 73 inferral cache hits and 26811 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 515 tilings in it right now.
There were 526 tilings of which 149 are verified.
There were 408 SiblingNodes of which 92 are verified.

The function splittings called the partitioning cache *26895* times, (417 originating)
There were 0 cache misses

No proof tree was found after 61 seconds

===========================================
Log created Sun, 21 May 2017 17:55:26

Maximum depth fully searched was 5

Maximum time set at 60 seconds

Total time taken was 63 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 146 inferral cache hits and 1030 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 242 tilings in it right now.
There were 220 tilings of which 33 are verified.
There were 49 SiblingNodes of which 15 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1102* times, (551 originating)
There were 0 cache misses

No proof tree was found after 63 seconds

===========================================
Log created Sun, 21 May 2017 17:56:33

Maximum depth fully searched was 6

Maximum time set at 60 seconds

Total time taken was 66 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 378 inferral cache hits and 4486 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 609 tilings in it right now.
There were 499 tilings of which 83 are verified.
There were 88 SiblingNodes of which 22 are verified.

The function splittings called the partitioning cache *4640* times, (394 originating)
There were 0 cache misses

No proof tree was found after 66 seconds

===========================================
Log created Sun, 21 May 2017 17:57:41

Maximum depth fully searched was 7

Maximum time set at 60 seconds

Total time taken was 68 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 48 inferral cache hits and 704 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 453 tilings in it right now.
There were 257 tilings of which 169 are verified.
There were 115 SiblingNodes of which 39 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *750* times, (375 originating)
There were 0 cache misses

No proof tree was found after 68 seconds

===========================================
Log created Sun, 21 May 2017 17:58:08

Maximum depth fully searched was 7

Maximum time set at 60 seconds

Total time taken was 27 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 101 inferral cache hits and 11938 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1076 tilings in it right now.
There were 681 tilings of which 426 are verified.
There were 347 SiblingNodes of which 110 are verified.

The function splittings called the partitioning cache *12032* times, (388 originating)
There were 0 cache misses

A proof tree was found in 27 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        │                 ├─────14
                        │                 ├─────15
                        │                 └─────16
                        │                       ├─────17
                        │                       └─────18
                        └─────19
                              ├─────20
                              └─────21
                                    ├─────22
                                    │     ├─────23
                                    │     └─────24
                                    │           ├─────25
                                    │           └─────26
                                    └─────27
                                          ├─────28
                                          ├─────29
                                          └─────30

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
2: point

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
2: point

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 6

+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
2: point

Label: 7

+-+-+-+
|4| | |
+-+-+-+
| | |2|
+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1)))
4: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 8

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
3: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 9

+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1)))

Label: 10

+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
2: point

Label: 11

+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
2: point

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+
|1| | |
+-+-+-+
| | |2|
+-+-+-+
|3| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
2: point
3: Av+(Perm((0, 2, 1)))

Label: 14

+-+-+-+-+-+-+-+
| | |4| | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | |4| | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)))
4: Av+(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
| | |3| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | |2| | | | |
+-+-+-+-+-+-+-+-+-+
| | | |3| | | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |2|
+-+-+-+-+-+-+-+-+-+
| | | | | |4| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | |2| |
+-+-+-+-+-+-+-+-+-+
| | | | | | |3| | |
+-+-+-+-+-+-+-+-+-+
|2| | | | | | | | |
+-+-+-+-+-+-+-+-+-+
| |1| | | | | | | |
+-+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)))
4: Av+(Perm((0, 2, 1)))

Label: 15

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point

Label: 16

+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av(Perm((0, 2, 1)))

Label: 17

+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
| |2| |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 18

+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: point

Label: 19

+-+-+-+
|4| | |
+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
4: Av(Perm((0, 2, 1)))

Label: 20

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)))

Label: 21

+-+-+-+
|4| | |
+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
4: Av(Perm((0, 2, 1)))

Label: 22

+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 23

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))

Label: 24

+-+-+-+-+
| | |2| |
+-+-+-+-+
|4| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
4: Av(Perm((0, 2, 1)))

Label: 25

+-+-+-+
|4| | |
+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
4: Av(Perm((0, 2, 1)))

Label: 26

+-+
|1|
+-+
1: point

Label: 27

+-+-+-+
|4| | |
+-+-+-+
| |2| |
+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))
4: Av+(Perm((0, 2, 1)))

Label: 28

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | |4| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | |4| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 2, 1)))
4: Av(Perm((0, 2, 1)))

Label: 29

+-+-+-+-+-+-+-+
| | | |5| | | |
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1)))
5: Av+(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | | |4| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | |3| | |
+-+-+-+-+-+-+-+-+
|2| | | | | | | |
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |2|
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av(Perm((0, 2, 1)))
4: Av+(Perm((0, 2, 1)))

Label: 30

+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 76, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 77, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 78, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 79, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 2]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 17, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 80, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=2)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 81, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 6]": "Av+(Perm((0, 2, 1)))", "[3, 4]": "Av+(Perm((0, 2, 1)))", "[4, 2]": "Av(Perm((0, 2, 1)))", "[5, 3]": "point", "[6, 5]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 8]": "Av(Perm((0, 2, 1)))", "[3, 6]": "Av(Perm((0, 2, 1)))", "[4, 7]": "point", "[5, 4]": "Av+(Perm((0, 2, 1)))", "[6, 2]": "Av(Perm((0, 2, 1)))", "[7, 3]": "point", "[8, 5]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=2, j=6). | "}, {"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 82, "in_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 3]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "point", "[1, 4]": "point", "[2, 1]": "point", "[3, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 78, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 2, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)))", "[2, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 0]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 67, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)))", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[2, 2]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)))", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[2, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 83, "in_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 2, 1)))", "[1, 6]": "Av(Perm((0, 2, 1)))", "[2, 2]": "Av+(Perm((0, 2, 1)))", "[3, 0]": "Av+(Perm((0, 2, 1)))", "[4, 1]": "point", "[5, 3]": "point"}, "out_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 2, 1)))", "[1, 6]": "Av(Perm((0, 2, 1)))", "[2, 2]": "Av+(Perm((0, 2, 1)))", "[3, 0]": "Av+(Perm((0, 2, 1)))", "[4, 1]": "point", "[5, 3]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=5), Cell(i=1, j=1): Cell(i=1, j=4), Cell(i=1, j=3): Cell(i=1, j=6), Cell(i=2, j=0): Cell(i=4, j=1)}, {Cell(i=0, j=1): Cell(i=2, j=2), Cell(i=1, j=0): Cell(i=3, j=0), Cell(i=2, j=2): Cell(i=5, j=3)}]", "relation": ""}], "formal_step": "Placing the leftmost point into column 0", "identifier": 84, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 85, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1))).", "identifier": 33, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 86, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[1, 3]": "Av(Perm((0, 2, 1)))", "[2, 2]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 4]": "Av(Perm((0, 2, 1)))", "[3, 3]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 87, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 32, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 88, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 5]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 5]": "point", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=0, j=4): Cell(i=0, j=4), Cell(i=1, j=3): Cell(i=1, j=3), Cell(i=2, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=5)}]", "relation": ""}], "formal_step": "Placing the rightmost point into column 0", "identifier": 89, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 90, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 5]": "Av+(Perm((0, 2, 1)))", "[3, 3]": "Av+(Perm((0, 2, 1)))", "[4, 4]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))", "[2, 7]": "Av(Perm((0, 2, 1)))", "[3, 5]": "Av(Perm((0, 2, 1)))", "[4, 6]": "point", "[5, 3]": "Av+(Perm((0, 2, 1)))", "[6, 4]": "point", "[7, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=2, j=5). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 91, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 6]": "Av+(Perm((0, 2, 1)))", "[4, 4]": "Av(Perm((0, 2, 1)))", "[5, 5]": "point", "[6, 1]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))", "[4, 7]": "Av+(Perm((0, 2, 1)))", "[5, 5]": "Av(Perm((0, 2, 1)))", "[6, 6]": "point", "[7, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | "}, {"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 92, "in_tiling": {"[0, 4]": "point", "[1, 0]": "point", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 0]": "point", "[1, 2]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the leftmost point into column 0", "identifier": 93, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 4]": "Av+(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 4); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 94, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1))).", "identifier": 32, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 4]": "Av(Perm((0, 2, 1)))", "[1, 3]": "point", "[2, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the rightmost point into column 0", "identifier": 17, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1))).", "identifier": 10, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1))).", "identifier": 35, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[0, 2]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1))).", "identifier": 95, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)), Perm((3, 0, 2, 1)))"}, "recurse": "[]", "relation": ""}}
