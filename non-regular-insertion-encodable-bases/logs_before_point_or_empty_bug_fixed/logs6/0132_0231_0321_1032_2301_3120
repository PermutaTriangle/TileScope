0132_0231_0321_1032_2301_3120

===========================================
Log created Sat, 20 May 2017 18:25:56

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 512 inferral cache hits and 2230 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2775 tilings in it right now.
There were 1297 tilings of which 148 are verified.
There were 554 SiblingNodes of which 70 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2388* times, (1194 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 18:26:26

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 600 inferral cache hits and 37277 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 3395 tilings in it right now.
There were 1573 tilings of which 178 are verified.
There were 668 SiblingNodes of which 80 are verified.

The function splittings called the partitioning cache *37459* times, (577 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 18:26:57

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 280 inferral cache hits and 1313 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 1624 tilings in it right now.
There were 869 tilings of which 56 are verified.
There were 233 SiblingNodes of which 20 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1410* times, (705 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 18:27:28

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 503 inferral cache hits and 18707 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2709 tilings in it right now.
There were 1481 tilings of which 131 are verified.
There were 390 SiblingNodes of which 43 are verified.

The function splittings called the partitioning cache *18871* times, (428 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 18:27:58

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4830 inferral cache hits and 1395 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 1870 tilings in it right now.
There were 944 tilings of which 104 are verified.
There were 273 SiblingNodes of which 36 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1498* times, (749 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 18:28:28

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 7864 inferral cache hits and 14390 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 3059 tilings in it right now.
There were 1505 tilings of which 110 are verified.
There were 435 SiblingNodes of which 46 are verified.

The function splittings called the partitioning cache *14540* times, (384 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 18:28:37

Maximum depth fully searched was 6

Maximum time set at 30 seconds

Total time taken was 9 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 95 inferral cache hits and 1003 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 506 tilings in it right now.
There were 338 tilings of which 181 are verified.
There were 182 SiblingNodes of which 69 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1068* times, (543 originating)
There were 1 cache misses

A proof tree was found in 9 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        └─────10
                              ├─────11
                              │     ├─────12
                              │     └─────13
                              └─────14
                                    ├─────15
                                    │     ├─────16
                                    │     ├─────17
                                    │     └─────18
                                    └─────19

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 7

+-+-+-+-+
| | |1| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 8

+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 9

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 10

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 11

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
4: Av(Perm((1, 0)))

Label: 12

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+-+
| |1| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))

Label: 13

+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 14

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
3: Av+(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 15

+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | | |5|
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|3| |4| | | | |
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
4: Av(Perm((0, 1)))
5: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | | |1| | | | |
+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
| |1| | | | | | |
+-+-+-+-+-+-+-+-+
|3| |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |1| | | |
+-+-+-+-+-+-+-+-+
| | | | | |2| | |
+-+-+-+-+-+-+-+-+
| | | | | | |1| |
+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
4: Av(Perm((1, 0)))

Label: 16

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|2| |3| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((1, 0)))

Label: 17

+-+
|1|
+-+
1: point

Label: 18

+-+
|1|
+-+
1: Av(Perm((0, 1)))

Label: 19

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 60, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 61, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 62, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 63, "in_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 3]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 64, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=2). | "}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 65, "in_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 66, "in_tiling": {"[0, 2]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[3, 4]": "point", "[4, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 2]": "point", "[2, 0]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 67, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 0)))", "[4, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=2). | "}], "formal_step": "We perform cell insertion into cell (5, 4); either it is empty or Av+(Perm((1, 0))).", "identifier": 68, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)), Perm((2, 1, 0)))", "[3, 5]": "point", "[4, 0]": "point", "[5, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 68, "in_tiling": {"[0, 1]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "point", "[5, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=1). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 6, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=2), Cell(i=5, j=1)]", "identifier": 69, "in_tiling": {"[0, 2]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 1]": "Av+(Perm((0, 1)))", "[5, 0]": "point", "[6, 4]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 4]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 6]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)))", "[6, 0]": "point", "[7, 5]": "Av(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=3), Cell(i=1, j=2): Cell(i=1, j=4), Cell(i=2, j=1): Cell(i=2, j=3), Cell(i=3, j=4): Cell(i=3, j=6), Cell(i=4, j=0): Cell(i=6, j=0), Cell(i=5, j=3): Cell(i=7, j=5)}, {Cell(i=0, j=0): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=5, j=1)}]", "relation": "| Inserting the top most point in to the cell Cell(i=4, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 70, "in_tiling": {"[0, 2]": "point", "[1, 5]": "point", "[2, 3]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 0]": "point", "[5, 4]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 5]": "point", "[2, 3]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 0]": "point", "[5, 4]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 1", "identifier": 71, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 72, "in_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 0", "identifier": 73, "in_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((2, 0, 1)), Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 74, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 75, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 76, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
