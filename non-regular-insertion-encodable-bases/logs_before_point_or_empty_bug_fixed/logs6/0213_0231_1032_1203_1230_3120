0213_0231_1032_1203_1230_3120

===========================================
Log created Sat, 20 May 2017 22:41:49

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 590 inferral cache hits and 1944 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2896 tilings in it right now.
There were 1410 tilings of which 266 are verified.
There were 560 SiblingNodes of which 64 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2082* times, (1041 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:42:19

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 598 inferral cache hits and 26871 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2985 tilings in it right now.
There were 1531 tilings of which 315 are verified.
There were 629 SiblingNodes of which 107 are verified.

The function splittings called the partitioning cache *27011* times, (466 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:42:49

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 276 inferral cache hits and 1305 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1596 tilings in it right now.
There were 921 tilings of which 112 are verified.
There were 245 SiblingNodes of which 28 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1402* times, (701 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:43:19

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 666 inferral cache hits and 17364 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2916 tilings in it right now.
There were 1562 tilings of which 238 are verified.
There were 390 SiblingNodes of which 40 are verified.

The function splittings called the partitioning cache *17538* times, (475 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:43:49

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 6607 inferral cache hits and 1504 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 2452 tilings in it right now.
There were 1232 tilings of which 296 are verified.
There were 307 SiblingNodes of which 43 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1614* times, (807 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:44:20

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 8297 inferral cache hits and 12346 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 3159 tilings in it right now.
There were 1598 tilings of which 156 are verified.
There were 451 SiblingNodes of which 72 are verified.

The function splittings called the partitioning cache *12495* times, (405 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:44:50

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 199 inferral cache hits and 1754 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 1036 tilings in it right now.
There were 748 tilings of which 353 are verified.
There were 404 SiblingNodes of which 99 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1858* times, (929 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:45:25

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 35 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 183 inferral cache hits and 21079 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 881 tilings in it right now.
There were 639 tilings of which 344 are verified.
There were 349 SiblingNodes of which 118 are verified.

The function splittings called the partitioning cache *21171* times, (404 originating)
There were 0 cache misses

No proof tree was found after 35 seconds

===========================================
Log created Sat, 20 May 2017 22:45:56

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 151 inferral cache hits and 968 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 350 tilings in it right now.
There were 270 tilings of which 45 are verified.
There were 60 SiblingNodes of which 15 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1038* times, (519 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:46:26

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 307 inferral cache hits and 3360 partitioning cache hits.
The partitioning cache had 13 tilings in it right now.
The inferral cache has 708 tilings in it right now.
There were 530 tilings of which 103 are verified.
There were 110 SiblingNodes of which 31 are verified.

The function splittings called the partitioning cache *3496* times, (327 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:46:37

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 10 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 41 inferral cache hits and 856 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 371 tilings in it right now.
There were 327 tilings of which 131 are verified.
There were 244 SiblingNodes of which 70 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *906* times, (453 originating)
There were 0 cache misses

A proof tree was found in 10 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           └─────13
                        │                 ├─────14
                        │                 │     ├─────15
                        │                 │     └─────16
                        │                 └─────17
                        │                       ├─────18
                        │                       └─────19
                        └─────20
                              ├─────21
                              │     ├─────22
                              │     └─────23
                              └─────24
                                    ├─────25
                                    │     ├─────26
                                    │     └─────27
                                    └─────28
                                          ├─────29
                                          └─────30
                                                ├─────31
                                                └─────32

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 5

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))

Label: 6

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 7

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av+(Perm((1, 0)))
4: Av(Perm((0, 1)))

Label: 8

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)), Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 9

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av+(Perm((1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 10

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
|2| | | | |3|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av+(Perm((1, 0)))
4: Av(Perm((0, 1)))

Label: 11

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av+(Perm((1, 0)))
4: Av(Perm((0, 1)))

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
|2| | | | |3|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 14

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | |4| | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
|2| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 15

+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))

Label: 16

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 17

+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
|2| | | | |3|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av+(Perm((1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 18

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av+(Perm((1, 0)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 19

+-+
|1|
+-+
1: point

Label: 20

+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 21

+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 22

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 23

+-+
|1|
+-+
1: point

Label: 24

+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
4: Av+(Perm((0, 1)))

Label: 25

+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 1)))

Label: 26

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 1)))

Label: 27

+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| |3| | | | | |
+-+-+-+-+-+-+-+
| | |1| | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 1)))

Label: 28

+-+-+-+-+-+-+
|3| |4| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
4: Av(Perm((0, 1)))

Label: 29

+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))

Label: 30

+-+-+-+-+-+-+
|3| |4| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
4: Av+(Perm((0, 1)))

Label: 31

+-+-+-+-+-+
|3| |4| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))
4: Av+(Perm((0, 1)))

Label: 32

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 163, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 164, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 165, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 166, "in_tiling": {"[0, 1]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 4]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "point", "[4, 3]": "Av(Perm((0, 1)), Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=3, j=2). | "}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 26, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=0)]", "identifier": 167, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 2]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=2), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=0): Cell(i=3, j=1), Cell(i=4, j=2): Cell(i=5, j=3)}, {Cell(i=0, j=0): Cell(i=4, j=0)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 168, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 3]": "point", "[2, 5]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 0]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=3). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 169, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 1]": "point", "[3, 5]": "point", "[4, 0]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1)))", "[1, 1]": "point", "[2, 4]": "point", "[3, 0]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=3). | "}], "formal_step": "We perform cell insertion into cell (4, 6); either it is empty or Av+(Perm((0, 1)), Perm((1, 0))).", "identifier": 170, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 3]": "point", "[2, 5]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 6]": "Av(Perm((0, 1)), Perm((1, 0)))", "[5, 0]": "point", "[6, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=3). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 54, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=2)]", "identifier": 171, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "point", "[5, 3]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=0): Cell(i=3, j=0), Cell(i=4, j=2): Cell(i=5, j=3)}, {Cell(i=0, j=0): Cell(i=4, j=2)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (5, 3); either it is empty or Av+(Perm((1, 0))).", "identifier": 172, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "point", "[5, 3]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 2", "identifier": 54, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2))).", "identifier": 26, "in_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 22, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0)]", "identifier": 173, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 174, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 5]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 5]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 175, "in_tiling": {"[0, 3]": "point", "[1, 5]": "Av+(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "point", "[1, 6]": "Av(Perm((0, 1)))", "[2, 5]": "point", "[3, 0]": "point", "[4, 4]": "point", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=5). | "}], "formal_step": "We perform cell insertion into cell (2, 6); either it is empty or Av+(Perm((0, 1))).", "identifier": 176, "in_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 6]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 5]": "point", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[2, 6]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 5]": "point", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 177, "in_tiling": {"[0, 4]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 38, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=3)]", "identifier": 85, "in_tiling": {"[0, 4]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 4]": "Av+(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 4]": "Av+(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=3): Cell(i=2, j=4), Cell(i=3, j=1): Cell(i=4, j=1), Cell(i=4, j=2): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=3)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 4); either it is empty or Av+(Perm((0, 1))).", "identifier": 149, "in_tiling": {"[0, 4]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 3", "identifier": 38, "in_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 3]": "Av+(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((0, 1))).", "identifier": 73, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 30, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 22, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2))).", "identifier": 178, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 2)), Perm((2, 0, 1)), Perm((1, 0, 3, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0))).", "identifier": 179, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
