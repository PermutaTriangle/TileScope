0213_0231_1032_1203_1230_2301

===========================================
Log created Sat, 20 May 2017 22:38:30

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 845 inferral cache hits and 2524 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 3043 tilings in it right now.
There were 1575 tilings of which 354 are verified.
There were 627 SiblingNodes of which 82 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2702* times, (1351 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:39:00

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 1045 inferral cache hits and 37666 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 3592 tilings in it right now.
There were 1872 tilings of which 443 are verified.
There were 780 SiblingNodes of which 123 are verified.

The function splittings called the partitioning cache *37883* times, (715 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:39:30

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 465 inferral cache hits and 1753 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 1903 tilings in it right now.
There were 1122 tilings of which 189 are verified.
There were 320 SiblingNodes of which 37 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1880* times, (940 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:40:00

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 813 inferral cache hits and 19324 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 3195 tilings in it right now.
There were 1768 tilings of which 278 are verified.
There were 484 SiblingNodes of which 64 are verified.

The function splittings called the partitioning cache *19531* times, (567 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:40:30

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4621 inferral cache hits and 1339 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 1906 tilings in it right now.
There were 973 tilings of which 104 are verified.
There were 300 SiblingNodes of which 33 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1440* times, (720 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:41:01

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 10080 inferral cache hits and 17812 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 3793 tilings in it right now.
There were 1871 tilings of which 324 are verified.
There were 527 SiblingNodes of which 80 are verified.

The function splittings called the partitioning cache *18003* times, (520 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:41:18

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 17 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 96 inferral cache hits and 955 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 613 tilings in it right now.
There were 395 tilings of which 261 are verified.
There were 203 SiblingNodes of which 87 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1016* times, (508 originating)
There were 0 cache misses

A proof tree was found in 17 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        │           ├─────10
                        │           │     ├─────11
                        │           │     └─────12
                        │           │           ├─────13
                        │           │           └─────14
                        │           └─────15
                        │                 ├─────16
                        │                 └─────17
                        │                       ├─────18
                        │                       └─────19
                        └─────20
                              ├─────21
                              │     ├─────22
                              │     └─────23
                              │           ├─────24
                              │           └─────25
                              │                 ├─────26
                              │                 └─────27
                              └─────28
                                    ├─────29
                                    │     ├─────30
                                    │     └─────31
                                    └─────32
                                          ├─────33
                                          ├─────34
                                          └─────35

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
2: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
3: point

Label: 7

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
2: Av+(Perm((0, 1)))
3: point

Label: 8

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((0, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| |2| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 9

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
2: Av+(Perm((0, 1)))
3: point

Label: 10

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
2: Av+(Perm((0, 1)))
3: point

Label: 11

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 12

+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
2: Av+(Perm((0, 1)))
3: point

Label: 13

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
2: Av+(Perm((0, 1)))
3: point

Label: 14

+-+
|1|
+-+
1: point

Label: 15

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((0, 1)))
3: point

Label: 16

+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point

Label: 17

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |1| | |2|
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((0, 1)))
3: point

Label: 18

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))

Label: 19

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| |1| | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 20

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
4: point

Label: 21

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|1| | |2|
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
3: point

Label: 22

+-+-+-+
| |2| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((1, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((1, 0)))
2: point

Label: 23

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|1| | |2|
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
3: point

Label: 24

+-+-+-+-+
| |2| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
We use his sibling for the next strategy
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 25

+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
|1| | |2| |3|
+-+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
4: point

Label: 26

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
4: point

Label: 27

+-+
|1|
+-+
1: point

Label: 28

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: point

Label: 29

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |3|
+-+-+-+-+
|1| |2| |
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 30

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 31

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 32

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: point

Label: 33

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0)))
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+
| | |2| | | | | |
+-+-+-+-+-+-+-+-+
| | | | |2| | | |
+-+-+-+-+-+-+-+-+
| | | | | | |2| |
+-+-+-+-+-+-+-+-+
| | | | | | | |4|
+-+-+-+-+-+-+-+-+
| | | | | |1| | |
+-+-+-+-+-+-+-+-+
| | | |3| | | | |
+-+-+-+-+-+-+-+-+
| |2| | | | | | |
+-+-+-+-+-+-+-+-+
|1| | | | | | | |
+-+-+-+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 34

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point

Label: 35

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| | |3| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av(Perm((0, 1)))
2: point
3: Av+(Perm((0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 56, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 57, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 58, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 59, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 3]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 60, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 3]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "point", "[2, 4]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=0). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 51, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=0, j=2)]", "identifier": 61, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=2): Cell(i=3, j=3), Cell(i=3, j=0): Cell(i=4, j=0)}, {Cell(i=0, j=0): Cell(i=0, j=2)}]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 62, "in_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 63, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((1, 0)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((1, 0)))", "[2, 1]": "point", "[3, 4]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=0). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 64, "in_tiling": {"[0, 4]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 5]": "point", "[4, 3]": "point", "[5, 2]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 5]": "point", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 6]": "point", "[4, 4]": "point", "[5, 3]": "point", "[6, 2]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=5, j=2). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 65, "in_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 0]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 1]": "point", "[2, 4]": "point", "[3, 2]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 0", "identifier": 66, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((1, 0)))", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((1, 0)))", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((0, 1))).", "identifier": 67, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((1, 0)))", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av+(Perm((1, 0)))", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 51, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 35, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 68, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 69, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 4]": "point", "[2, 3]": "point", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=0). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 46, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=2)]", "identifier": 70, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=1): Cell(i=4, j=1), Cell(i=4, j=0): Cell(i=5, j=0)}, {Cell(i=0, j=0): Cell(i=2, j=2)}]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 71, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 72, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 73, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 4]": "point", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 3]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 2]": "Av(Perm((1, 0)))", "[4, 3]": "point", "[5, 4]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=3, j=2). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 74, "in_tiling": {"[0, 2]": "point", "[1, 5]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "Av(Perm((1, 0)))", "[5, 4]": "point"}, "out_tiling": {"[0, 2]": "point", "[1, 5]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 3]": "Av(Perm((1, 0)))", "[5, 4]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 0", "identifier": 75, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 76, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "point", "[5, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 7]": "point", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 6]": "point", "[5, 3]": "Av(Perm((1, 0)))", "[6, 5]": "point", "[7, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=5, j=3). | The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 77, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 0]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 78, "in_tiling": {"[0, 3]": "point", "[1, 5]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 4]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 0]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 5]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 4]": "point", "[4, 1]": "point", "[5, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=4, j=0). | Inserting the top most point in to the cell Cell(i=4, j=0). | "}], "formal_step": "Placing the minimum point into row 0", "identifier": 79, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 0]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 0]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 0); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 80, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 46, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 81, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 82, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0))).", "identifier": 83, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 84, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": "[]", "relation": ""}}
