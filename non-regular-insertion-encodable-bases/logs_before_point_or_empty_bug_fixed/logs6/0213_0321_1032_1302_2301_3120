0213_0321_1032_1302_2301_3120

===========================================
Log created Sat, 20 May 2017 23:54:19

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 754 inferral cache hits and 2126 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 3070 tilings in it right now.
There were 1479 tilings of which 333 are verified.
There were 543 SiblingNodes of which 79 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2276* times, (1138 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 23:54:49

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 962 inferral cache hits and 39726 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 3825 tilings in it right now.
There were 1867 tilings of which 448 are verified.
There were 711 SiblingNodes of which 116 are verified.

The function splittings called the partitioning cache *39915* times, (626 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 23:55:20

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 488 inferral cache hits and 1755 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2498 tilings in it right now.
There were 1291 tilings of which 234 are verified.
There were 329 SiblingNodes of which 42 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1882* times, (941 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 23:55:50

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 831 inferral cache hits and 21446 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 3298 tilings in it right now.
There were 1648 tilings of which 253 are verified.
There were 392 SiblingNodes of which 53 are verified.

The function splittings called the partitioning cache *21624* times, (498 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 23:56:20

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5270 inferral cache hits and 1410 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2022 tilings in it right now.
There were 1028 tilings of which 130 are verified.
There were 264 SiblingNodes of which 35 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1514* times, (757 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 23:56:50

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 9567 inferral cache hits and 17701 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 3719 tilings in it right now.
There were 1747 tilings of which 268 are verified.
There were 456 SiblingNodes of which 62 are verified.

The function splittings called the partitioning cache *17866* times, (436 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 23:56:59

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 8 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 103 inferral cache hits and 985 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 625 tilings in it right now.
There were 393 tilings of which 273 are verified.
There were 197 SiblingNodes of which 93 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1048* times, (524 originating)
There were 0 cache misses

A proof tree was found in 8 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     │           ├─────11
                        │     │           └─────12
                        │     └─────13
                        │           ├─────14
                        │           └─────15
                        │                 ├─────16
                        │                 ├─────17
                        │                 │     ├─────18
                        │                 │     └─────19
                        │                 └─────20
                        │                       ├─────21
                        │                       │     ├─────22
                        │                       │     └─────23
                        │                       │           ├─────24
                        │                       │           └─────25
                        │                       └─────26
                        └─────27
                              ├─────28
                              └─────29
                                    ├─────30
                                    └─────31
                                          ├─────32
                                          └─────33

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))
2: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point

Label: 7

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))
4: Av+(Perm((1, 0)))

Label: 8

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0)))

Label: 9

+-+-+-+
| |1| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |2| |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 10

+-+-+-+-+
| | |1| |
+-+-+-+-+
| |2| |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))

Label: 11

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |2| | |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 12

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 13

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 14

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 15

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 16

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point

Label: 17

+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|2| | |3| |1|
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 18

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 19

+-+
|1|
+-+
1: point

Label: 20

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 21

+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 22

+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))

Label: 23

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 24

+-+-+-+-+
| | |1| |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))

Label: 25

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((1, 0)))

Label: 26

+-+
|1|
+-+
1: point

Label: 27

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((0, 1)))

Label: 28

+-+-+-+
| |1| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 29

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 1)))

Label: 30

+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |2| |1| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))

Label: 31

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((0, 1)))

Label: 32

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((0, 1)))

Label: 33

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 56, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 57, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 58, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 59, "in_tiling": {"[0, 0]": "point", "[1, 2]": "point", "[2, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 3]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 60, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point", "[3, 3]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point", "[3, 3]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 61, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)))", "[2, 4]": "point", "[3, 2]": "Av(Perm((1, 0)))", "[4, 3]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point", "[3, 5]": "point", "[4, 3]": "Av(Perm((1, 0)))", "[5, 4]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=1). | "}], "formal_step": "Placing the maximum point into row 1", "identifier": 62, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 1); either it is empty or Av+(Perm((1, 0))).", "identifier": 63, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 0)))", "[2, 2]": "point", "[3, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 64, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=2). | "}, {"children": [{"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 65, "in_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 2]": "point", "[3, 3]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "point", "[2, 2]": "point", "[3, 3]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 55, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=0)]", "identifier": 66, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0)))", "[4, 3]": "point", "[5, 2]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "Av(Perm((1, 0)))", "[4, 3]": "point", "[5, 2]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=2, j=1), Cell(i=2, j=1): Cell(i=3, j=2), Cell(i=3, j=2): Cell(i=4, j=3), Cell(i=4, j=1): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=0)}]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 67, "in_tiling": {"[0, 4]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 4]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 64, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 68, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 3]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 3]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 2); either it is empty or Av+(Perm((1, 0))).", "identifier": 69, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av(Perm((1, 0)))", "[3, 3]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 2", "identifier": 70, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=3)]", "identifier": 68, "in_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 3]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 2]": "Av+(Perm((1, 0)))", "[3, 3]": "point", "[4, 1]": "point"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=0): Cell(i=1, j=0), Cell(i=2, j=2): Cell(i=2, j=2), Cell(i=3, j=1): Cell(i=4, j=1)}, {Cell(i=0, j=0): Cell(i=3, j=3)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 71, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((1, 0))).", "identifier": 55, "in_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 72, "in_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 73, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 74, "in_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 2]": "point", "[4, 0]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 2]": "point", "[4, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 23, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=0)]", "identifier": 75, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=1): Cell(i=2, j=2), Cell(i=3, j=0): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=4, j=0)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 76, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 23, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 0", "identifier": 77, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 78, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)), Perm((2, 0, 1)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 79, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0))).", "identifier": 80, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((2, 3, 0, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
