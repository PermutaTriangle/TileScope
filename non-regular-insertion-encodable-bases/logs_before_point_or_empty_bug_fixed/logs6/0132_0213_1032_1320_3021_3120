0132_0213_1032_1320_3021_3120

===========================================
Log created Sat, 20 May 2017 16:39:05

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 408 inferral cache hits and 1531 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 2350 tilings in it right now.
There were 1162 tilings of which 266 are verified.
There were 451 SiblingNodes of which 58 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1640* times, (820 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 16:39:35

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 593 inferral cache hits and 27459 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 2784 tilings in it right now.
There were 1396 tilings of which 474 are verified.
There were 538 SiblingNodes of which 96 are verified.

The function splittings called the partitioning cache *27584* times, (422 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 16:40:06

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 416 inferral cache hits and 1399 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 1859 tilings in it right now.
There were 1035 tilings of which 243 are verified.
There were 265 SiblingNodes of which 37 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1502* times, (751 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 16:40:36

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 675 inferral cache hits and 16369 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 2785 tilings in it right now.
There were 1545 tilings of which 449 are verified.
There were 369 SiblingNodes of which 57 are verified.

The function splittings called the partitioning cache *16512* times, (410 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 16:41:06

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 5459 inferral cache hits and 1343 partitioning cache hits.
The partitioning cache had 9 tilings in it right now.
The inferral cache has 2018 tilings in it right now.
There were 1085 tilings of which 156 are verified.
There were 291 SiblingNodes of which 33 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1444* times, (722 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 16:41:36

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 9588 inferral cache hits and 12852 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 3652 tilings in it right now.
There were 1796 tilings of which 418 are verified.
There were 449 SiblingNodes of which 73 are verified.

The function splittings called the partitioning cache *13004* times, (400 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 16:42:03

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 26 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 112 inferral cache hits and 1141 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 832 tilings in it right now.
There were 478 tilings of which 306 are verified.
There were 248 SiblingNodes of which 104 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1212* times, (606 originating)
There were 0 cache misses

A proof tree was found in 26 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     └─────9
                        └─────10
                              ├─────11
                              │     ├─────12
                              │     └─────13
                              │           ├─────14
                              │           └─────15
                              │                 ├─────16
                              │                 └─────17
                              └─────18
                                    ├─────19
                                    └─────20
                                          ├─────21
                                          ├─────22
                                          │     ├─────23
                                          │     │     ├─────24
                                          │     │     └─────25
                                          │     └─────26
                                          └─────27
                                                ├─────28
                                                └─────29

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))
2: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))
2: point

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
3: point

Label: 7

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | | | |3| | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 8

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+
| | |1| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
3: Av(Perm((1, 0)))

Label: 9

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | | |5| | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | |3| | | | |
+-+-+-+-+-+-+-+
| | | | | | |2|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 1)))
4: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
5: Av+(Perm((1, 0)))

Label: 10

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 11

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))

Label: 12

+-+-+-+
| |1| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 13

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0)))

Label: 14

+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((1, 0)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))
4: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
|3| | | | | | |
+-+-+-+-+-+-+-+
| | | | | | |1|
+-+-+-+-+-+-+-+
| | | | | |2| |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | | | |1| | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 15

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| | | |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))

Label: 16

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((1, 0)))

Label: 17

+-+
|1|
+-+
1: point

Label: 18

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 19

+-+-+-+-+
| |1| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: point
2: Av+(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))

Label: 20

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 1)))
4: Av+(Perm((1, 0)))

Label: 21

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |1| |1|
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point

Label: 22

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|2| |3| | |4|
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((0, 1)))
4: Av+(Perm((1, 0)))

Label: 23

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av(Perm((0, 1)))
4: Av+(Perm((1, 0)))

Label: 24

+-+-+-+-+
| |1| | |
+-+-+-+-+
|2| | |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((1, 0)))

Label: 25

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 1)))
4: Av+(Perm((1, 0)))

Label: 26

+-+
|1|
+-+
1: point

Label: 27

+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
|2| |3| | |4|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
| | | |1| | |
+-+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 28

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|2| |3| |4|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))
3: Av+(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 29

+-+
|1|
+-+
1: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 83, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 84, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 85, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 86, "in_tiling": {"[0, 0]": "point", "[1, 4]": "Av(Perm((1, 0)))", "[2, 5]": "point", "[3, 3]": "Av(Perm((0, 1)))", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 2]": "Av(Perm((1, 0)))", "[2, 3]": "point", "[3, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=3, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 87, "in_tiling": {"[0, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 4]": "Av(Perm((1, 0)))", "[3, 5]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 5]": "point", "[2, 3]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 6]": "Av+(Perm((1, 0)))", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=2, j=4). | Inserting the top most point in to the cell Cell(i=0, j=3). | "}], "formal_step": "We perform cell insertion into cell (0, 4); either it is empty or Av+(Perm((0, 2, 1)), Perm((2, 0, 1))).", "identifier": 88, "in_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 3]": "Av(Perm((1, 0)))", "[3, 4]": "point", "[4, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 0]": "point", "[2, 5]": "Av(Perm((1, 0)))", "[3, 6]": "point", "[4, 3]": "Av(Perm((0, 1)))", "[5, 1]": "point", "[6, 2]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=4, j=1). | "}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 89, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 0]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=1). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 90, "in_tiling": {"[0, 3]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 4]": "Av(Perm((1, 0)))", "[3, 5]": "point", "[4, 0]": "point", "[5, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 5]": "Av(Perm((1, 0)))", "[3, 6]": "point", "[4, 0]": "point", "[5, 2]": "Av(Perm((1, 0)))", "[6, 3]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=5, j=2). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 82, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0)]", "identifier": 91, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 0]": "point", "[3, 1]": "point", "[4, 2]": "Av(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=3, j=1), Cell(i=3, j=1): Cell(i=4, j=2)}, {Cell(i=0, j=0): Cell(i=2, j=0)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 92, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 1); either it is empty or Av+(Perm((1, 0))).", "identifier": 82, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 93, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point"}, "out_tiling": {"[0, 3]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 4]": "point", "[2, 2]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 0]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=2, j=1). | "}, {"children": [{"children": [], "formal_step": "This tiling contains no avoiding perms", "identifier": 94, "in_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "point", "[4, 2]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 92, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "point", "[3, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 95, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 77, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=4, j=0)]", "identifier": 96, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 2]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 1]": "point", "[4, 0]": "point", "[5, 2]": "Av+(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=1): Cell(i=2, j=2), Cell(i=3, j=0): Cell(i=3, j=1), Cell(i=4, j=1): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=4, j=0)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 81, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=0)]", "identifier": 97, "in_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 3]": "point", "[2, 2]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "point", "[5, 2]": "Av(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=2), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=1): Cell(i=2, j=2), Cell(i=3, j=0): Cell(i=4, j=1), Cell(i=4, j=1): Cell(i=5, j=2)}, {Cell(i=0, j=0): Cell(i=3, j=0)}]", "relation": ""}], "formal_step": "Placing the minimum point into row 1", "identifier": 95, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av+(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((1, 0))).", "identifier": 81, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av+(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 98, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the minimum point into row 0", "identifier": 73, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((2, 0, 1)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0))).", "identifier": 99, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((3, 1, 2, 0))).", "identifier": 100, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((3, 1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0))).", "identifier": 101, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)), Perm((1, 3, 2, 0)), Perm((3, 0, 2, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
