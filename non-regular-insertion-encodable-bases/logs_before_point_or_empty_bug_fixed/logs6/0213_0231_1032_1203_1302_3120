0213_0231_1032_1203_1302_3120

===========================================
Log created Sat, 20 May 2017 22:47:42

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 395 inferral cache hits and 1701 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 2779 tilings in it right now.
There were 1317 tilings of which 348 are verified.
There were 517 SiblingNodes of which 86 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1822* times, (911 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:48:12

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 505 inferral cache hits and 28545 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 3127 tilings in it right now.
There were 1458 tilings of which 289 are verified.
There were 536 SiblingNodes of which 89 are verified.

The function splittings called the partitioning cache *28667* times, (406 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:48:42

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 259 inferral cache hits and 1197 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1532 tilings in it right now.
There were 897 tilings of which 216 are verified.
There were 217 SiblingNodes of which 30 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1286* times, (643 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:49:12

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 652 inferral cache hits and 15183 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 3021 tilings in it right now.
There were 1589 tilings of which 213 are verified.
There were 315 SiblingNodes of which 43 are verified.

The function splittings called the partitioning cache *15315* times, (362 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:49:42

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4435 inferral cache hits and 1245 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1666 tilings in it right now.
There were 908 tilings of which 107 are verified.
There were 230 SiblingNodes of which 35 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1338* times, (669 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:50:12

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 9383 inferral cache hits and 13698 partitioning cache hits.
The partitioning cache had 7 tilings in it right now.
The inferral cache has 3261 tilings in it right now.
There were 1693 tilings of which 476 are verified.
There were 411 SiblingNodes of which 77 are verified.

The function splittings called the partitioning cache *13853* times, (418 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:50:43

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 73 inferral cache hits and 860 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 642 tilings in it right now.
There were 392 tilings of which 211 are verified.
There were 208 SiblingNodes of which 67 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *914* times, (457 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 22:51:01

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 17 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 83 inferral cache hits and 10371 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 729 tilings in it right now.
There were 483 tilings of which 304 are verified.
There were 263 SiblingNodes of which 126 are verified.

The function splittings called the partitioning cache *10428* times, (221 originating)
There were 0 cache misses

A proof tree was found in 17 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     └─────10
                        │     │           ├─────11
                        │     │           └─────12
                        │     │                 ├─────13
                        │     │                 └─────14
                        │     └─────15
                        └─────16
                              ├─────17
                              │     ├─────18
                              │     └─────19
                              │           ├─────20
                              │           └─────21
                              │                 ├─────22
                              │                 └─────23
                              └─────24

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | | |1|
+-+-+-+-+
|2| |3| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0)))

Label: 6

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))
2: Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point

Label: 7

+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | |1| |2|
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
2: Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
4: point

Label: 8

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
2: Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point

Label: 9

+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point

Label: 10

+-+-+-+-+
| | |3| |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |1| |2|
+-+-+-+-+
1: Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))
2: Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point

Label: 11

+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
| | | | | |3|
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
|4| | | | | | |
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
| | | | | | |3|
+-+-+-+-+-+-+-+
| | | | |2| | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((1, 0)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av+(Perm((0, 1)))

Label: 12

+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
| | | |2| |3|
+-+-+-+-+-+-+
| | | | |1| |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
4: Av+(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+
| | | |1| | | |
+-+-+-+-+-+-+-+
|1| | | | | | |
+-+-+-+-+-+-+-+
| |1| | | | | |
+-+-+-+-+-+-+-+
| | |2| | | | |
+-+-+-+-+-+-+-+
| | | | |2| |3|
+-+-+-+-+-+-+-+
| | | | | |1| |
+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Label: 13

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 1)))
2: point

Label: 14

+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |2| |3|
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
We use his sibling for the next strategy
+-+-+-+
| |2| |
+-+-+-+
|2| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point

Label: 15

+-+-+-+-+
| | |3| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
1: Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: point
3: Av(Perm((0, 1)))
4: Av(Perm((1, 0)))

Label: 16

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((1, 0)))
3: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
4: point

Label: 17

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|1| | |2|
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point

Label: 18

+-+-+-+
| |2| |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
1: Av+(Perm((1, 0)))
2: point
We use his sibling for the next strategy
+-+-+-+-+
| | |2| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av(Perm((1, 0)))
2: point

Label: 19

+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |3| |
+-+-+-+-+
|1| | |2|
+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
3: point

Label: 20

+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
2: Av(Perm((1, 0)))
3: point

Label: 21

+-+-+-+-+-+-+
| |4| | | | |
+-+-+-+-+-+-+
| | |4| | | |
+-+-+-+-+-+-+
| | | | |4| |
+-+-+-+-+-+-+
|1| | |2| |3|
+-+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((1, 0)))
3: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
4: point

Label: 22

+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
| | | |4| |
+-+-+-+-+-+
|1| |2| |3|
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((1, 0)))
3: Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))
4: point

Label: 23

+-+
|1|
+-+
1: point

Label: 24

+-+-+-+-+-+
| |3| | | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av+(Perm((1, 0)))
2: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))
3: point
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
|1| | | | | |
+-+-+-+-+-+-+
1: Av(Perm((1, 0)))
2: point
3: Av+(Perm((1, 0)))
4: Av(Perm((1, 0, 2)), Perm((1, 2, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 128, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 129, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 130, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 131, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 132, "in_tiling": {"[0, 4]": "point", "[1, 3]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((1, 0)))", "[4, 5]": "point", "[5, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 5]": "Av+(Perm((0, 1)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((1, 0)))", "[3, 6]": "point", "[4, 2]": "Av(Perm((1, 0)))", "[5, 4]": "point", "[6, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the top most point in to the cell Cell(i=0, j=3). | Inserting the top most point in to the cell Cell(i=4, j=2). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 12, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 1)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 131, "in_tiling": {"[0, 2]": "point", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=2, j=0). | "}], "formal_step": "A splitting of the tiling", "identifier": 133, "in_tiling": {"[0, 3]": "point", "[1, 2]": "Av+(Perm((0, 1)))", "[2, 4]": "point", "[3, 1]": "Av(Perm((0, 1)))", "[4, 0]": "point", "[5, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 4]": "point", "[1, 3]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[3, 5]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 0]": "point", "[6, 1]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[{Cell(i=0, j=1): Cell(i=0, j=4), Cell(i=1, j=0): Cell(i=2, j=2)}, {Cell(i=0, j=2): Cell(i=1, j=3), Cell(i=1, j=3): Cell(i=3, j=5), Cell(i=2, j=1): Cell(i=4, j=1), Cell(i=3, j=0): Cell(i=5, j=0), Cell(i=4, j=1): Cell(i=6, j=1)}]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=2). | "}], "formal_step": "Placing the minimum point into row 0", "identifier": 134, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0))).", "identifier": 7, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[2, 2]": "point", "[3, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 135, "in_tiling": {"[0, 1]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 3]": "point", "[3, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 2]": "Av(Perm((0, 1)))", "[1, 1]": "point", "[2, 3]": "Av(Perm((1, 0)))", "[3, 4]": "point", "[4, 5]": "point", "[5, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=1). | "}], "formal_step": "We perform cell insertion into cell (0, 1); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1))).", "identifier": 136, "in_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 0, 1)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((0, 2, 1)), Perm((1, 0, 2)), Perm((1, 2, 0)))", "[3, 3]": "point", "[4, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 137, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 3]": "point", "[3, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 138, "in_tiling": {"[0, 1]": "Av(Perm((1, 0)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 3]": "point", "[4, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((1, 0)))", "[1, 2]": "point", "[2, 4]": "point", "[3, 3]": "point", "[4, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 127, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 139, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((1, 0)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 3]": "point", "[2, 2]": "point", "[3, 0]": "Av(Perm((1, 0)))", "[4, 1]": "point", "[5, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=1, j=2): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=1): Cell(i=4, j=1), Cell(i=4, j=0): Cell(i=5, j=0)}, {Cell(i=0, j=0): Cell(i=2, j=2)}]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 140, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (3, 0); either it is empty or Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2))).", "identifier": 141, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 1]": "point", "[3, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 142, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 4]": "point", "[2, 1]": "Av+(Perm((1, 0)))", "[3, 3]": "point", "[4, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))", "[1, 1]": "point", "[2, 5]": "point", "[3, 2]": "Av+(Perm((1, 0)))", "[4, 4]": "point", "[5, 3]": "Av(Perm((1, 0, 2)), Perm((1, 2, 0)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((1, 0))).", "identifier": 127, "in_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((1, 0)))", "[1, 2]": "point", "[2, 0]": "Av(Perm((1, 0)))", "[3, 1]": "point", "[4, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "Placing the maximum point into row 0", "identifier": 143, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (2, 0); either it is empty or Av+(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2))).", "identifier": 144, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1)), Perm((1, 2, 0))).", "identifier": 145, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((1, 2, 0)), Perm((0, 2, 1, 3)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0))).", "identifier": 146, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((1, 0, 3, 2)), Perm((1, 2, 0, 3)), Perm((1, 3, 0, 2)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
