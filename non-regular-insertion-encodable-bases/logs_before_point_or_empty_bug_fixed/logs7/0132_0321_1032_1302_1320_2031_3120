0132_0321_1032_1302_1320_2031_3120

===========================================
Log created Sat, 20 May 2017 10:08:08

Maximum depth fully searched was 3

Maximum time set at 30 seconds

Total time taken was 4 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 28 inferral cache hits and 352 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 517 tilings in it right now.
There were 276 tilings of which 78 are verified.
There were 124 SiblingNodes of which 30 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *380* times, (190 originating)
There were 0 cache misses

A proof tree was found in 4 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
2: point
3: Av(Perm((0, 2, 1)), Perm((2, 1, 0)))

Label: 3

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av(Perm((0, 2, 1)), Perm((2, 1, 0)))

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
2: point
3: Av(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |4|
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |2| |3| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av(Perm((1, 0)))

Label: 5

+-+-+-+-+
| |4| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av(Perm((1, 0)))

Label: 6

+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
We use his sibling for the next strategy
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
2: point

Label: 7

+-+-+-+-+
| |4| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
| |2| |3|
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))
4: Av+(Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+
| | |3| |
+-+-+-+-+
| |4| | |
+-+-+-+-+
|3| | | |
+-+-+-+-+
| |2| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((1, 0)))

Label: 8

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 11, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 12, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=1, j=0). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 14, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 3]": "Av+(Perm((1, 0)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 3]": "Av(Perm((1, 0)))", "[2, 4]": "point", "[3, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))"}, "recurse": "[]", "relation": "| Inserting the top most point in to the cell Cell(i=1, j=3). | The reverse of: Inserting the bottom most point in to the cell Cell(i=3, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 3); either it is empty or Av+(Perm((1, 0))).", "identifier": 2, "in_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 3]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 3]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 15, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 2]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 1)))", "[1, 3]": "Av(Perm((1, 0)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 2, 1)), Perm((1, 2, 0)), Perm((2, 1, 0)))", "[4, 4]": "Av(Perm((1, 0)))"}, "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=2), Cell(i=1, j=1): Cell(i=1, j=1), Cell(i=1, j=3): Cell(i=1, j=3), Cell(i=2, j=0): Cell(i=2, j=0), Cell(i=3, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=4, j=4)}]", "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=0). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2))).", "identifier": 16, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((1, 2, 0)), Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)))", "[1, 2]": "Av(Perm((0, 2, 1)), Perm((2, 1, 0)))"}, "recurse": "[]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0))).", "identifier": 17, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((1, 3, 0, 2)), Perm((1, 3, 2, 0)), Perm((2, 0, 3, 1)), Perm((3, 1, 2, 0)))"}, "recurse": "[]", "relation": ""}}
