0132_1302

===========================================
Log created Sat, 20 May 2017 12:31:34

Maximum depth fully searched was 4

Maximum time set at 60 seconds

Total time taken was 60 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 416 inferral cache hits and 2286 partitioning cache hits.
The partitioning cache had 2 tilings in it right now.
The inferral cache has 3216 tilings in it right now.
There were 1712 tilings of which 93 are verified.
There were 830 SiblingNodes of which 47 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *2448* times, (1224 originating)
There were 0 cache misses

No proof tree was found after 60 seconds

===========================================
Log created Sat, 20 May 2017 12:32:24

Maximum depth fully searched was 3

Maximum time set at 60 seconds

Total time taken was 50 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 290 inferral cache hits and 44143 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 2533 tilings in it right now.
There were 1429 tilings of which 153 are verified.
There were 735 SiblingNodes of which 93 are verified.

The function splittings called the partitioning cache *44266* times, (410 originating)
There were 0 cache misses

A proof tree was found in 50 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     ├─────7
                  │     └─────8
                  └─────9
                        ├─────10
                        └─────11

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av(Perm((0, 2, 1)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))

Label: 4

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av+(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
|2| | |3| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |2| | |3| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av(Perm((0, 2, 1)))

Label: 5

+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| |2| |3| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av(Perm((0, 2, 1)))

Label: 6

+-+
|1|
+-+
1: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))

Label: 7

+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))

Label: 8

+-+
|1|
+-+
1: point

Label: 9

+-+-+-+-+-+-+
|4| | |5| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| |2| | | | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
5: Av+(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+-+-+-+
|4| | | |3| | | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | |1| | |
+-+-+-+-+-+-+-+-+-+
| |4| | | |3| | | |
+-+-+-+-+-+-+-+-+-+
| | | | | | | | |1|
+-+-+-+-+-+-+-+-+-+
| | | | | | | |3| |
+-+-+-+-+-+-+-+-+-+
| | |2| | | | | | |
+-+-+-+-+-+-+-+-+-+
| | | |1| | | | | |
+-+-+-+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av(Perm((0, 2, 1)))
4: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))

Label: 10

+-+-+-+-+-+-+
|2| | |3| | |
+-+-+-+-+-+-+
| | | | | |1|
+-+-+-+-+-+-+
| |2| | |3| |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av(Perm((0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+
|2| |3|
+-+-+-+
| |1| |
+-+-+-+
1: point
2: Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))
3: Av+(Perm((0, 2, 1)))

Label: 11

+-+-+-+
| | |3|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 1)))
2: Av(Perm((0, 2, 1)))
3: point

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 210, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 211, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 175, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 0, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 212, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 2, 1)))", "[4, 2]": "point"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 1]": "Av(Perm((0, 2, 1)))", "[4, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=3)}, {Cell(i=0, j=1): Cell(i=1, j=1), Cell(i=1, j=0): Cell(i=2, j=0), Cell(i=2, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=4, j=2)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 203, "in_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 3]": "Av(Perm((0, 2, 1)))", "[4, 1]": "Av(Perm((0, 2, 1)))", "[5, 2]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=2, j=1). | "}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 23, "in_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1)))", "[1, 1]": "Av(Perm((0, 2, 1)))", "[2, 2]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "A splitting of the tiling", "identifier": 213, "in_tiling": {"[0, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 1)))", "[2, 0]": "point", "[3, 4]": "Av+(Perm((0, 2, 1)))", "[4, 2]": "Av(Perm((0, 2, 1)))", "[5, 3]": "point"}, "out_tiling": {"[0, 6]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 4]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 6]": "Av(Perm((0, 2, 1)))", "[5, 4]": "Av(Perm((0, 2, 1)))", "[6, 5]": "point", "[7, 2]": "Av(Perm((0, 2, 1)))", "[8, 3]": "point"}, "recurse": "[{Cell(i=0, j=3): Cell(i=0, j=6), Cell(i=1, j=1): Cell(i=1, j=4), Cell(i=2, j=0): Cell(i=3, j=0), Cell(i=3, j=3): Cell(i=4, j=6), Cell(i=4, j=1): Cell(i=5, j=4), Cell(i=5, j=2): Cell(i=6, j=5)}, {Cell(i=0, j=0): Cell(i=2, j=1), Cell(i=1, j=1): Cell(i=7, j=2), Cell(i=2, j=2): Cell(i=8, j=3)}]", "relation": "| Inserting the right most point in to the cell Cell(i=3, j=4). | "}], "formal_step": "We perform cell insertion into cell (3, 3); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 203, "in_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av+(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 3]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[2, 0]": "point", "[3, 3]": "Av(Perm((0, 2, 1)))", "[4, 1]": "Av(Perm((0, 2, 1)))", "[5, 2]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=2, j=1). | "}], "formal_step": "We perform cell insertion into cell (2, 1); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 175, "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))", "[1, 0]": "point", "[2, 1]": "Av(Perm((0, 2, 1)))"}, "recurse": "[]", "relation": "| Inserting the bottom most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2))).", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 3, 2)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}}
