0321_1302

===========================================
Log created Sat, 20 May 2017 06:35:04

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 241 inferral cache hits and 1414 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1655 tilings in it right now.
There were 892 tilings of which 51 are verified.
There were 452 SiblingNodes of which 33 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1516* times, (758 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:35:34

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 267 inferral cache hits and 26572 partitioning cache hits.
The partitioning cache had 5 tilings in it right now.
The inferral cache has 1807 tilings in it right now.
There were 1016 tilings of which 78 are verified.
There were 516 SiblingNodes of which 48 are verified.

The function splittings called the partitioning cache *26678* times, (347 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:36:04

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 274 inferral cache hits and 1412 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1268 tilings in it right now.
There were 873 tilings of which 61 are verified.
There were 249 SiblingNodes of which 25 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1516* times, (758 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:36:34

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements, all_column_placements
Equivalent: all_equivalent_row_placements, all_equivalent_column_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 438 inferral cache hits and 15098 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 1919 tilings in it right now.
There were 1278 tilings of which 84 are verified.
There were 334 SiblingNodes of which 28 are verified.

The function splittings called the partitioning cache *15227* times, (345 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:37:05

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 4882 inferral cache hits and 1401 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 1543 tilings in it right now.
There were 969 tilings of which 57 are verified.
There were 303 SiblingNodes of which 22 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1504* times, (752 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:37:36

Maximum depth fully searched was 4

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_point_isolations
Equivalent: point_separation, all_equivalent_point_isolations
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 6827 inferral cache hits and 18158 partitioning cache hits.
The partitioning cache had 4 tilings in it right now.
The inferral cache has 2099 tilings in it right now.
There were 1282 tilings of which 67 are verified.
There were 380 SiblingNodes of which 30 are verified.

The function splittings called the partitioning cache *18297* times, (407 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Sat, 20 May 2017 06:38:09

Maximum depth fully searched was 7

Maximum time set at 30 seconds

Total time taken was 32 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 26 inferral cache hits and 617 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 175 tilings in it right now.
There were 125 tilings of which 69 are verified.
There were 77 SiblingNodes of which 23 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *658* times, (329 originating)
There were 0 cache misses

No proof tree was found after 32 seconds

===========================================
Log created Sat, 20 May 2017 06:38:39

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 51 inferral cache hits and 10061 partitioning cache hits.
The partitioning cache had 0 tilings in it right now.
The inferral cache has 666 tilings in it right now.
There were 488 tilings of which 207 are verified.
There were 336 SiblingNodes of which 71 are verified.

The function splittings called the partitioning cache *10155* times, (397 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:39:12

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 32 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 210 inferral cache hits and 1221 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 318 tilings in it right now.
There were 297 tilings of which 47 are verified.
There were 67 SiblingNodes of which 17 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *1308* times, (654 originating)
There were 0 cache misses

No proof tree was found after 32 seconds

===========================================
Log created Sat, 20 May 2017 06:39:42

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_row_placements
Equivalent: all_equivalent_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 573 inferral cache hits and 5077 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 1027 tilings in it right now.
There were 869 tilings of which 288 are verified.
There were 161 SiblingNodes of which 48 are verified.

The function splittings called the partitioning cache *5259* times, (502 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:40:13

Maximum depth fully searched was 8

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 7 inferral cache hits and 357 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 86 tilings in it right now.
There were 61 tilings of which 21 are verified.
There were 51 SiblingNodes of which 12 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *380* times, (190 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Sat, 20 May 2017 06:40:45

Maximum depth fully searched was 9

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 23 inferral cache hits and 5471 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 218 tilings in it right now.
There were 156 tilings of which 65 are verified.
There were 117 SiblingNodes of which 27 are verified.

The function splittings called the partitioning cache *5521* times, (237 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Sat, 20 May 2017 06:41:17

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 31 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 110 inferral cache hits and 855 partitioning cache hits.
The partitioning cache had 3 tilings in it right now.
The inferral cache has 179 tilings in it right now.
There were 167 tilings of which 22 are verified.
There were 40 SiblingNodes of which 12 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *916* times, (458 originating)
There were 0 cache misses

No proof tree was found after 31 seconds

===========================================
Log created Sat, 20 May 2017 06:41:47

Maximum depth fully searched was 6

Maximum time set at 30 seconds

Total time taken was 30 seconds

The strategies applied were:
Batch: all_cell_insertions, all_minimum_row_placements
Equivalent: all_equivalent_minimum_row_placements, point_separation
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: splittings
Verification: subset_verified, is_empty

There were 391 inferral cache hits and 4865 partitioning cache hits.
The partitioning cache had 6 tilings in it right now.
The inferral cache has 608 tilings in it right now.
There were 533 tilings of which 113 are verified.
There were 105 SiblingNodes of which 28 are verified.

The function splittings called the partitioning cache *5025* times, (428 originating)
There were 0 cache misses

No proof tree was found after 30 seconds

===========================================
Log created Sat, 20 May 2017 06:42:04

Maximum depth fully searched was 5

Maximum time set at 30 seconds

Total time taken was 16 seconds

The strategies applied were:
Batch: all_cell_insertions, all_column_placements
Equivalent: all_equivalent_column_placements
Inferral: empty_cell_inferral, row_and_column_separation, subclass_inferral
Recursive: components, reversibly_deletable_cells
Verification: subset_verified, is_empty

There were 26 inferral cache hits and 580 partitioning cache hits.
The partitioning cache had 1 tilings in it right now.
The inferral cache has 169 tilings in it right now.
There were 134 tilings of which 86 are verified.
There were 80 SiblingNodes of which 34 are verified.

The function cells_of_occurrences_by_perms called the partitioning cache *620* times, (319 originating)
There were 1 cache misses

A proof tree was found in 16 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  └─────6
                        ├─────7
                        │     ├─────8
                        │     │     ├─────9
                        │     │     │     ├─────10
                        │     │     │     └─────11
                        │     │     └─────12
                        │     └─────13
                        │           ├─────14
                        │           ├─────15
                        │           └─────16
                        └─────17
                              ├─────18
                              ├─────19
                              └─────20

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 4

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 5

+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point

Label: 6

+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point

Label: 7

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
|1| | |
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 8

+-+-+-+
|3| | |
+-+-+-+
| | |2|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 9

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 10

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: point
2: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 11

+-+-+
|1| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point

Label: 12

+-+
|1|
+-+
1: point

Label: 13

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+-+-+-+-+
| |4| | | |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |3| | |
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
4: Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)))

Label: 14

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 15

+-+
|1|
+-+
1: point

Label: 16

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)))
We use his sibling for the next strategy
+-+
|1|
+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 17

+-+-+-+-+
|3| | | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
| | | |2|
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 18

+-+-+
|3| |
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))
2: point
3: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Label: 19

+-+
|1|
+-+
1: point

Label: 20

+-+
|1|
+-+
1: Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 10, "in_tiling": {}, "out_tiling": {}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 11, "in_tiling": {"[0, 1]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 12, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [{"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 13, "in_tiling": {"[0, 1]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "out_tiling": {"[0, 1]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 14, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=1, j=1)]", "identifier": 15, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 3]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 2]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=0, j=0), Cell(i=0, j=2): Cell(i=0, j=3), Cell(i=1, j=1): Cell(i=2, j=2)}, {Cell(i=0, j=0): Cell(i=1, j=1)}]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 8, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": "| The reverse of: Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "The components of the tiling", "identifier": 16, "in_tiling": {"[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 1]": "point", "[3, 3]": "point"}, "out_tiling": {"[0, 5]": "point", "[1, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 6]": "Av(Perm((2, 1, 0)), Perm((1, 3, 0, 2)))", "[2, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[3, 1]": "point", "[4, 3]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=2, j=0), Cell(i=0, j=2): Cell(i=2, j=2), Cell(i=1, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=4, j=3)}, {Cell(i=0, j=1): Cell(i=0, j=5), Cell(i=1, j=0): Cell(i=1, j=4), Cell(i=1, j=2): Cell(i=1, j=6)}]", "relation": "| Inserting the left most point in to the cell Cell(i=0, j=4). | "}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 17, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 3]": "point"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 4]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point", "[2, 3]": "point"}, "recurse": "[]", "relation": ""}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 0, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": "[]", "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}], "formal_step": "The components of the tiling", "identifier": 18, "in_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "out_tiling": {"[0, 4]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[2, 3]": "point", "[3, 1]": "point"}, "recurse": "[{Cell(i=0, j=0): Cell(i=1, j=0), Cell(i=0, j=2): Cell(i=1, j=2), Cell(i=1, j=1): Cell(i=3, j=1)}, {Cell(i=0, j=0): Cell(i=2, j=3)}, {Cell(i=0, j=0): Cell(i=0, j=4)}]", "relation": ""}], "formal_step": "Placing the rightmost point into column 0", "identifier": 14, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 0, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": ""}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 8, "in_tiling": {"[0, 0]": "Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[0, 2]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))", "[1, 1]": "point"}, "recurse": "[]", "relation": "| Inserting the right most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2))).", "identifier": 2, "in_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 3, 2, 1)), Perm((1, 3, 0, 2)))"}, "recurse": "[]", "relation": ""}}
