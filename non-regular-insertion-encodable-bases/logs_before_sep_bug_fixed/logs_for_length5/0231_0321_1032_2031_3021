0231_0321_1032_2031_3021
Log created  Sat, 15 Apr 2017 16:37:55
Finding the proof tree for 0231_0321_1032_2031_3021 took 203 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  │           ├─────8
                  │           ├─────9
                  │           ├─────10
                  │           └─────11
                  └─────12

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
We use his sibling for the next strategy
+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
2: Av(Perm((0, 2, 1)))
3: point

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1)))
2: point

Label: 4

+-+-+-+
| |3| |
+-+-+-+
|1| |2|
+-+-+-+
1: Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))
2: Av(Perm((0, 2, 1)))
3: point
We use his sibling for the next strategy
+-+-+-+-+
| |4| | |
+-+-+-+-+
| | |2| |
+-+-+-+-+
| |3| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
| | | |1|
+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 5

+-+-+-+
| |4| |
+-+-+-+
| | |2|
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 6

+-+-+-+
| |3| |
+-+-+-+
| | |1|
+-+-+-+
| |2| |
+-+-+-+
|1| | |
+-+-+-+
1: point
2: Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
3: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+
| |2|
+-+-+
|1| |
+-+-+
1: point
2: Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))

Label: 7

+-+-+-+
| |4| |
+-+-+-+
| | |2|
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av+(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
4: Av(Perm((0, 1)), Perm((1, 0)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| |4| | | |5|
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |3| | | | |
+-+-+-+-+-+-+
|2| | | | | |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
| | | |2| | |
+-+-+-+-+-+-+
| | |1| | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
4: Av(Perm((0, 1)), Perm((1, 0)))
5: Av(Perm((1, 0)))

Label: 8

+-+-+-+
| |4| |
+-+-+-+
| | |2|
+-+-+-+
| |3| |
+-+-+-+
|2| | |
+-+-+-+
| |1| |
+-+-+-+
1: Av(Perm((0, 2, 1)))
2: point
3: Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))
4: Av(Perm((0, 1)), Perm((1, 0)))

Label: 9

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Label: 10

+-+
|1|
+-+
1: point

Label: 11

+-+
|1|
+-+
1: Av(Perm((1, 0)))

Label: 12

+-+
|1|
+-+
1: Av(Perm((0, 2, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 206, "in_tiling": {}, "out_tiling": {}, "recurse": false, "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 207, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": false, "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 208, "in_tiling": {"[0, 0]": "point", "[1, 1]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 3]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 2]": "point"}, "out_tiling": {"[0, 0]": "point", "[1, 1]": "Av+(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))"}, "recurse": false, "relation": "| The reverse of: Inserting the right most point in to the cell Cell(i=1, j=1). | "}, {"children": [{"children": [], "formal_step": "recurse", "identifier": 18, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "recurse": true, "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": false, "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 1, "in_tiling": {"[0, 0]": "point"}, "out_tiling": {"[0, 0]": "point"}, "recurse": false, "relation": ""}, {"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 4, "in_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((1, 0)))"}, "recurse": false, "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=2, j=0), Cell(i=3, j=1), Cell(i=5, j=6)]", "identifier": 112, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av+(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "out_tiling": {"[0, 3]": "point", "[1, 2]": "Av(Perm((0, 2, 1)))", "[1, 4]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 6]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 0]": "Av(Perm((0, 2, 1)))", "[3, 1]": "point", "[4, 5]": "point", "[5, 6]": "Av(Perm((1, 0)))"}, "recurse": false, "relation": "| Inserting the right most point in to the cell Cell(i=1, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=4, j=4). | Inserting the left most point in to the cell Cell(i=4, j=4). | "}], "formal_step": "We perform cell insertion into cell (1, 0); either it is empty or Av+(Perm((0, 2, 1))).", "identifier": 18, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)))", "[1, 2]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 4]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 3]": "point"}, "recurse": false, "relation": ""}, {"children": [], "formal_step": "recurse", "identifier": 7, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": true, "relation": ""}], "formal_step": "Reversibly delete the points at cells [Cell(i=3, j=0)]", "identifier": 209, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 1]": "Av(Perm((0, 2, 1)))", "[1, 3]": "Av(Perm((1, 2, 0)), Perm((2, 1, 0)), Perm((1, 0, 3, 2)))", "[1, 5]": "Av(Perm((0, 1)), Perm((1, 0)))", "[2, 4]": "point", "[3, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": false, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=1, j=2). | Inserting the right most point in to the cell Cell(i=1, j=2). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1))).", "identifier": 89, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))", "[1, 1]": "point", "[2, 0]": "Av(Perm((0, 2, 1)))"}, "recurse": false, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1))).", "identifier": 210, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 3, 1)), Perm((0, 3, 2, 1)), Perm((1, 0, 3, 2)), Perm((2, 0, 3, 1)), Perm((3, 0, 2, 1)))"}, "recurse": false, "relation": ""}}
