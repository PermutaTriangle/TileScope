0213_1230_1302_2130_2301
Log created  Sat, 15 Apr 2017 15:29:05
Finding the proof tree for 0213_1230_1302_2130_2301 took 74 seconds

Human readable:

root: 0
      ├─────1
      └─────2
            ├─────3
            └─────4
                  ├─────5
                  │     ├─────6
                  │     └─────7
                  └─────8
                        ├─────9
                        └─────10

Label: 0

+-+
|1|
+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))

Label: 1

+-+
| |
+-+


Label: 2

+-+
|1|
+-+
1: Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))

Label: 3

+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point

Label: 4

+-+-+
| |3|
+-+-+
|2| |
+-+-+
| |1|
+-+-+
1: Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |5| | | |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
5: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))

Label: 5

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))

Label: 6

+-+-+-+-+
| | |3| |
+-+-+-+-+
| | | |2|
+-+-+-+-+
|2| | | |
+-+-+-+-+
| |1| | |
+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))

Label: 7

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
| | | |3| |
+-+-+-+-+-+
|3| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: Av+(Perm((0, 1)))
3: point
4: Av(Perm((0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |3| |
+-+-+-+-+-+-+
| | | | | |2|
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 1)))
3: point

Label: 8

+-+-+-+-+-+-+
| | |2| | | |
+-+-+-+-+-+-+
| | | | | |4|
+-+-+-+-+-+-+
| | | |3| | |
+-+-+-+-+-+-+
|3| | | | | |
+-+-+-+-+-+-+
| | | | |2| |
+-+-+-+-+-+-+
| |1| | | | |
+-+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: Av(Perm((0, 1)))
3: point
4: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))

Label: 9

+-+-+-+-+-+
| | |4| | |
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| | | |2| |
+-+-+-+-+-+
|2| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
4: Av(Perm((0, 1)))

Label: 10

+-+-+-+-+
| | | |3|
+-+-+-+-+
| |2| | |
+-+-+-+-+
|2| | | |
+-+-+-+-+
| | |1| |
+-+-+-+-+
1: Av+(Perm((0, 1)))
2: point
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))
We use his sibling for the next strategy
+-+-+-+-+-+
| | | | |3|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |2| | |
+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
1: point
2: Av(Perm((0, 1)))
3: Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))

Computer readable (JSON):

{"root": {"children": [{"children": [], "formal_step": "Verified because it is a one by one tiling with a subclass", "identifier": 15, "in_tiling": {}, "out_tiling": {}, "recurse": false, "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 16, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": false, "relation": ""}, {"children": [{"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 17, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[3, 2]": "point"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 3]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[3, 2]": "point"}, "recurse": false, "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 18, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 4]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "Av+(Perm((0, 1)))"}, "out_tiling": {"[0, 3]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 5]": "Av(Perm((0, 1)))", "[3, 4]": "point", "[4, 2]": "point", "[5, 1]": "Av(Perm((0, 1)))"}, "recurse": false, "relation": "| Inserting the top most point in to the cell Cell(i=4, j=1). | "}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 19, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av(Perm((0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 4]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av(Perm((0, 1)))"}, "recurse": false, "relation": ""}, {"children": [{"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 20, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 4]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 4]": "Av(Perm((0, 1)))", "[3, 2]": "point", "[4, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": false, "relation": ""}, {"children": [], "formal_step": "The tiling is a subset of the subclass", "identifier": 21, "in_tiling": {"[0, 1]": "point", "[1, 2]": "point", "[2, 0]": "Av+(Perm((0, 1)))", "[3, 3]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 3]": "point", "[2, 1]": "Av(Perm((0, 1)))", "[3, 0]": "point", "[4, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": false, "relation": "| Inserting the top most point in to the cell Cell(i=2, j=0). | Inserting the top most point in to the cell Cell(i=4, j=4). | The reverse of: Inserting the top most point in to the cell Cell(i=2, j=0). | Inserting the bottom most point in to the cell Cell(i=2, j=0). | The reverse of: Inserting the top most point in to the cell Cell(i=4, j=4). | "}], "formal_step": "We perform cell insertion into cell (4, 1); either it is empty or Av+(Perm((0, 1))).", "identifier": 22, "in_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 5]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 5]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 4]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": false, "relation": ""}], "formal_step": "We perform cell insertion into cell (5, 4); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 23, "in_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 2]": "point", "[1, 0]": "Av(Perm((0, 2, 1)), Perm((1, 2, 3, 0)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[2, 5]": "Av(Perm((0, 1, 2)), Perm((1, 0, 2)), Perm((2, 3, 0, 1)))", "[3, 3]": "point", "[4, 1]": "Av(Perm((0, 1)))", "[5, 4]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": false, "relation": "| Inserting the bottom most point in to the cell Cell(i=1, j=2). | "}], "formal_step": "We perform cell insertion into cell (1, 2); either it is empty or Av+(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 24, "in_tiling": {"[0, 0]": "Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 1]": "point", "[1, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))", "[1, 2]": "Av(Perm((1, 0, 2)), Perm((1, 2, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": false, "relation": "| Inserting the left most point in to the cell Cell(i=0, j=0). | "}], "formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1))).", "identifier": 25, "in_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 2, 1, 3)), Perm((1, 2, 3, 0)), Perm((1, 3, 0, 2)), Perm((2, 1, 3, 0)), Perm((2, 3, 0, 1)))"}, "recurse": false, "relation": ""}}
