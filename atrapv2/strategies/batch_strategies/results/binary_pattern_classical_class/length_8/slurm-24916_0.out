{"root": {"formal_step": "We perform cell insertion into cell (0, 0); either it is empty or Av+(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0))).", "in_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "relation": "", "identifier": 0, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {}, "out_tiling": {}, "relation": "", "identifier": 1, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Placing the binary pattern \n | | |#\n-+-+-2-\n | |#|#\n-+-1-+-\n |#|#| \n-0-+-+-\n |#| | ", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2, 3)), Perm((0, 1, 3, 2)), Perm((0, 2, 1, 3)), Perm((0, 2, 3, 1)), Perm((0, 3, 1, 2)), Perm((1, 0, 2, 3)), Perm((1, 2, 0, 3)), Perm((1, 2, 3, 0)))"}, "relation": "", "identifier": 3, "children": [{"formal_step": "Verified because it is a one by one tiling with a subclass", "in_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)))"}, "out_tiling": {"[0, 0]": "Av+(Perm((0, 1, 2)))"}, "relation": "", "identifier": 31, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "We perform cell insertion into cell (0, 2); either it is empty or Av+(Perm((0, 1))).", "in_tiling": {"[1, 0]": "point", "[2, 1]": "point", "[0, 2]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[0, 4]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[1, 0]": "point", "[2, 1]": "point", "[0, 2]": "Av(Perm((0, 1)))", "[3, 3]": "point", "[0, 4]": "Av(Perm((0, 1, 2)))"}, "relation": "", "identifier": 32, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[1, 0]": "point", "[2, 1]": "point", "[3, 2]": "point", "[0, 3]": "Av(Perm((0, 1, 2)))"}, "relation": "", "identifier": 94, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "Reversibly delete the blocks at cells [Cell(i=2, j=2), Cell(i=4, j=1), Cell(i=5, j=4)]", "in_tiling": {"[1, 0]": "point", "[2, 1]": "point", "[0, 2]": "Av+(Perm((0, 1)))", "[3, 3]": "point", "[0, 4]": "Av(Perm((0, 1, 2)))"}, "out_tiling": {"[3, 0]": "point", "[4, 1]": "point", "[2, 2]": "Av(Perm((0, 1)))", "[1, 3]": "point", "[5, 4]": "point", "[0, 5]": "Av(Perm((0, 1, 2)))", "[2, 5]": "Av(Perm((0, 1)))"}, "relation": "| Inserting the top most point in to the cell Cell(i=0, j=2). | ", "identifier": 96, "children": [{"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[3, 0]": "point", "[1, 1]": "point", "[0, 2]": "Av(Perm((0, 1, 2)))", "[2, 2]": "Av(Perm((0, 1)))"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av+(Perm((0, 1, 2)))"}, "relation": "| Reverse of: Inserting the bottom most point in to the cell Cell(i=0, j=1). | ", "identifier": 144, "children": [], "recurse": "[]", "strategy_verified": true}, {"formal_step": "The tiling is a subset of the subclass", "in_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)))", "[2, 2]": "point"}, "out_tiling": {"[1, 0]": "point", "[0, 1]": "Av(Perm((0, 1)))", "[2, 2]": "point"}, "relation": "", "identifier": 294, "children": [], "recurse": "[]", "strategy_verified": true}], "recurse": "[{Cell(i=0, j=2): Cell(i=0, j=5), Cell(i=1, j=1): Cell(i=1, j=3), Cell(i=2, j=2): Cell(i=2, j=5), Cell(i=3, j=0): Cell(i=3, j=0)}, {Cell(i=0, j=1): Cell(i=2, j=2), Cell(i=1, j=0): Cell(i=4, j=1), Cell(i=2, j=2): Cell(i=5, j=4)}]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}], "recurse": "[]", "strategy_verified": false}}
